(()=>{"use strict";const t={setAccountProperties:async function(t){if(t)return this.todos=t.todos,this.username=t.username,this.id=t.id,t.todos;this.todos=[]},getUserData:async function(t){try{const e=await fetch(`https://632498066f7a75f8b795c5fa.mockapi.io/todos?username=${t}`,{method:"GET",headers:{"Content-type":"application/json; charset=UTF-8"},mode:"cors"});return(await e.json())[0]}catch(t){console.log(t)}},deleteUserTodo:function(t,e){for(let n=0;n<t.length;n++)if(t[n].content===e){t.splice(n,1);break}return t},updateUserTodos:function(t,e,n){const o={username:t,todos:e};fetch(`https://632498066f7a75f8b795c5fa.mockapi.io/todos/${n}`,{method:"PUT",headers:{"Content-type":"application/json; charset=UTF-8"},mode:"cors",body:JSON.stringify(o)})},switchCompleteUserTodo:function(t,e){for(let n=0;n<t.length;n++)if(t[n].content===e){t[n].isCompleted=!t[n].isCompleted;break}return t},editUserTodo:function(t,e,n,o){for(let r=0;r<t.length;r++)if(t[r].content===e){t[r].content=n,t[r].date=o;break}},getTodoDate:function(t,e){for(let n=0;n<e.length;n++)if(e[n].content===t)return e[n].date},addNewAccount:async function(t){const e={username:t,todos:[]};await fetch("https://632498066f7a75f8b795c5fa.mockapi.io/todos",{method:"POST",headers:{"Content-type":"application/json; charset=UTF-8"},mode:"cors",body:JSON.stringify(e)})},Todo:function(t,e){return{content:t,isCompleted:!1,date:e}},todos:[],username:void 0,id:void 0,darkMode:!1};function e(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}function o(t){return e(1,arguments),t instanceof Date||"object"===n(t)&&"[object Date]"===Object.prototype.toString.call(t)}function r(t){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},r(t)}function a(t){e(1,arguments);var n=Object.prototype.toString.call(t);return t instanceof Date||"object"===r(t)&&"[object Date]"===n?new Date(t.getTime()):"number"==typeof t||"[object Number]"===n?new Date(t):("string"!=typeof t&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function i(t){if(e(1,arguments),!o(t)&&"number"!=typeof t)return!1;var n=a(t);return!isNaN(Number(n))}function s(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function d(t,n){e(2,arguments);var o=a(t).getTime(),r=s(n);return new Date(o+r)}function u(t,n){e(2,arguments);var o=s(n);return d(t,-o)}var c=864e5;function l(t){e(1,arguments);var n=1,o=a(t),r=o.getUTCDay(),i=(r<n?7:0)+r-n;return o.setUTCDate(o.getUTCDate()-i),o.setUTCHours(0,0,0,0),o}function m(t){e(1,arguments);var n=a(t),o=n.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(o+1,0,4),r.setUTCHours(0,0,0,0);var i=l(r),s=new Date(0);s.setUTCFullYear(o,0,4),s.setUTCHours(0,0,0,0);var d=l(s);return n.getTime()>=i.getTime()?o+1:n.getTime()>=d.getTime()?o:o-1}function h(t){e(1,arguments);var n=m(t),o=new Date(0);o.setUTCFullYear(n,0,4),o.setUTCHours(0,0,0,0);var r=l(o);return r}var f=6048e5,g={};function v(){return g}function y(t,n){var o,r,i,d,u,c,l,m;e(1,arguments);var h=v(),f=s(null!==(o=null!==(r=null!==(i=null!==(d=null==n?void 0:n.weekStartsOn)&&void 0!==d?d:null==n||null===(u=n.locale)||void 0===u||null===(c=u.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==i?i:h.weekStartsOn)&&void 0!==r?r:null===(l=h.locale)||void 0===l||null===(m=l.options)||void 0===m?void 0:m.weekStartsOn)&&void 0!==o?o:0);if(!(f>=0&&f<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var g=a(t),y=g.getUTCDay(),p=(y<f?7:0)+y-f;return g.setUTCDate(g.getUTCDate()-p),g.setUTCHours(0,0,0,0),g}function p(t,n){var o,r,i,d,u,c,l,m;e(1,arguments);var h=a(t),f=h.getUTCFullYear(),g=v(),p=s(null!==(o=null!==(r=null!==(i=null!==(d=null==n?void 0:n.firstWeekContainsDate)&&void 0!==d?d:null==n||null===(u=n.locale)||void 0===u||null===(c=u.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==i?i:g.firstWeekContainsDate)&&void 0!==r?r:null===(l=g.locale)||void 0===l||null===(m=l.options)||void 0===m?void 0:m.firstWeekContainsDate)&&void 0!==o?o:1);if(!(p>=1&&p<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var w=new Date(0);w.setUTCFullYear(f+1,0,p),w.setUTCHours(0,0,0,0);var b=y(w,n),C=new Date(0);C.setUTCFullYear(f,0,p),C.setUTCHours(0,0,0,0);var T=y(C,n);return h.getTime()>=b.getTime()?f+1:h.getTime()>=T.getTime()?f:f-1}function w(t,n){var o,r,a,i,d,u,c,l;e(1,arguments);var m=v(),h=s(null!==(o=null!==(r=null!==(a=null!==(i=null==n?void 0:n.firstWeekContainsDate)&&void 0!==i?i:null==n||null===(d=n.locale)||void 0===d||null===(u=d.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==a?a:m.firstWeekContainsDate)&&void 0!==r?r:null===(c=m.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==o?o:1),f=p(t,n),g=new Date(0);g.setUTCFullYear(f,0,h),g.setUTCHours(0,0,0,0);var w=y(g,n);return w}var b=6048e5;function C(t,e){for(var n=t<0?"-":"",o=Math.abs(t).toString();o.length<e;)o="0"+o;return n+o}const T=function(t,e){var n=t.getUTCFullYear(),o=n>0?n:1-n;return C("yy"===e?o%100:o,e.length)},S=function(t,e){var n=t.getUTCMonth();return"M"===e?String(n+1):C(n+1,2)},k=function(t,e){return C(t.getUTCDate(),e.length)},M=function(t,e){return C(t.getUTCHours()%12||12,e.length)},D=function(t,e){return C(t.getUTCHours(),e.length)},x=function(t,e){return C(t.getUTCMinutes(),e.length)},E=function(t,e){return C(t.getUTCSeconds(),e.length)},U=function(t,e){var n=e.length,o=t.getUTCMilliseconds();return C(Math.floor(o*Math.pow(10,n-3)),e.length)};function L(t,e){var n=t>0?"-":"+",o=Math.abs(t),r=Math.floor(o/60),a=o%60;if(0===a)return n+String(r);var i=e||"";return n+String(r)+i+C(a,2)}function N(t,e){return t%60==0?(t>0?"-":"+")+C(Math.abs(t)/60,2):W(t,e)}function W(t,e){var n=e||"",o=t>0?"-":"+",r=Math.abs(t);return o+C(Math.floor(r/60),2)+n+C(r%60,2)}const P={G:function(t,e,n){var o=t.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(o,{width:"abbreviated"});case"GGGGG":return n.era(o,{width:"narrow"});default:return n.era(o,{width:"wide"})}},y:function(t,e,n){if("yo"===e){var o=t.getUTCFullYear(),r=o>0?o:1-o;return n.ordinalNumber(r,{unit:"year"})}return T(t,e)},Y:function(t,e,n,o){var r=p(t,o),a=r>0?r:1-r;return"YY"===e?C(a%100,2):"Yo"===e?n.ordinalNumber(a,{unit:"year"}):C(a,e.length)},R:function(t,e){return C(m(t),e.length)},u:function(t,e){return C(t.getUTCFullYear(),e.length)},Q:function(t,e,n){var o=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"Q":return String(o);case"QQ":return C(o,2);case"Qo":return n.ordinalNumber(o,{unit:"quarter"});case"QQQ":return n.quarter(o,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(o,{width:"narrow",context:"formatting"});default:return n.quarter(o,{width:"wide",context:"formatting"})}},q:function(t,e,n){var o=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"q":return String(o);case"qq":return C(o,2);case"qo":return n.ordinalNumber(o,{unit:"quarter"});case"qqq":return n.quarter(o,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(o,{width:"narrow",context:"standalone"});default:return n.quarter(o,{width:"wide",context:"standalone"})}},M:function(t,e,n){var o=t.getUTCMonth();switch(e){case"M":case"MM":return S(t,e);case"Mo":return n.ordinalNumber(o+1,{unit:"month"});case"MMM":return n.month(o,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(o,{width:"narrow",context:"formatting"});default:return n.month(o,{width:"wide",context:"formatting"})}},L:function(t,e,n){var o=t.getUTCMonth();switch(e){case"L":return String(o+1);case"LL":return C(o+1,2);case"Lo":return n.ordinalNumber(o+1,{unit:"month"});case"LLL":return n.month(o,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(o,{width:"narrow",context:"standalone"});default:return n.month(o,{width:"wide",context:"standalone"})}},w:function(t,n,o,r){var i=function(t,n){e(1,arguments);var o=a(t),r=y(o,n).getTime()-w(o,n).getTime();return Math.round(r/b)+1}(t,r);return"wo"===n?o.ordinalNumber(i,{unit:"week"}):C(i,n.length)},I:function(t,n,o){var r=function(t){e(1,arguments);var n=a(t),o=l(n).getTime()-h(n).getTime();return Math.round(o/f)+1}(t);return"Io"===n?o.ordinalNumber(r,{unit:"week"}):C(r,n.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getUTCDate(),{unit:"date"}):k(t,e)},D:function(t,n,o){var r=function(t){e(1,arguments);var n=a(t),o=n.getTime();n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0);var r=n.getTime(),i=o-r;return Math.floor(i/c)+1}(t);return"Do"===n?o.ordinalNumber(r,{unit:"dayOfYear"}):C(r,n.length)},E:function(t,e,n){var o=t.getUTCDay();switch(e){case"E":case"EE":case"EEE":return n.day(o,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(o,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},e:function(t,e,n,o){var r=t.getUTCDay(),a=(r-o.weekStartsOn+8)%7||7;switch(e){case"e":return String(a);case"ee":return C(a,2);case"eo":return n.ordinalNumber(a,{unit:"day"});case"eee":return n.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},c:function(t,e,n,o){var r=t.getUTCDay(),a=(r-o.weekStartsOn+8)%7||7;switch(e){case"c":return String(a);case"cc":return C(a,e.length);case"co":return n.ordinalNumber(a,{unit:"day"});case"ccc":return n.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(r,{width:"narrow",context:"standalone"});case"cccccc":return n.day(r,{width:"short",context:"standalone"});default:return n.day(r,{width:"wide",context:"standalone"})}},i:function(t,e,n){var o=t.getUTCDay(),r=0===o?7:o;switch(e){case"i":return String(r);case"ii":return C(r,e.length);case"io":return n.ordinalNumber(r,{unit:"day"});case"iii":return n.day(o,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(o,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},a:function(t,e,n){var o=t.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},b:function(t,e,n){var o,r=t.getUTCHours();switch(o=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},B:function(t,e,n){var o,r=t.getUTCHours();switch(o=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){var o=t.getUTCHours()%12;return 0===o&&(o=12),n.ordinalNumber(o,{unit:"hour"})}return M(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getUTCHours(),{unit:"hour"}):D(t,e)},K:function(t,e,n){var o=t.getUTCHours()%12;return"Ko"===e?n.ordinalNumber(o,{unit:"hour"}):C(o,e.length)},k:function(t,e,n){var o=t.getUTCHours();return 0===o&&(o=24),"ko"===e?n.ordinalNumber(o,{unit:"hour"}):C(o,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getUTCMinutes(),{unit:"minute"}):x(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getUTCSeconds(),{unit:"second"}):E(t,e)},S:function(t,e){return U(t,e)},X:function(t,e,n,o){var r=(o._originalDate||t).getTimezoneOffset();if(0===r)return"Z";switch(e){case"X":return N(r);case"XXXX":case"XX":return W(r);default:return W(r,":")}},x:function(t,e,n,o){var r=(o._originalDate||t).getTimezoneOffset();switch(e){case"x":return N(r);case"xxxx":case"xx":return W(r);default:return W(r,":")}},O:function(t,e,n,o){var r=(o._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+L(r,":");default:return"GMT"+W(r,":")}},z:function(t,e,n,o){var r=(o._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+L(r,":");default:return"GMT"+W(r,":")}},t:function(t,e,n,o){var r=o._originalDate||t;return C(Math.floor(r.getTime()/1e3),e.length)},T:function(t,e,n,o){return C((o._originalDate||t).getTime(),e.length)}};var q=function(t,e){switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},Y=function(t,e){switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}},A={p:Y,P:function(t,e){var n,o=t.match(/(P+)(p+)?/)||[],r=o[1],a=o[2];if(!a)return q(t,e);switch(r){case"P":n=e.dateTime({width:"short"});break;case"PP":n=e.dateTime({width:"medium"});break;case"PPP":n=e.dateTime({width:"long"});break;default:n=e.dateTime({width:"full"})}return n.replace("{{date}}",q(r,e)).replace("{{time}}",Y(a,e))}};const O=A;function j(t){var e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}var F=["D","DD"],H=["YY","YYYY"];function z(t){return-1!==F.indexOf(t)}function V(t){return-1!==H.indexOf(t)}function I(t,e,n){if("YYYY"===t)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===t)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===t)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===t)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var B={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function G(t){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.width?String(e.width):t.defaultWidth,o=t.formats[n]||t.formats[t.defaultWidth];return o}}var Q,X={date:G({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:G({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:G({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},R={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function J(t){return function(e,n){var o;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&t.formattingValues){var r=t.defaultFormattingWidth||t.defaultWidth,a=null!=n&&n.width?String(n.width):r;o=t.formattingValues[a]||t.formattingValues[r]}else{var i=t.defaultWidth,s=null!=n&&n.width?String(n.width):t.defaultWidth;o=t.values[s]||t.values[i]}return o[t.argumentCallback?t.argumentCallback(e):e]}}function $(t){return function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=n.width,r=o&&t.matchPatterns[o]||t.matchPatterns[t.defaultMatchWidth],a=e.match(r);if(!a)return null;var i,s=a[0],d=o&&t.parsePatterns[o]||t.parsePatterns[t.defaultParseWidth],u=Array.isArray(d)?K(d,(function(t){return t.test(s)})):_(d,(function(t){return t.test(s)}));i=t.valueCallback?t.valueCallback(u):u,i=n.valueCallback?n.valueCallback(i):i;var c=e.slice(s.length);return{value:i,rest:c}}}function _(t,e){for(var n in t)if(t.hasOwnProperty(n)&&e(t[n]))return n}function K(t,e){for(var n=0;n<t.length;n++)if(e(t[n]))return n}const Z={code:"en-US",formatDistance:function(t,e,n){var o,r=B[t];return o="string"==typeof r?r:1===e?r.one:r.other.replace("{{count}}",e.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+o:o+" ago":o},formatLong:X,formatRelative:function(t,e,n,o){return R[t]},localize:{ordinalNumber:function(t,e){var n=Number(t),o=n%100;if(o>20||o<10)switch(o%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:J({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:J({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return t-1}}),month:J({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:J({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:J({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(Q={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.match(Q.matchPattern);if(!n)return null;var o=n[0],r=t.match(Q.parsePattern);if(!r)return null;var a=Q.valueCallback?Q.valueCallback(r[0]):r[0];a=e.valueCallback?e.valueCallback(a):a;var i=t.slice(o.length);return{value:a,rest:i}}),era:$({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:$({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:$({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:$({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:$({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};var tt=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,et=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,nt=/^'([^]*?)'?$/,ot=/''/g,rt=/[a-zA-Z]/;function at(t){var e=t.match(nt);return e?e[1].replace(ot,"'"):t}const it=function(){function t(t){return!t.validity.tooShort&&""!==t.value}return{formatDate:function(t,n){return function(t,n,o){var r,d,c,l,m,h,f,g,y,p,w,b,C,T,S,k,M,D;e(2,arguments);var x=String(n),E=v(),U=null!==(r=null!==(d=null==o?void 0:o.locale)&&void 0!==d?d:E.locale)&&void 0!==r?r:Z,L=s(null!==(c=null!==(l=null!==(m=null!==(h=null==o?void 0:o.firstWeekContainsDate)&&void 0!==h?h:null==o||null===(f=o.locale)||void 0===f||null===(g=f.options)||void 0===g?void 0:g.firstWeekContainsDate)&&void 0!==m?m:E.firstWeekContainsDate)&&void 0!==l?l:null===(y=E.locale)||void 0===y||null===(p=y.options)||void 0===p?void 0:p.firstWeekContainsDate)&&void 0!==c?c:1);if(!(L>=1&&L<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var N=s(null!==(w=null!==(b=null!==(C=null!==(T=null==o?void 0:o.weekStartsOn)&&void 0!==T?T:null==o||null===(S=o.locale)||void 0===S||null===(k=S.options)||void 0===k?void 0:k.weekStartsOn)&&void 0!==C?C:E.weekStartsOn)&&void 0!==b?b:null===(M=E.locale)||void 0===M||null===(D=M.options)||void 0===D?void 0:D.weekStartsOn)&&void 0!==w?w:0);if(!(N>=0&&N<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!U.localize)throw new RangeError("locale must contain localize property");if(!U.formatLong)throw new RangeError("locale must contain formatLong property");var W=a(t);if(!i(W))throw new RangeError("Invalid time value");var q=j(W),Y=u(W,q),A={firstWeekContainsDate:L,weekStartsOn:N,locale:U,_originalDate:W};return x.match(et).map((function(t){var e=t[0];return"p"===e||"P"===e?(0,O[e])(t,U.formatLong):t})).join("").match(tt).map((function(e){if("''"===e)return"'";var r=e[0];if("'"===r)return at(e);var a=P[r];if(a)return null!=o&&o.useAdditionalWeekYearTokens||!V(e)||I(e,n,String(t)),null!=o&&o.useAdditionalDayOfYearTokens||!z(e)||I(e,n,String(t)),a(Y,e,U.localize,A);if(r.match(rt))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return e})).join("")}(new Date(t),n)},createElementWithClass:function(t,e){const n=document.createElement(t);for(let[t,o]of Object.entries(e))"event"===t?n.addEventListener(e.event.type,e.event.functionName):n[t]=o;return n},isInputValidationCorrect:t,showInputValidationError:function(e){t(e)?e.setCustomValidity(""):(e.setCustomValidity(`This input must be at least ${e.minLength} characters!`),e.reportValidity())}}}(),st=it,dt=function(){function t(){const t=localStorage.getItem("account");return JSON.parse(t)}return{saveAccount:function(t){const e={username:t.username,todos:t.todos,id:t.id,darkMode:t.darkMode};localStorage.setItem("account",JSON.stringify(e))},initializeAccountProperties:function(e){const n=t();e.username=n.username,e.todos=n.todos,e.id=n.id,e.darkMode=n.darkMode},getAccount:t}}(),ut=function(){const e=t,n=st,o=document.querySelector(".todos-section"),r=dt;function a(t){const a=document.querySelector(".add-todo-form-name-input");if(!n.isInputValidationCorrect(a))return n.showInputValidationError(a),void t.preventDefault();const i=document.querySelector(".add-todo-form-name-input").value,s=i[0].toUpperCase()+i.slice(1),u=document.querySelector(".add-todo-form-date-input").value,c=n.formatDate(new Date(u),"MM/dd/yyyy"),l=e.Todo(s,c);e.todos.push(l),f(e.todos),d(o),e.updateUserTodos(e.username,e.todos,e.id),r.saveAccount(e)}function i(){document.querySelector(".add-todo-btn").remove();const t=n.createElementWithClass("div",{className:"add-todo-form-container"}),e=n.createElementWithClass("div",{className:"todo-form-input-container"}),r=n.createElementWithClass("input",{className:"add-todo-form-name-input",placeholder:"Todo Name",type:"text",spellcheck:!1,minLength:3}),i=n.createElementWithClass("input",{className:"add-todo-form-date-input",type:"date",value:n.formatDate(new Date,"yyyy-MM-dd")}),d=n.createElementWithClass("div",{className:"todo-form-btn-container"}),u=n.createElementWithClass("button",{className:"add-todo-form-btn form-btn-add-edit",textContent:"Add",event:{type:"click",functionName:a}}),c=n.createElementWithClass("button",{className:"cancel-todo-form-btn form-btn-cancel",textContent:"Cancel",event:{type:"click",functionName:s}});r.addEventListener("click",n.showInputValidationError.bind(r,r)),e.append(r,i),d.append(u,c),t.append(e,d),o.appendChild(t)}function s(){document.querySelector(".add-todo-form-container").remove(),d(o)}function d(t){t.appendChild(st.createElementWithClass("button",{className:"add-todo-btn",innerHTML:'<?xml version="1.0" ?><!DOCTYPE svg  PUBLIC \'-//W3C//DTD SVG 1.1//EN\'  \'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\'><svg \n                class="add-todo-icon" height="32px" id="Layer_1" style="enable-background:new 0 0 32 32;" version="1.1" viewBox="0 0 32 32" width="32px" xml:space="preserve" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><path d="M28,14H18V4c0-1.104-0.896-2-2-2s-2,0.896-2,2v10H4c-1.104,0-2,0.896-2,2s0.896,2,2,2h10v10c0,1.104,0.896,2,2,2  s2-0.896,2-2V18h10c1.104,0,2-0.896,2-2S29.104,14,28,14z"/></svg> Add Todo',event:{type:"click",functionName:i}}))}function u(t){t.stopPropagation();const o=document.querySelector(".overlay-general"),r=document.querySelector(".edit-todo-form");o.classList.remove("hidden"),r.classList.remove("hidden"),r.appendChild(function(t){const o=t.closest(".todo-container").querySelector(".todo-content").textContent,r=e.getTodoDate(o,e.todos),a=n.createElementWithClass("div",{className:`edit-todo-container edit-todo-container-${o.replace(/ /g,"-")}`}),i=n.createElementWithClass("input",{className:"edit-todo-content-input",type:"text",value:o,minLength:3}),s=n.createElementWithClass("input",{className:"edit-todo-date-input",type:"date",value:n.formatDate(new Date(r),"yyyy-MM-dd")}),d=n.createElementWithClass("div",{className:"todo-form-btn-container edit-todo-btn-container"}),u=n.createElementWithClass("button",{className:"form-btn-add-edit edit-todo-form-btn",textContent:"Edit",type:"button",event:{type:"click",functionName:m}}),l=n.createElementWithClass("button",{className:"cancel-todo-form-btn form-btn-cancel",textContent:"Cancel",type:"button",event:{type:"click",functionName:c}});return i.addEventListener("input",n.showInputValidationError.bind(i,i)),d.append(u,l),a.append(i,s,d),a}(this))}function c(){const t=document.querySelector(".overlay-general"),e=document.querySelector(".edit-todo-form");t.classList.add("hidden"),e.classList.add("hidden"),v(e)}function l(t){t.stopPropagation();const n=e.username,o=this.querySelector(".todo-content"),a=o.textContent,i=this.querySelector(".todo-date"),s=e.todos;o.style.textDecoration="line-through"===o.style.textDecoration?"none":"line-through",i.style.textDecoration="line-through"===i.style.textDecoration?"none":"line-through",e.switchCompleteUserTodo(s,a),e.updateUserTodos(n,s,e.id),r.saveAccount(e)}async function m(t){const a=document.querySelector(".edit-todo-content-input");if(!n.isInputValidationCorrect(a))return n.showInputValidationError(a),void t.preventDefault();const i=function(){let t=document.querySelector(".edit-todo-container").className.split(" ")[1].split("edit-todo-container-")[1];return t=t.replace(/-/g," "),t}(),s=document.querySelector(".edit-todo-content-input").value,u=document.querySelector(".edit-todo-date-input").value;e.editUserTodo(e.todos,i,s,u),f(e.todos),c(),d(o),e.updateUserTodos(e.username,e.todos,e.id),r.saveAccount(e)}function h(){const t=e.username,n=e.todos,o=this.closest(".todo-container"),a=o.querySelector(".todo-content").textContent;o.remove(),e.deleteUserTodo(n,a),e.updateUserTodos(t,n,e.id),r.saveAccount(e)}async function f(t){g(),t.forEach((t=>{o.appendChild(function(t){const e=n.createElementWithClass("div",{className:"todo-container",event:{type:"click",functionName:l}}),o=n.createElementWithClass("div",{className:"todo-container-left"}),r=n.createElementWithClass("div",{className:"todo-container-right"}),a=n.createElementWithClass("button",{className:"todo-isCompleted",event:{type:"click",functionName:h}}),i=n.createElementWithClass("p",{className:"todo-content",textContent:t.content}),s=n.createElementWithClass("span",{className:"todo-date",textContent:n.formatDate(new Date(t.date),"EEE do MMM yyyy")}),d=n.createElementWithClass("button",{className:"todo-edit",textContent:"Edit",event:{type:"click",functionName:u}});return t.isCompleted&&(i.style.textDecoration="line-through",s.style.textDecoration="line-through"),o.append(a,i,d),r.append(s),e.append(o,r),e}(t))}))}function g(){v(o)}function v(t){for(;t.firstChild;)t.removeChild(t.lastChild)}return r.getAccount()&&r.initializeAccountProperties(e),{displayUserTodos:f,clearTodos:g,deleteTodo:h,switchCompleteTodo:l,displayAddTodoButton:d,addTodo:a}}();!function(){const e=t,n=dt,o=ut,r=st,a=document.querySelector(".theme-mode-switch-btn"),i=document.querySelector(":root"),s=document.querySelector(".login-btn"),d=document.querySelector(".logout-btn"),u=document.querySelector(".overlay-general"),c=document.querySelector(".form-login-btn"),l=document.querySelector(".username-input"),m=document.querySelector(".username-error"),h=[...document.querySelectorAll(".form-close-btn")],f=document.querySelector(".theme-name"),g=document.querySelector(".todos-section"),v=document.querySelector(".login-form"),y=document.querySelector(".sign-up-btn"),p=document.querySelector(".form-signup-btn"),w=document.querySelector(".signup-form"),b=document.querySelector(".signup-username-input"),C=document.querySelector(".signup-overlay-form"),T=document.querySelector(".signup-username-error");let S=!1;function k(t){const o=a.querySelector("img");!0===t?(i.classList.add("dark-theme"),o.src="icons/darkTheme.svg",a.classList.add("dark-theme"),f.textContent="Light Mode"):!1===t?(i.classList.remove("dark-theme"),o.src="icons/lightTheme.svg",a.classList.remove("dark-theme"),f.textContent="Dark Mode"):(i.classList.toggle("dark-theme"),a.classList.contains("dark-theme")?(o.src="icons/lightTheme.svg",a.classList.remove("dark-theme"),f.textContent="Dark Mode",e.darkMode=!1):(o.src="icons/darkTheme.svg",a.classList.add("dark-theme"),f.textContent="Light Mode",e.darkMode=!0)),n.saveAccount(e)}function M(){u.classList.add("hidden"),v.classList.add("hidden"),w.classList.add("hidden")}function D(t){s.textContent=t+"",s.innerHTML=`${t}<?xml version="1.0" ?><svg class= "dropdown-arrow-icon" height="48" viewBox="0 0 48 48" width="48" xmlns="http://www.w3.org/2000/svg"><path d="M14.83 16.42l9.17 9.17 9.17-9.17 2.83 2.83-12 12-12-12z"/><path d="M0-.75h48v48h-48z" fill="none"/></svg>`,s.classList.remove("login-btn"),s.classList.add("account-btn")}a.addEventListener("click",k),s.addEventListener("click",(function(){this.classList.contains("login-btn")&&(u.classList.remove("hidden"),v.classList.remove("hidden"),l.value="",m.classList.add("hidden"))})),d.addEventListener("click",(function(){const t=document.querySelector(".account-btn");t.classList.remove("account-btn"),t.classList.add("login-btn"),t.textContent="Login",o.clearTodos(),localStorage.clear()})),c.addEventListener("click",(async function(t){const a=document.querySelector(".overlay-form");if(S)return;if(S=!0,!r.isInputValidationCorrect(l))return r.showInputValidationError(l),t.preventDefault(),void(S=!1);a.classList.remove("hidden");const i=l.value,s=await e.getUserData(i);if(s){const t=s.todos;e.setAccountProperties(s),await o.displayUserTodos(t),D(i),o.displayAddTodoButton(g),M(),a.classList.add("hidden"),S=!1,n.saveAccount(e)}else a.classList.add("hidden"),m.classList.remove("hidden"),S=!1})),l.addEventListener("input",r.showInputValidationError.bind(l,l)),h.forEach((t=>t.addEventListener("click",M))),y.addEventListener("click",(function(){u.classList.remove("hidden"),v.classList.add("hidden"),w.classList.remove("hidden"),b.value="",T.classList.add("hidden")})),b.addEventListener("input",r.showInputValidationError.bind(b,b)),p.addEventListener("click",(async function(t){const a=b.value;if(!r.isInputValidationCorrect(b))return r.showInputValidationError(b),void t.preventDefault();C.classList.remove("hidden");let i=await e.getUserData(a);if(i)return T.classList.remove("hidden"),void C.classList.add("hidden");await e.addNewAccount(a),i=await e.getUserData(a),e.setAccountProperties(i),C.classList.add("hidden"),M(),D(a),o.displayUserTodos(e.todos),o.displayAddTodoButton(g),e.username=a,n.saveAccount(e)})),n.getAccount()&&(n.initializeAccountProperties(e),o.displayUserTodos(e.todos),D(e.username),o.displayAddTodoButton(g),k(t.darkMode))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoibUJBQUEsTUEwSUEsRUFqQlcsQ0FDSEEscUJBckh5QkMsZUFBZ0JDLEdBQ3pDLEdBQUlBLEVBSUEsT0FIQUMsS0FBS0MsTUFBUUYsRUFBS0UsTUFDbEJELEtBQUtFLFNBQVdILEVBQUtHLFNBQ3JCRixLQUFLRyxHQUFLSixFQUFLSSxHQUNSSixFQUFLRSxNQUVaRCxLQUFLQyxNQUFRLEVBRXJCLEVBNkdJRyxZQTNHZ0JOLGVBQWdCSSxHQUNoQyxJQUNJLE1BQU1HLFFBQWlCQyxNQUNuQiw4REFBOERKLElBQzlELENBQ0lLLE9BQVEsTUFDUkMsUUFBUyxDQUNMLGVBQWdCLG1DQUVwQkMsS0FBTSxTQVFkLGFBSHNCSixFQUFTSyxRQUNWLEVBS3pCLENBRkUsTUFBT0MsR0FDTEMsUUFBUUMsSUFBSUYsRUFDaEIsQ0FDSixFQXVGSUcsZUFyRG1CLFNBQVVDLEVBQVdDLEdBQ3hDLElBQUssSUFBSUMsRUFBSSxFQUFHQSxFQUFJRixFQUFVRyxPQUFRRCxJQUNsQyxHQUFJRixFQUFVRSxHQUFHRSxVQUFZSCxFQUFhLENBQ3RDRCxFQUFVSyxPQUFPSCxFQUFHLEdBQ3BCLEtBQ0osQ0FHSixPQUFPRixDQUNYLEVBNkNJTSxnQkF0Rm9CLFNBQVVuQixFQUFVYSxFQUFXTyxHQUNuRCxNQUFNQyxFQUFXLENBQ2JyQixXQUNBRCxNQUFPYyxHQUdYVCxNQUFNLHFEQUFxRGdCLElBQVUsQ0FDakVmLE9BQVEsTUFDUkMsUUFBUyxDQUNMLGVBQWdCLG1DQUVwQkMsS0FBTSxPQUNOZSxLQUFNQyxLQUFLQyxVQUFVSCxJQUU3QixFQXlFSUksdUJBNUMyQixTQUFVWixFQUFXQyxHQUNoRCxJQUFLLElBQUlDLEVBQUksRUFBR0EsRUFBSUYsRUFBVUcsT0FBUUQsSUFDbEMsR0FBSUYsRUFBVUUsR0FBR0UsVUFBWUgsRUFBYSxDQUN0Q0QsRUFBVUUsR0FBR1csYUFBY2IsRUFBVUUsR0FBR1csWUFHeEMsS0FDSixDQUVKLE9BQU9iLENBQ1gsRUFtQ0ljLGFBckJpQixTQUNqQmQsRUFDQUksRUFDQVcsRUFDQUMsR0FFQSxJQUFLLElBQUlkLEVBQUksRUFBR0EsRUFBSUYsRUFBVUcsT0FBUUQsSUFDbEMsR0FBSUYsRUFBVUUsR0FBR0UsVUFBWUEsRUFBUyxDQUNsQ0osRUFBVUUsR0FBR0UsUUFBVVcsRUFDdkJmLEVBQVVFLEdBQUdlLEtBQU9ELEVBQ3BCLEtBQ0osQ0FFUixFQVNJRSxZQWxDZ0IsU0FBVWQsRUFBU0osR0FDbkMsSUFBSyxJQUFJRSxFQUFJLEVBQUdBLEVBQUlGLEVBQVVHLE9BQVFELElBQ2xDLEdBQUlGLEVBQVVFLEdBQUdFLFVBQVlBLEVBQ3pCLE9BQU9KLEVBQVVFLEdBQUdlLElBR2hDLEVBNkJJRSxjQTFFa0JwQyxlQUFnQkksR0FDbEMsTUFBTXFCLEVBQVcsQ0FDYnJCLFdBQ0FELE1BQU8sVUFHTEssTUFBTSxvREFBcUQsQ0FDN0RDLE9BQVEsT0FDUkMsUUFBUyxDQUNMLGVBQWdCLG1DQUVwQkMsS0FBTSxPQUNOZSxLQUFNQyxLQUFLQyxVQUFVSCxJQUU3QixFQTZESVksS0E1QlMsU0FBVWhCLEVBQVNhLEdBQzVCLE1BQU8sQ0FBRWIsVUFBU1MsYUFBYSxFQUFPSSxPQUMxQyxFQTJCSS9CLE1BbElRLEdBbUlSQyxjQWxJQUEsRUFtSUFDLFFBbElBQSxFQW1JQWlDLFVBbElXLEdDSkosU0FBU0MsRUFBYUMsRUFBVUMsR0FDN0MsR0FBSUEsRUFBS3JCLE9BQVNvQixFQUNoQixNQUFNLElBQUlFLFVBQVVGLEVBQVcsYUFBZUEsRUFBVyxFQUFJLElBQU0sSUFBTSx1QkFBeUJDLEVBQUtyQixPQUFTLFdBRXBILENDSkEsU0FBU3VCLEVBQVFDLEdBQW1WLE9BQXRPRCxFQUFyRCxtQkFBWEUsUUFBb0QsaUJBQXBCQSxPQUFPQyxTQUFtQyxTQUFpQkYsR0FBTyxjQUFjQSxDQUFLLEVBQXNCLFNBQWlCQSxHQUFPLE9BQU9BLEdBQXlCLG1CQUFYQyxRQUF5QkQsRUFBSUcsY0FBZ0JGLFFBQVVELElBQVFDLE9BQU9HLFVBQVksZ0JBQWtCSixDQUFLLEVBQVlELEVBQVFDLEVBQU0sQ0FvQzFXLFNBQVNLLEVBQU9DLEdBRTdCLE9BREFYLEVBQWEsRUFBR1ksV0FDVEQsYUFBaUJFLE1BQTJCLFdBQW5CVCxFQUFRTyxJQUFpRSxrQkFBMUNHLE9BQU9MLFVBQVVNLFNBQVNDLEtBQUtMLEVBQ2hHLENDdkNBLFNBQVMsRUFBUU4sR0FBbVYsT0FBdE8sRUFBckQsbUJBQVhDLFFBQW9ELGlCQUFwQkEsT0FBT0MsU0FBbUMsU0FBaUJGLEdBQU8sY0FBY0EsQ0FBSyxFQUFzQixTQUFpQkEsR0FBTyxPQUFPQSxHQUF5QixtQkFBWEMsUUFBeUJELEVBQUlHLGNBQWdCRixRQUFVRCxJQUFRQyxPQUFPRyxVQUFZLGdCQUFrQkosQ0FBSyxFQUFZLEVBQVFBLEVBQU0sQ0FrQzFXLFNBQVNZLEVBQU9DLEdBQzdCbEIsRUFBYSxFQUFHWSxXQUNoQixJQUFJTyxFQUFTTCxPQUFPTCxVQUFVTSxTQUFTQyxLQUFLRSxHQUU1QyxPQUFJQSxhQUFvQkwsTUFBOEIsV0FBdEIsRUFBUUssSUFBcUMsa0JBQVhDLEVBRXpELElBQUlOLEtBQUtLLEVBQVNFLFdBQ0ksaUJBQWJGLEdBQW9DLG9CQUFYQyxFQUNsQyxJQUFJTixLQUFLSyxJQUVTLGlCQUFiQSxHQUFvQyxvQkFBWEMsR0FBb0Qsb0JBQVo1QyxVQUUzRUEsUUFBUThDLEtBQUssc05BRWI5QyxRQUFROEMsTUFBSyxJQUFJQyxPQUFRQyxRQUdwQixJQUFJVixLQUFLVyxLQUVwQixDQ2xCZSxTQUFTQyxFQUFRQyxHQUc5QixHQUZBMUIsRUFBYSxFQUFHWSxZQUVYRixFQUFPZ0IsSUFBbUMsaUJBQWRBLEVBQy9CLE9BQU8sRUFHVCxJQUFJL0IsRUFBT3NCLEVBQU9TLEdBQ2xCLE9BQVFDLE1BQU1DLE9BQU9qQyxHQUN2QixDQzVDZSxTQUFTa0MsRUFBVUMsR0FDaEMsR0FBb0IsT0FBaEJBLElBQXdDLElBQWhCQSxJQUF3QyxJQUFoQkEsRUFDbEQsT0FBT04sSUFHVCxJQUFJTyxFQUFTSCxPQUFPRSxHQUVwQixPQUFJSCxNQUFNSSxHQUNEQSxFQUdGQSxFQUFTLEVBQUlDLEtBQUtDLEtBQUtGLEdBQVVDLEtBQUtFLE1BQU1ILEVBQ3JELENDVWUsU0FBU0ksRUFBZ0JULEVBQVdVLEdBQ2pEcEMsRUFBYSxFQUFHWSxXQUNoQixJQUFJeUIsRUFBWXBCLEVBQU9TLEdBQVdOLFVBQzlCa0IsRUFBU1QsRUFBVU8sR0FDdkIsT0FBTyxJQUFJdkIsS0FBS3dCLEVBQVlDLEVBQzlCLENDTGUsU0FBU0MsRUFBZ0JiLEVBQVdVLEdBQ2pEcEMsRUFBYSxFQUFHWSxXQUNoQixJQUFJMEIsRUFBU1QsRUFBVU8sR0FDdkIsT0FBT0QsRUFBZ0JULEdBQVlZLEVBQ3JDLENDeEJBLElBQUlFLEVBQXNCLE1DQVgsU0FBU0MsRUFBa0JmLEdBQ3hDMUIsRUFBYSxFQUFHWSxXQUNoQixJQUFJOEIsRUFBZSxFQUNmL0MsRUFBT3NCLEVBQU9TLEdBQ2RpQixFQUFNaEQsRUFBS2lELFlBQ1hDLEdBQVFGLEVBQU1ELEVBQWUsRUFBSSxHQUFLQyxFQUFNRCxFQUdoRCxPQUZBL0MsRUFBS21ELFdBQVduRCxFQUFLb0QsYUFBZUYsR0FDcENsRCxFQUFLcUQsWUFBWSxFQUFHLEVBQUcsRUFBRyxHQUNuQnJELENBQ1QsQ0NSZSxTQUFTc0QsRUFBa0J2QixHQUN4QzFCLEVBQWEsRUFBR1ksV0FDaEIsSUFBSWpCLEVBQU9zQixFQUFPUyxHQUNkd0IsRUFBT3ZELEVBQUt3RCxpQkFDWkMsRUFBNEIsSUFBSXZDLEtBQUssR0FDekN1QyxFQUEwQkMsZUFBZUgsRUFBTyxFQUFHLEVBQUcsR0FDdERFLEVBQTBCSixZQUFZLEVBQUcsRUFBRyxFQUFHLEdBQy9DLElBQUlNLEVBQWtCYixFQUFrQlcsR0FDcENHLEVBQTRCLElBQUkxQyxLQUFLLEdBQ3pDMEMsRUFBMEJGLGVBQWVILEVBQU0sRUFBRyxHQUNsREssRUFBMEJQLFlBQVksRUFBRyxFQUFHLEVBQUcsR0FDL0MsSUFBSVEsRUFBa0JmLEVBQWtCYyxHQUV4QyxPQUFJNUQsRUFBS3lCLFdBQWFrQyxFQUFnQmxDLFVBQzdCOEIsRUFBTyxFQUNMdkQsRUFBS3lCLFdBQWFvQyxFQUFnQnBDLFVBQ3BDOEIsRUFFQUEsRUFBTyxDQUVsQixDQ3BCZSxTQUFTTyxFQUFzQi9CLEdBQzVDMUIsRUFBYSxFQUFHWSxXQUNoQixJQUFJc0MsRUFBT0QsRUFBa0J2QixHQUN6QmdDLEVBQWtCLElBQUk3QyxLQUFLLEdBQy9CNkMsRUFBZ0JMLGVBQWVILEVBQU0sRUFBRyxHQUN4Q1EsRUFBZ0JWLFlBQVksRUFBRyxFQUFHLEVBQUcsR0FDckMsSUFBSXJELEVBQU84QyxFQUFrQmlCLEdBQzdCLE9BQU8vRCxDQUNULENDUEEsSUFBSWdFLEVBQXVCLE9DSnZCQyxFQUFpQixDQUFDLEVBQ2YsU0FBU0MsSUFDZCxPQUFPRCxDQUNULENDQ2UsU0FBU0UsRUFBZXBDLEVBQVdxQyxHQUNoRCxJQUFJQyxFQUFNQyxFQUFPQyxFQUFPQyxFQUF1QkMsRUFBaUJDLEVBQXVCQyxFQUF1QkMsRUFFOUd2RSxFQUFhLEVBQUdZLFdBQ2hCLElBQUlnRCxFQUFpQkMsSUFDakJuQixFQUFlYixFQUErMEIsUUFBcDBCbUMsRUFBOGhCLFFBQXRoQkMsRUFBa2QsUUFBemNDLEVBQTZHLFFBQXBHQyxFQUF3QkosYUFBeUMsRUFBU0EsRUFBUXJCLG9CQUFvRCxJQUExQnlCLEVBQW1DQSxFQUF3QkosU0FBeUYsUUFBdENLLEVBQWtCTCxFQUFRUyxjQUF3QyxJQUFwQkosR0FBNEYsUUFBckRDLEVBQXdCRCxFQUFnQkwsZUFBK0MsSUFBMUJNLE9BQTVKLEVBQXdNQSxFQUFzQjNCLG9CQUFvQyxJQUFWd0IsRUFBbUJBLEVBQVFOLEVBQWVsQixvQkFBb0MsSUFBVnVCLEVBQW1CQSxFQUE0RCxRQUFuREssRUFBd0JWLEVBQWVZLGNBQThDLElBQTFCRixHQUF5RyxRQUE1REMsRUFBeUJELEVBQXNCUCxlQUFnRCxJQUEzQlEsT0FBOUUsRUFBMkhBLEVBQXVCN0Isb0JBQW1DLElBQVRzQixFQUFrQkEsRUFBTyxHQUVuNEIsS0FBTXRCLEdBQWdCLEdBQUtBLEdBQWdCLEdBQ3pDLE1BQU0sSUFBSStCLFdBQVcsb0RBR3ZCLElBQUk5RSxFQUFPc0IsRUFBT1MsR0FDZGlCLEVBQU1oRCxFQUFLaUQsWUFDWEMsR0FBUUYsRUFBTUQsRUFBZSxFQUFJLEdBQUtDLEVBQU1ELEVBR2hELE9BRkEvQyxFQUFLbUQsV0FBV25ELEVBQUtvRCxhQUFlRixHQUNwQ2xELEVBQUtxRCxZQUFZLEVBQUcsRUFBRyxFQUFHLEdBQ25CckQsQ0FDVCxDQ2hCZSxTQUFTK0UsRUFBZWhELEVBQVdxQyxHQUNoRCxJQUFJQyxFQUFNQyxFQUFPQyxFQUFPUyxFQUF1QlAsRUFBaUJDLEVBQXVCQyxFQUF1QkMsRUFFOUd2RSxFQUFhLEVBQUdZLFdBQ2hCLElBQUlqQixFQUFPc0IsRUFBT1MsR0FDZHdCLEVBQU92RCxFQUFLd0QsaUJBQ1pTLEVBQWlCQyxJQUNqQmUsRUFBd0IvQyxFQUFtM0IsUUFBeDJCbUMsRUFBeWpCLFFBQWpqQkMsRUFBb2UsUUFBM2RDLEVBQXNILFFBQTdHUyxFQUF3QlosYUFBeUMsRUFBU0EsRUFBUWEsNkJBQTZELElBQTFCRCxFQUFtQ0EsRUFBd0JaLFNBQXlGLFFBQXRDSyxFQUFrQkwsRUFBUVMsY0FBd0MsSUFBcEJKLEdBQTRGLFFBQXJEQyxFQUF3QkQsRUFBZ0JMLGVBQStDLElBQTFCTSxPQUE1SixFQUF3TUEsRUFBc0JPLDZCQUE2QyxJQUFWVixFQUFtQkEsRUFBUU4sRUFBZWdCLDZCQUE2QyxJQUFWWCxFQUFtQkEsRUFBNEQsUUFBbkRLLEVBQXdCVixFQUFlWSxjQUE4QyxJQUExQkYsR0FBeUcsUUFBNURDLEVBQXlCRCxFQUFzQlAsZUFBZ0QsSUFBM0JRLE9BQTlFLEVBQTJIQSxFQUF1QkssNkJBQTRDLElBQVRaLEVBQWtCQSxFQUFPLEdBRWg3QixLQUFNWSxHQUF5QixHQUFLQSxHQUF5QixHQUMzRCxNQUFNLElBQUlILFdBQVcsNkRBR3ZCLElBQUlJLEVBQXNCLElBQUloRSxLQUFLLEdBQ25DZ0UsRUFBb0J4QixlQUFlSCxFQUFPLEVBQUcsRUFBRzBCLEdBQ2hEQyxFQUFvQjdCLFlBQVksRUFBRyxFQUFHLEVBQUcsR0FDekMsSUFBSU0sRUFBa0JRLEVBQWVlLEVBQXFCZCxHQUN0RGUsRUFBc0IsSUFBSWpFLEtBQUssR0FDbkNpRSxFQUFvQnpCLGVBQWVILEVBQU0sRUFBRzBCLEdBQzVDRSxFQUFvQjlCLFlBQVksRUFBRyxFQUFHLEVBQUcsR0FDekMsSUFBSVEsRUFBa0JNLEVBQWVnQixFQUFxQmYsR0FFMUQsT0FBSXBFLEVBQUt5QixXQUFha0MsRUFBZ0JsQyxVQUM3QjhCLEVBQU8sRUFDTHZELEVBQUt5QixXQUFhb0MsRUFBZ0JwQyxVQUNwQzhCLEVBRUFBLEVBQU8sQ0FFbEIsQ0M3QmUsU0FBUzZCLEVBQW1CckQsRUFBV3FDLEdBQ3BELElBQUlDLEVBQU1DLEVBQU9DLEVBQU9TLEVBQXVCUCxFQUFpQkMsRUFBdUJDLEVBQXVCQyxFQUU5R3ZFLEVBQWEsRUFBR1ksV0FDaEIsSUFBSWdELEVBQWlCQyxJQUNqQmUsRUFBd0IvQyxFQUFtM0IsUUFBeDJCbUMsRUFBeWpCLFFBQWpqQkMsRUFBb2UsUUFBM2RDLEVBQXNILFFBQTdHUyxFQUF3QlosYUFBeUMsRUFBU0EsRUFBUWEsNkJBQTZELElBQTFCRCxFQUFtQ0EsRUFBd0JaLFNBQXlGLFFBQXRDSyxFQUFrQkwsRUFBUVMsY0FBd0MsSUFBcEJKLEdBQTRGLFFBQXJEQyxFQUF3QkQsRUFBZ0JMLGVBQStDLElBQTFCTSxPQUE1SixFQUF3TUEsRUFBc0JPLDZCQUE2QyxJQUFWVixFQUFtQkEsRUFBUU4sRUFBZWdCLDZCQUE2QyxJQUFWWCxFQUFtQkEsRUFBNEQsUUFBbkRLLEVBQXdCVixFQUFlWSxjQUE4QyxJQUExQkYsR0FBeUcsUUFBNURDLEVBQXlCRCxFQUFzQlAsZUFBZ0QsSUFBM0JRLE9BQTlFLEVBQTJIQSxFQUF1QkssNkJBQTRDLElBQVRaLEVBQWtCQSxFQUFPLEdBQzU2QmQsRUFBT3dCLEVBQWVoRCxFQUFXcUMsR0FDakNpQixFQUFZLElBQUluRSxLQUFLLEdBQ3pCbUUsRUFBVTNCLGVBQWVILEVBQU0sRUFBRzBCLEdBQ2xDSSxFQUFVaEMsWUFBWSxFQUFHLEVBQUcsRUFBRyxHQUMvQixJQUFJckQsRUFBT21FLEVBQWVrQixFQUFXakIsR0FDckMsT0FBT3BFLENBQ1QsQ0NiQSxJQUFJLEVBQXVCLE9DSlosU0FBU3NGLEVBQWdCbEQsRUFBUW1ELEdBSTlDLElBSEEsSUFBSUMsRUFBT3BELEVBQVMsRUFBSSxJQUFNLEdBQzFCcUQsRUFBU3BELEtBQUtxRCxJQUFJdEQsR0FBUWhCLFdBRXZCcUUsRUFBT3ZHLE9BQVNxRyxHQUNyQkUsRUFBUyxJQUFNQSxFQUdqQixPQUFPRCxFQUFPQyxDQUNoQixDQzBFQSxRQW5FSyxTQUFXekYsRUFBTTJGLEdBU2xCLElBQUlDLEVBQWE1RixFQUFLd0QsaUJBRWxCRCxFQUFPcUMsRUFBYSxFQUFJQSxFQUFhLEVBQUlBLEVBQzdDLE9BQU9OLEVBQTBCLE9BQVZLLEVBQWlCcEMsRUFBTyxJQUFNQSxFQUFNb0MsRUFBTXpHLE9BQ25FLEVBc0RGLEVBcERLLFNBQVdjLEVBQU0yRixHQUNsQixJQUFJRSxFQUFRN0YsRUFBSzhGLGNBQ2pCLE1BQWlCLE1BQVZILEVBQWdCSSxPQUFPRixFQUFRLEdBQUtQLEVBQWdCTyxFQUFRLEVBQUcsRUFDeEUsRUFpREYsRUEvQ0ssU0FBVzdGLEVBQU0yRixHQUNsQixPQUFPTCxFQUFnQnRGLEVBQUtvRCxhQUFjdUMsRUFBTXpHLE9BQ2xELEVBNkNGLEVBdkJLLFNBQVdjLEVBQU0yRixHQUNsQixPQUFPTCxFQUFnQnRGLEVBQUtnRyxjQUFnQixJQUFNLEdBQUlMLEVBQU16RyxPQUM5RCxFQXFCRixFQW5CSyxTQUFXYyxFQUFNMkYsR0FDbEIsT0FBT0wsRUFBZ0J0RixFQUFLZ0csY0FBZUwsRUFBTXpHLE9BQ25ELEVBaUJGLEVBZkssU0FBV2MsRUFBTTJGLEdBQ2xCLE9BQU9MLEVBQWdCdEYsRUFBS2lHLGdCQUFpQk4sRUFBTXpHLE9BQ3JELEVBYUYsRUFYSyxTQUFXYyxFQUFNMkYsR0FDbEIsT0FBT0wsRUFBZ0J0RixFQUFLa0csZ0JBQWlCUCxFQUFNekcsT0FDckQsRUFTRixFQVBLLFNBQVdjLEVBQU0yRixHQUNsQixJQUFJUSxFQUFpQlIsRUFBTXpHLE9BQ3ZCa0gsRUFBZXBHLEVBQUtxRyxxQkFFeEIsT0FBT2YsRUFEaUJqRCxLQUFLRSxNQUFNNkQsRUFBZS9ELEtBQUtpRSxJQUFJLEdBQUlILEVBQWlCLElBQ3RDUixFQUFNekcsT0FDbEQsRUNndkJGLFNBQVNxSCxFQUFvQkMsRUFBUUMsR0FDbkMsSUFBSWpCLEVBQU9nQixFQUFTLEVBQUksSUFBTSxJQUMxQkUsRUFBWXJFLEtBQUtxRCxJQUFJYyxHQUNyQkcsRUFBUXRFLEtBQUtFLE1BQU1tRSxFQUFZLElBQy9CRSxFQUFVRixFQUFZLEdBRTFCLEdBQWdCLElBQVpFLEVBQ0YsT0FBT3BCLEVBQU9PLE9BQU9ZLEdBR3ZCLElBQUlFLEVBQVlKLEdBQWtCLEdBQ2xDLE9BQU9qQixFQUFPTyxPQUFPWSxHQUFTRSxFQUFZdkIsRUFBZ0JzQixFQUFTLEVBQ3JFLENBRUEsU0FBU0UsRUFBa0NOLEVBQVFDLEdBQ2pELE9BQUlELEVBQVMsSUFBTyxHQUNQQSxFQUFTLEVBQUksSUFBTSxLQUNoQmxCLEVBQWdCakQsS0FBS3FELElBQUljLEdBQVUsR0FBSSxHQUdoRE8sRUFBZVAsRUFBUUMsRUFDaEMsQ0FFQSxTQUFTTSxFQUFlUCxFQUFRQyxHQUM5QixJQUFJSSxFQUFZSixHQUFrQixHQUM5QmpCLEVBQU9nQixFQUFTLEVBQUksSUFBTSxJQUMxQkUsRUFBWXJFLEtBQUtxRCxJQUFJYyxHQUd6QixPQUFPaEIsRUFGS0YsRUFBZ0JqRCxLQUFLRSxNQUFNbUUsRUFBWSxJQUFLLEdBRWxDRyxFQURSdkIsRUFBZ0JvQixFQUFZLEdBQUksRUFFaEQsQ0FFQSxRQWx5QmlCLENBRWZNLEVBQUcsU0FBV2hILEVBQU0yRixFQUFPc0IsR0FDekIsSUFBSUMsRUFBTWxILEVBQUt3RCxpQkFBbUIsRUFBSSxFQUFJLEVBRTFDLE9BQVFtQyxHQUVOLElBQUssSUFDTCxJQUFLLEtBQ0wsSUFBSyxNQUNILE9BQU9zQixFQUFTQyxJQUFJQSxFQUFLLENBQ3ZCQyxNQUFPLGdCQUlYLElBQUssUUFDSCxPQUFPRixFQUFTQyxJQUFJQSxFQUFLLENBQ3ZCQyxNQUFPLFdBS1gsUUFDRSxPQUFPRixFQUFTQyxJQUFJQSxFQUFLLENBQ3ZCQyxNQUFPLFNBR2YsRUFFQUMsRUFBRyxTQUFXcEgsRUFBTTJGLEVBQU9zQixHQUV6QixHQUFjLE9BQVZ0QixFQUFnQixDQUNsQixJQUFJQyxFQUFhNUYsRUFBS3dELGlCQUVsQkQsRUFBT3FDLEVBQWEsRUFBSUEsRUFBYSxFQUFJQSxFQUM3QyxPQUFPcUIsRUFBU0ksY0FBYzlELEVBQU0sQ0FDbEMrRCxLQUFNLFFBRVYsQ0FFQSxPQUFPQyxFQUFrQnZILEVBQU0yRixFQUNqQyxFQUVBNkIsRUFBRyxTQUFXeEgsRUFBTTJGLEVBQU9zQixFQUFVN0MsR0FDbkMsSUFBSXFELEVBQWlCMUMsRUFBZS9FLEVBQU1vRSxHQUV0Q3NELEVBQVdELEVBQWlCLEVBQUlBLEVBQWlCLEVBQUlBLEVBRXpELE1BQWMsT0FBVjlCLEVBRUtMLEVBRFlvQyxFQUFXLElBQ08sR0FJekIsT0FBVi9CLEVBQ0tzQixFQUFTSSxjQUFjSyxFQUFVLENBQ3RDSixLQUFNLFNBS0hoQyxFQUFnQm9DLEVBQVUvQixFQUFNekcsT0FDekMsRUFFQXlJLEVBQUcsU0FBVzNILEVBQU0yRixHQUdsQixPQUFPTCxFQUZXaEMsRUFBa0J0RCxHQUVBMkYsRUFBTXpHLE9BQzVDLEVBVUEwSSxFQUFHLFNBQVc1SCxFQUFNMkYsR0FFbEIsT0FBT0wsRUFESXRGLEVBQUt3RCxpQkFDYW1DLEVBQU16RyxPQUNyQyxFQUVBMkksRUFBRyxTQUFXN0gsRUFBTTJGLEVBQU9zQixHQUN6QixJQUFJYSxFQUFVekYsS0FBS0MsTUFBTXRDLEVBQUs4RixjQUFnQixHQUFLLEdBRW5ELE9BQVFILEdBRU4sSUFBSyxJQUNILE9BQU9JLE9BQU8rQixHQUdoQixJQUFLLEtBQ0gsT0FBT3hDLEVBQWdCd0MsRUFBUyxHQUdsQyxJQUFLLEtBQ0gsT0FBT2IsRUFBU0ksY0FBY1MsRUFBUyxDQUNyQ1IsS0FBTSxZQUlWLElBQUssTUFDSCxPQUFPTCxFQUFTYSxRQUFRQSxFQUFTLENBQy9CWCxNQUFPLGNBQ1BZLFFBQVMsZUFJYixJQUFLLFFBQ0gsT0FBT2QsRUFBU2EsUUFBUUEsRUFBUyxDQUMvQlgsTUFBTyxTQUNQWSxRQUFTLGVBS2IsUUFDRSxPQUFPZCxFQUFTYSxRQUFRQSxFQUFTLENBQy9CWCxNQUFPLE9BQ1BZLFFBQVMsZUFHakIsRUFFQUMsRUFBRyxTQUFXaEksRUFBTTJGLEVBQU9zQixHQUN6QixJQUFJYSxFQUFVekYsS0FBS0MsTUFBTXRDLEVBQUs4RixjQUFnQixHQUFLLEdBRW5ELE9BQVFILEdBRU4sSUFBSyxJQUNILE9BQU9JLE9BQU8rQixHQUdoQixJQUFLLEtBQ0gsT0FBT3hDLEVBQWdCd0MsRUFBUyxHQUdsQyxJQUFLLEtBQ0gsT0FBT2IsRUFBU0ksY0FBY1MsRUFBUyxDQUNyQ1IsS0FBTSxZQUlWLElBQUssTUFDSCxPQUFPTCxFQUFTYSxRQUFRQSxFQUFTLENBQy9CWCxNQUFPLGNBQ1BZLFFBQVMsZUFJYixJQUFLLFFBQ0gsT0FBT2QsRUFBU2EsUUFBUUEsRUFBUyxDQUMvQlgsTUFBTyxTQUNQWSxRQUFTLGVBS2IsUUFDRSxPQUFPZCxFQUFTYSxRQUFRQSxFQUFTLENBQy9CWCxNQUFPLE9BQ1BZLFFBQVMsZUFHakIsRUFFQUUsRUFBRyxTQUFXakksRUFBTTJGLEVBQU9zQixHQUN6QixJQUFJcEIsRUFBUTdGLEVBQUs4RixjQUVqQixPQUFRSCxHQUNOLElBQUssSUFDTCxJQUFLLEtBQ0gsT0FBTzRCLEVBQWtCdkgsRUFBTTJGLEdBR2pDLElBQUssS0FDSCxPQUFPc0IsRUFBU0ksY0FBY3hCLEVBQVEsRUFBRyxDQUN2Q3lCLEtBQU0sVUFJVixJQUFLLE1BQ0gsT0FBT0wsRUFBU3BCLE1BQU1BLEVBQU8sQ0FDM0JzQixNQUFPLGNBQ1BZLFFBQVMsZUFJYixJQUFLLFFBQ0gsT0FBT2QsRUFBU3BCLE1BQU1BLEVBQU8sQ0FDM0JzQixNQUFPLFNBQ1BZLFFBQVMsZUFLYixRQUNFLE9BQU9kLEVBQVNwQixNQUFNQSxFQUFPLENBQzNCc0IsTUFBTyxPQUNQWSxRQUFTLGVBR2pCLEVBRUFHLEVBQUcsU0FBV2xJLEVBQU0yRixFQUFPc0IsR0FDekIsSUFBSXBCLEVBQVE3RixFQUFLOEYsY0FFakIsT0FBUUgsR0FFTixJQUFLLElBQ0gsT0FBT0ksT0FBT0YsRUFBUSxHQUd4QixJQUFLLEtBQ0gsT0FBT1AsRUFBZ0JPLEVBQVEsRUFBRyxHQUdwQyxJQUFLLEtBQ0gsT0FBT29CLEVBQVNJLGNBQWN4QixFQUFRLEVBQUcsQ0FDdkN5QixLQUFNLFVBSVYsSUFBSyxNQUNILE9BQU9MLEVBQVNwQixNQUFNQSxFQUFPLENBQzNCc0IsTUFBTyxjQUNQWSxRQUFTLGVBSWIsSUFBSyxRQUNILE9BQU9kLEVBQVNwQixNQUFNQSxFQUFPLENBQzNCc0IsTUFBTyxTQUNQWSxRQUFTLGVBS2IsUUFDRSxPQUFPZCxFQUFTcEIsTUFBTUEsRUFBTyxDQUMzQnNCLE1BQU8sT0FDUFksUUFBUyxlQUdqQixFQUVBSSxFQUFHLFNBQVduSSxFQUFNMkYsRUFBT3NCLEVBQVU3QyxHQUNuQyxJQUFJZ0UsRUhsVE8sU0FBb0JyRyxFQUFXcUMsR0FDNUMvRCxFQUFhLEVBQUdZLFdBQ2hCLElBQUlqQixFQUFPc0IsRUFBT1MsR0FDZG1CLEVBQU9pQixFQUFlbkUsRUFBTW9FLEdBQVMzQyxVQUFZMkQsRUFBbUJwRixFQUFNb0UsR0FBUzNDLFVBSXZGLE9BQU9ZLEtBQUtnRyxNQUFNbkYsRUFBTyxHQUF3QixDQUNuRCxDRzBTZW9GLENBQVd0SSxFQUFNb0UsR0FFNUIsTUFBYyxPQUFWdUIsRUFDS3NCLEVBQVNJLGNBQWNlLEVBQU0sQ0FDbENkLEtBQU0sU0FJSGhDLEVBQWdCOEMsRUFBTXpDLEVBQU16RyxPQUNyQyxFQUVBcUosRUFBRyxTQUFXdkksRUFBTTJGLEVBQU9zQixHQUN6QixJQUFJdUIsRVI5VE8sU0FBdUJ6RyxHQUNwQzFCLEVBQWEsRUFBR1ksV0FDaEIsSUFBSWpCLEVBQU9zQixFQUFPUyxHQUNkbUIsRUFBT0osRUFBa0I5QyxHQUFNeUIsVUFBWXFDLEVBQXNCOUQsR0FBTXlCLFVBSTNFLE9BQU9ZLEtBQUtnRyxNQUFNbkYsRUFBT2MsR0FBd0IsQ0FDbkQsQ1FzVGtCeUUsQ0FBY3pJLEdBRTVCLE1BQWMsT0FBVjJGLEVBQ0tzQixFQUFTSSxjQUFjbUIsRUFBUyxDQUNyQ2xCLEtBQU0sU0FJSGhDLEVBQWdCa0QsRUFBUzdDLEVBQU16RyxPQUN4QyxFQUVBd0osRUFBRyxTQUFXMUksRUFBTTJGLEVBQU9zQixHQUN6QixNQUFjLE9BQVZ0QixFQUNLc0IsRUFBU0ksY0FBY3JILEVBQUtvRCxhQUFjLENBQy9Da0UsS0FBTSxTQUlIQyxFQUFrQnZILEVBQU0yRixFQUNqQyxFQUVBZ0QsRUFBRyxTQUFXM0ksRUFBTTJGLEVBQU9zQixHQUN6QixJQUFJMkIsRVp0Vk8sU0FBeUI3RyxHQUN0QzFCLEVBQWEsRUFBR1ksV0FDaEIsSUFBSWpCLEVBQU9zQixFQUFPUyxHQUNkVyxFQUFZMUMsRUFBS3lCLFVBQ3JCekIsRUFBSzZJLFlBQVksRUFBRyxHQUNwQjdJLEVBQUtxRCxZQUFZLEVBQUcsRUFBRyxFQUFHLEdBQzFCLElBQUl5RixFQUF1QjlJLEVBQUt5QixVQUM1QnNILEVBQWFyRyxFQUFZb0csRUFDN0IsT0FBT3pHLEtBQUtFLE1BQU13RyxFQUFhbEcsR0FBdUIsQ0FDeEQsQ1k2VW9CbUcsQ0FBZ0JoSixHQUVoQyxNQUFjLE9BQVYyRixFQUNLc0IsRUFBU0ksY0FBY3VCLEVBQVcsQ0FDdkN0QixLQUFNLGNBSUhoQyxFQUFnQnNELEVBQVdqRCxFQUFNekcsT0FDMUMsRUFFQStKLEVBQUcsU0FBV2pKLEVBQU0yRixFQUFPc0IsR0FDekIsSUFBSWlDLEVBQVlsSixFQUFLaUQsWUFFckIsT0FBUTBDLEdBRU4sSUFBSyxJQUNMLElBQUssS0FDTCxJQUFLLE1BQ0gsT0FBT3NCLEVBQVNqRSxJQUFJa0csRUFBVyxDQUM3Qi9CLE1BQU8sY0FDUFksUUFBUyxlQUliLElBQUssUUFDSCxPQUFPZCxFQUFTakUsSUFBSWtHLEVBQVcsQ0FDN0IvQixNQUFPLFNBQ1BZLFFBQVMsZUFJYixJQUFLLFNBQ0gsT0FBT2QsRUFBU2pFLElBQUlrRyxFQUFXLENBQzdCL0IsTUFBTyxRQUNQWSxRQUFTLGVBS2IsUUFDRSxPQUFPZCxFQUFTakUsSUFBSWtHLEVBQVcsQ0FDN0IvQixNQUFPLE9BQ1BZLFFBQVMsZUFHakIsRUFFQW9CLEVBQUcsU0FBV25KLEVBQU0yRixFQUFPc0IsRUFBVTdDLEdBQ25DLElBQUk4RSxFQUFZbEosRUFBS2lELFlBQ2pCbUcsR0FBa0JGLEVBQVk5RSxFQUFRckIsYUFBZSxHQUFLLEdBQUssRUFFbkUsT0FBUTRDLEdBRU4sSUFBSyxJQUNILE9BQU9JLE9BQU9xRCxHQUdoQixJQUFLLEtBQ0gsT0FBTzlELEVBQWdCOEQsRUFBZ0IsR0FHekMsSUFBSyxLQUNILE9BQU9uQyxFQUFTSSxjQUFjK0IsRUFBZ0IsQ0FDNUM5QixLQUFNLFFBR1YsSUFBSyxNQUNILE9BQU9MLEVBQVNqRSxJQUFJa0csRUFBVyxDQUM3Qi9CLE1BQU8sY0FDUFksUUFBUyxlQUliLElBQUssUUFDSCxPQUFPZCxFQUFTakUsSUFBSWtHLEVBQVcsQ0FDN0IvQixNQUFPLFNBQ1BZLFFBQVMsZUFJYixJQUFLLFNBQ0gsT0FBT2QsRUFBU2pFLElBQUlrRyxFQUFXLENBQzdCL0IsTUFBTyxRQUNQWSxRQUFTLGVBS2IsUUFDRSxPQUFPZCxFQUFTakUsSUFBSWtHLEVBQVcsQ0FDN0IvQixNQUFPLE9BQ1BZLFFBQVMsZUFHakIsRUFFQXNCLEVBQUcsU0FBV3JKLEVBQU0yRixFQUFPc0IsRUFBVTdDLEdBQ25DLElBQUk4RSxFQUFZbEosRUFBS2lELFlBQ2pCbUcsR0FBa0JGLEVBQVk5RSxFQUFRckIsYUFBZSxHQUFLLEdBQUssRUFFbkUsT0FBUTRDLEdBRU4sSUFBSyxJQUNILE9BQU9JLE9BQU9xRCxHQUdoQixJQUFLLEtBQ0gsT0FBTzlELEVBQWdCOEQsRUFBZ0J6RCxFQUFNekcsUUFHL0MsSUFBSyxLQUNILE9BQU8rSCxFQUFTSSxjQUFjK0IsRUFBZ0IsQ0FDNUM5QixLQUFNLFFBR1YsSUFBSyxNQUNILE9BQU9MLEVBQVNqRSxJQUFJa0csRUFBVyxDQUM3Qi9CLE1BQU8sY0FDUFksUUFBUyxlQUliLElBQUssUUFDSCxPQUFPZCxFQUFTakUsSUFBSWtHLEVBQVcsQ0FDN0IvQixNQUFPLFNBQ1BZLFFBQVMsZUFJYixJQUFLLFNBQ0gsT0FBT2QsRUFBU2pFLElBQUlrRyxFQUFXLENBQzdCL0IsTUFBTyxRQUNQWSxRQUFTLGVBS2IsUUFDRSxPQUFPZCxFQUFTakUsSUFBSWtHLEVBQVcsQ0FDN0IvQixNQUFPLE9BQ1BZLFFBQVMsZUFHakIsRUFFQTlJLEVBQUcsU0FBV2UsRUFBTTJGLEVBQU9zQixHQUN6QixJQUFJaUMsRUFBWWxKLEVBQUtpRCxZQUNqQnFHLEVBQTZCLElBQWRKLEVBQWtCLEVBQUlBLEVBRXpDLE9BQVF2RCxHQUVOLElBQUssSUFDSCxPQUFPSSxPQUFPdUQsR0FHaEIsSUFBSyxLQUNILE9BQU9oRSxFQUFnQmdFLEVBQWMzRCxFQUFNekcsUUFHN0MsSUFBSyxLQUNILE9BQU8rSCxFQUFTSSxjQUFjaUMsRUFBYyxDQUMxQ2hDLEtBQU0sUUFJVixJQUFLLE1BQ0gsT0FBT0wsRUFBU2pFLElBQUlrRyxFQUFXLENBQzdCL0IsTUFBTyxjQUNQWSxRQUFTLGVBSWIsSUFBSyxRQUNILE9BQU9kLEVBQVNqRSxJQUFJa0csRUFBVyxDQUM3Qi9CLE1BQU8sU0FDUFksUUFBUyxlQUliLElBQUssU0FDSCxPQUFPZCxFQUFTakUsSUFBSWtHLEVBQVcsQ0FDN0IvQixNQUFPLFFBQ1BZLFFBQVMsZUFLYixRQUNFLE9BQU9kLEVBQVNqRSxJQUFJa0csRUFBVyxDQUM3Qi9CLE1BQU8sT0FDUFksUUFBUyxlQUdqQixFQUVBd0IsRUFBRyxTQUFXdkosRUFBTTJGLEVBQU9zQixHQUN6QixJQUNJdUMsRUFEUXhKLEVBQUtnRyxjQUNnQixJQUFNLEVBQUksS0FBTyxLQUVsRCxPQUFRTCxHQUNOLElBQUssSUFDTCxJQUFLLEtBQ0gsT0FBT3NCLEVBQVN3QyxVQUFVRCxFQUFvQixDQUM1Q3JDLE1BQU8sY0FDUFksUUFBUyxlQUdiLElBQUssTUFDSCxPQUFPZCxFQUFTd0MsVUFBVUQsRUFBb0IsQ0FDNUNyQyxNQUFPLGNBQ1BZLFFBQVMsZUFDUjJCLGNBRUwsSUFBSyxRQUNILE9BQU96QyxFQUFTd0MsVUFBVUQsRUFBb0IsQ0FDNUNyQyxNQUFPLFNBQ1BZLFFBQVMsZUFJYixRQUNFLE9BQU9kLEVBQVN3QyxVQUFVRCxFQUFvQixDQUM1Q3JDLE1BQU8sT0FDUFksUUFBUyxlQUdqQixFQUVBNEIsRUFBRyxTQUFXM0osRUFBTTJGLEVBQU9zQixHQUN6QixJQUNJdUMsRUFEQTdDLEVBQVEzRyxFQUFLZ0csY0FXakIsT0FQRXdELEVBRFksS0FBVjdDLEVBdmpCQSxPQXlqQmlCLElBQVZBLEVBMWpCSCxXQTZqQmVBLEVBQVEsSUFBTSxFQUFJLEtBQU8sS0FHeENoQixHQUNOLElBQUssSUFDTCxJQUFLLEtBQ0gsT0FBT3NCLEVBQVN3QyxVQUFVRCxFQUFvQixDQUM1Q3JDLE1BQU8sY0FDUFksUUFBUyxlQUdiLElBQUssTUFDSCxPQUFPZCxFQUFTd0MsVUFBVUQsRUFBb0IsQ0FDNUNyQyxNQUFPLGNBQ1BZLFFBQVMsZUFDUjJCLGNBRUwsSUFBSyxRQUNILE9BQU96QyxFQUFTd0MsVUFBVUQsRUFBb0IsQ0FDNUNyQyxNQUFPLFNBQ1BZLFFBQVMsZUFJYixRQUNFLE9BQU9kLEVBQVN3QyxVQUFVRCxFQUFvQixDQUM1Q3JDLE1BQU8sT0FDUFksUUFBUyxlQUdqQixFQUVBNkIsRUFBRyxTQUFXNUosRUFBTTJGLEVBQU9zQixHQUN6QixJQUNJdUMsRUFEQTdDLEVBQVEzRyxFQUFLZ0csY0FhakIsT0FURXdELEVBREU3QyxHQUFTLEdBN2xCTixVQStsQklBLEdBQVMsR0FobUJYLFlBa21CRUEsR0FBUyxFQW5tQmIsVUFHRixRQXNtQkdoQixHQUNOLElBQUssSUFDTCxJQUFLLEtBQ0wsSUFBSyxNQUNILE9BQU9zQixFQUFTd0MsVUFBVUQsRUFBb0IsQ0FDNUNyQyxNQUFPLGNBQ1BZLFFBQVMsZUFHYixJQUFLLFFBQ0gsT0FBT2QsRUFBU3dDLFVBQVVELEVBQW9CLENBQzVDckMsTUFBTyxTQUNQWSxRQUFTLGVBSWIsUUFDRSxPQUFPZCxFQUFTd0MsVUFBVUQsRUFBb0IsQ0FDNUNyQyxNQUFPLE9BQ1BZLFFBQVMsZUFHakIsRUFFQThCLEVBQUcsU0FBVzdKLEVBQU0yRixFQUFPc0IsR0FDekIsR0FBYyxPQUFWdEIsRUFBZ0IsQ0FDbEIsSUFBSWdCLEVBQVEzRyxFQUFLZ0csY0FBZ0IsR0FFakMsT0FEYyxJQUFWVyxJQUFhQSxFQUFRLElBQ2xCTSxFQUFTSSxjQUFjVixFQUFPLENBQ25DVyxLQUFNLFFBRVYsQ0FFQSxPQUFPQyxFQUFrQnZILEVBQU0yRixFQUNqQyxFQUVBbUUsRUFBRyxTQUFXOUosRUFBTTJGLEVBQU9zQixHQUN6QixNQUFjLE9BQVZ0QixFQUNLc0IsRUFBU0ksY0FBY3JILEVBQUtnRyxjQUFlLENBQ2hEc0IsS0FBTSxTQUlIQyxFQUFrQnZILEVBQU0yRixFQUNqQyxFQUVBb0UsRUFBRyxTQUFXL0osRUFBTTJGLEVBQU9zQixHQUN6QixJQUFJTixFQUFRM0csRUFBS2dHLGNBQWdCLEdBRWpDLE1BQWMsT0FBVkwsRUFDS3NCLEVBQVNJLGNBQWNWLEVBQU8sQ0FDbkNXLEtBQU0sU0FJSGhDLEVBQWdCcUIsRUFBT2hCLEVBQU16RyxPQUN0QyxFQUVBOEssRUFBRyxTQUFXaEssRUFBTTJGLEVBQU9zQixHQUN6QixJQUFJTixFQUFRM0csRUFBS2dHLGNBR2pCLE9BRmMsSUFBVlcsSUFBYUEsRUFBUSxJQUVYLE9BQVZoQixFQUNLc0IsRUFBU0ksY0FBY1YsRUFBTyxDQUNuQ1csS0FBTSxTQUlIaEMsRUFBZ0JxQixFQUFPaEIsRUFBTXpHLE9BQ3RDLEVBRUErSyxFQUFHLFNBQVdqSyxFQUFNMkYsRUFBT3NCLEdBQ3pCLE1BQWMsT0FBVnRCLEVBQ0tzQixFQUFTSSxjQUFjckgsRUFBS2lHLGdCQUFpQixDQUNsRHFCLEtBQU0sV0FJSEMsRUFBa0J2SCxFQUFNMkYsRUFDakMsRUFFQXVFLEVBQUcsU0FBV2xLLEVBQU0yRixFQUFPc0IsR0FDekIsTUFBYyxPQUFWdEIsRUFDS3NCLEVBQVNJLGNBQWNySCxFQUFLa0csZ0JBQWlCLENBQ2xEb0IsS0FBTSxXQUlIQyxFQUFrQnZILEVBQU0yRixFQUNqQyxFQUVBd0UsRUFBRyxTQUFXbkssRUFBTTJGLEdBQ2xCLE9BQU80QixFQUFrQnZILEVBQU0yRixFQUNqQyxFQUVBeUUsRUFBRyxTQUFXcEssRUFBTTJGLEVBQU8wRSxFQUFXakcsR0FDcEMsSUFDSWtHLEdBRGVsRyxFQUFRbUcsZUFBaUJ2SyxHQUNWd0ssb0JBRWxDLEdBQXVCLElBQW5CRixFQUNGLE1BQU8sSUFHVCxPQUFRM0UsR0FFTixJQUFLLElBQ0gsT0FBT21CLEVBQWtDd0QsR0FLM0MsSUFBSyxPQUNMLElBQUssS0FFSCxPQUFPdkQsRUFBZXVELEdBUXhCLFFBQ0UsT0FBT3ZELEVBQWV1RCxFQUFnQixLQUU1QyxFQUVBRyxFQUFHLFNBQVd6SyxFQUFNMkYsRUFBTzBFLEVBQVdqRyxHQUNwQyxJQUNJa0csR0FEZWxHLEVBQVFtRyxlQUFpQnZLLEdBQ1Z3SyxvQkFFbEMsT0FBUTdFLEdBRU4sSUFBSyxJQUNILE9BQU9tQixFQUFrQ3dELEdBSzNDLElBQUssT0FDTCxJQUFLLEtBRUgsT0FBT3ZELEVBQWV1RCxHQVF4QixRQUNFLE9BQU92RCxFQUFldUQsRUFBZ0IsS0FFNUMsRUFFQUksRUFBRyxTQUFXMUssRUFBTTJGLEVBQU8wRSxFQUFXakcsR0FDcEMsSUFDSWtHLEdBRGVsRyxFQUFRbUcsZUFBaUJ2SyxHQUNWd0ssb0JBRWxDLE9BQVE3RSxHQUVOLElBQUssSUFDTCxJQUFLLEtBQ0wsSUFBSyxNQUNILE1BQU8sTUFBUVksRUFBb0IrRCxFQUFnQixLQUlyRCxRQUNFLE1BQU8sTUFBUXZELEVBQWV1RCxFQUFnQixLQUVwRCxFQUVBSyxFQUFHLFNBQVczSyxFQUFNMkYsRUFBTzBFLEVBQVdqRyxHQUNwQyxJQUNJa0csR0FEZWxHLEVBQVFtRyxlQUFpQnZLLEdBQ1Z3SyxvQkFFbEMsT0FBUTdFLEdBRU4sSUFBSyxJQUNMLElBQUssS0FDTCxJQUFLLE1BQ0gsTUFBTyxNQUFRWSxFQUFvQitELEVBQWdCLEtBSXJELFFBQ0UsTUFBTyxNQUFRdkQsRUFBZXVELEVBQWdCLEtBRXBELEVBRUFNLEVBQUcsU0FBVzVLLEVBQU0yRixFQUFPMEUsRUFBV2pHLEdBQ3BDLElBQUl5RyxFQUFlekcsRUFBUW1HLGVBQWlCdkssRUFFNUMsT0FBT3NGLEVBRFNqRCxLQUFLRSxNQUFNc0ksRUFBYXBKLFVBQVksS0FDbEJrRSxFQUFNekcsT0FDMUMsRUFFQTRMLEVBQUcsU0FBVzlLLEVBQU0yRixFQUFPMEUsRUFBV2pHLEdBR3BDLE9BQU9rQixHQUZZbEIsRUFBUW1HLGVBQWlCdkssR0FDZnlCLFVBQ0trRSxFQUFNekcsT0FDMUMsR0M5ekJGLElBQUk2TCxFQUFvQixTQUEyQkMsRUFBU0MsR0FDMUQsT0FBUUQsR0FDTixJQUFLLElBQ0gsT0FBT0MsRUFBV2pMLEtBQUssQ0FDckJtSCxNQUFPLFVBR1gsSUFBSyxLQUNILE9BQU84RCxFQUFXakwsS0FBSyxDQUNyQm1ILE1BQU8sV0FHWCxJQUFLLE1BQ0gsT0FBTzhELEVBQVdqTCxLQUFLLENBQ3JCbUgsTUFBTyxTQUlYLFFBQ0UsT0FBTzhELEVBQVdqTCxLQUFLLENBQ3JCbUgsTUFBTyxTQUdmLEVBRUkrRCxFQUFvQixTQUEyQkYsRUFBU0MsR0FDMUQsT0FBUUQsR0FDTixJQUFLLElBQ0gsT0FBT0MsRUFBV0UsS0FBSyxDQUNyQmhFLE1BQU8sVUFHWCxJQUFLLEtBQ0gsT0FBTzhELEVBQVdFLEtBQUssQ0FDckJoRSxNQUFPLFdBR1gsSUFBSyxNQUNILE9BQU84RCxFQUFXRSxLQUFLLENBQ3JCaEUsTUFBTyxTQUlYLFFBQ0UsT0FBTzhELEVBQVdFLEtBQUssQ0FDckJoRSxNQUFPLFNBR2YsRUEyQ0lpRSxFQUFpQixDQUNuQkMsRUFBR0gsRUFDSEksRUEzQzBCLFNBQStCTixFQUFTQyxHQUNsRSxJQVFJTSxFQVJBQyxFQUFjUixFQUFRUyxNQUFNLGNBQWdCLEdBQzVDQyxFQUFjRixFQUFZLEdBQzFCRyxFQUFjSCxFQUFZLEdBRTlCLElBQUtHLEVBQ0gsT0FBT1osRUFBa0JDLEVBQVNDLEdBS3BDLE9BQVFTLEdBQ04sSUFBSyxJQUNISCxFQUFpQk4sRUFBV1csU0FBUyxDQUNuQ3pFLE1BQU8sVUFFVCxNQUVGLElBQUssS0FDSG9FLEVBQWlCTixFQUFXVyxTQUFTLENBQ25DekUsTUFBTyxXQUVULE1BRUYsSUFBSyxNQUNIb0UsRUFBaUJOLEVBQVdXLFNBQVMsQ0FDbkN6RSxNQUFPLFNBRVQsTUFHRixRQUNFb0UsRUFBaUJOLEVBQVdXLFNBQVMsQ0FDbkN6RSxNQUFPLFNBS2IsT0FBT29FLEVBQWVNLFFBQVEsV0FBWWQsRUFBa0JXLEVBQWFULElBQWFZLFFBQVEsV0FBWVgsRUFBa0JTLEVBQWFWLEdBQzNJLEdBTUEsVUNwRmUsU0FBU2EsRUFBZ0M5TCxHQUN0RCxJQUFJK0wsRUFBVSxJQUFJN0ssS0FBS0EsS0FBSzhLLElBQUloTSxFQUFLaU0sY0FBZWpNLEVBQUtrTSxXQUFZbE0sRUFBS21NLFVBQVduTSxFQUFLb00sV0FBWXBNLEVBQUtxTSxhQUFjck0sRUFBS3NNLGFBQWN0TSxFQUFLdU0sb0JBRWpKLE9BREFSLEVBQVFySSxlQUFlMUQsRUFBS2lNLGVBQ3JCak0sRUFBS3lCLFVBQVlzSyxFQUFRdEssU0FDbEMsQ0NmQSxJQUFJK0ssRUFBMkIsQ0FBQyxJQUFLLE1BQ2pDQyxFQUEwQixDQUFDLEtBQU0sUUFDOUIsU0FBU0MsRUFBMEIvRyxHQUN4QyxPQUFvRCxJQUE3QzZHLEVBQXlCRyxRQUFRaEgsRUFDMUMsQ0FDTyxTQUFTaUgsRUFBeUJqSCxHQUN2QyxPQUFtRCxJQUE1QzhHLEVBQXdCRSxRQUFRaEgsRUFDekMsQ0FDTyxTQUFTa0gsRUFBb0JsSCxFQUFPbUgsRUFBUUMsR0FDakQsR0FBYyxTQUFWcEgsRUFDRixNQUFNLElBQUliLFdBQVcscUNBQXFDa0ksT0FBT0YsRUFBUSwwQ0FBMENFLE9BQU9ELEVBQU8sbUZBQzVILEdBQWMsT0FBVnBILEVBQ1QsTUFBTSxJQUFJYixXQUFXLGlDQUFpQ2tJLE9BQU9GLEVBQVEsMENBQTBDRSxPQUFPRCxFQUFPLG1GQUN4SCxHQUFjLE1BQVZwSCxFQUNULE1BQU0sSUFBSWIsV0FBVywrQkFBK0JrSSxPQUFPRixFQUFRLHNEQUFzREUsT0FBT0QsRUFBTyxtRkFDbEksR0FBYyxPQUFWcEgsRUFDVCxNQUFNLElBQUliLFdBQVcsaUNBQWlDa0ksT0FBT0YsRUFBUSxzREFBc0RFLE9BQU9ELEVBQU8sa0ZBRTdJLENDbEJBLElBQUlFLEVBQXVCLENBQ3pCQyxpQkFBa0IsQ0FDaEJDLElBQUsscUJBQ0xDLE1BQU8sK0JBRVRDLFNBQVUsQ0FDUkYsSUFBSyxXQUNMQyxNQUFPLHFCQUVURSxZQUFhLGdCQUNiQyxpQkFBa0IsQ0FDaEJKLElBQUsscUJBQ0xDLE1BQU8sK0JBRVRJLFNBQVUsQ0FDUkwsSUFBSyxXQUNMQyxNQUFPLHFCQUVUSyxZQUFhLENBQ1hOLElBQUssZUFDTEMsTUFBTyx5QkFFVE0sT0FBUSxDQUNOUCxJQUFLLFNBQ0xDLE1BQU8sbUJBRVRPLE1BQU8sQ0FDTFIsSUFBSyxRQUNMQyxNQUFPLGtCQUVUUSxZQUFhLENBQ1hULElBQUssZUFDTEMsTUFBTyx5QkFFVFMsT0FBUSxDQUNOVixJQUFLLFNBQ0xDLE1BQU8sbUJBRVRVLGFBQWMsQ0FDWlgsSUFBSyxnQkFDTEMsTUFBTywwQkFFVFcsUUFBUyxDQUNQWixJQUFLLFVBQ0xDLE1BQU8sb0JBRVRZLFlBQWEsQ0FDWGIsSUFBSyxlQUNMQyxNQUFPLHlCQUVUYSxPQUFRLENBQ05kLElBQUssU0FDTEMsTUFBTyxtQkFFVGMsV0FBWSxDQUNWZixJQUFLLGNBQ0xDLE1BQU8sd0JBRVRlLGFBQWMsQ0FDWmhCLElBQUssZ0JBQ0xDLE1BQU8sMkJDNURJLFNBQVNnQixFQUFrQjdOLEdBQ3hDLE9BQU8sV0FDTCxJQUFJNkQsRUFBVW5ELFVBQVUvQixPQUFTLFFBQXNCbVAsSUFBakJwTixVQUFVLEdBQW1CQSxVQUFVLEdBQUssQ0FBQyxFQUUvRWtHLEVBQVEvQyxFQUFRK0MsTUFBUXBCLE9BQU8zQixFQUFRK0MsT0FBUzVHLEVBQUsrTixhQUNyRHhCLEVBQVN2TSxFQUFLZ08sUUFBUXBILElBQVU1RyxFQUFLZ08sUUFBUWhPLEVBQUsrTixjQUN0RCxPQUFPeEIsQ0FDVCxDQUNGLENDUEEsSUNENEN2TSxFRG1CeEMwSyxFQUFhLENBQ2ZqTCxLQUFNb08sRUFBa0IsQ0FDdEJHLFFBcEJjLENBQ2hCQyxLQUFNLG1CQUNOQyxLQUFNLGFBQ05DLE9BQVEsV0FDUkMsTUFBTyxjQWlCTEwsYUFBYyxTQUVoQm5ELEtBQU1pRCxFQUFrQixDQUN0QkcsUUFsQmMsQ0FDaEJDLEtBQU0saUJBQ05DLEtBQU0sY0FDTkMsT0FBUSxZQUNSQyxNQUFPLFVBZUxMLGFBQWMsU0FFaEIxQyxTQUFVd0MsRUFBa0IsQ0FDMUJHLFFBaEJrQixDQUNwQkMsS0FBTSx5QkFDTkMsS0FBTSx5QkFDTkMsT0FBUSxxQkFDUkMsTUFBTyxzQkFhTEwsYUFBYyxVRTlCZE0sRUFBdUIsQ0FDekJDLFNBQVUscUJBQ1ZDLFVBQVcsbUJBQ1hDLE1BQU8sZUFDUEMsU0FBVSxrQkFDVkMsU0FBVSxjQUNWN0IsTUFBTyxLQ05NLFNBQVM4QixFQUFnQjNPLEdBQ3RDLE9BQU8sU0FBVTRPLEVBQVkvSyxHQUMzQixJQUNJZ0wsRUFFSixHQUFnQixnQkFIRmhMLFNBQTBDQSxFQUFRMkQsUUFBVWhDLE9BQU8zQixFQUFRMkQsU0FBVyxlQUdwRXhILEVBQUs4TyxpQkFBa0IsQ0FDckQsSUFBSWYsRUFBZS9OLEVBQUsrTyx3QkFBMEIvTyxFQUFLK04sYUFDbkRuSCxFQUFRL0MsU0FBMENBLEVBQVErQyxNQUFRcEIsT0FBTzNCLEVBQVErQyxPQUFTbUgsRUFDOUZjLEVBQWM3TyxFQUFLOE8saUJBQWlCbEksSUFBVTVHLEVBQUs4TyxpQkFBaUJmLEVBQ3RFLEtBQU8sQ0FDTCxJQUFJaUIsRUFBZ0JoUCxFQUFLK04sYUFFckJrQixFQUFTcEwsU0FBMENBLEVBQVErQyxNQUFRcEIsT0FBTzNCLEVBQVErQyxPQUFTNUcsRUFBSytOLGFBRXBHYyxFQUFjN08sRUFBS2tQLE9BQU9ELElBQVdqUCxFQUFLa1AsT0FBT0YsRUFDbkQsQ0FJQSxPQUFPSCxFQUZLN08sRUFBS21QLGlCQUFtQm5QLEVBQUttUCxpQkFBaUJQLEdBQWNBLEVBRzFFLENBQ0YsQ0NyQmUsU0FBU1EsRUFBYXBQLEdBQ25DLE9BQU8sU0FBVXFQLEdBQ2YsSUFBSXhMLEVBQVVuRCxVQUFVL0IsT0FBUyxRQUFzQm1QLElBQWpCcE4sVUFBVSxHQUFtQkEsVUFBVSxHQUFLLENBQUMsRUFDL0VrRyxFQUFRL0MsRUFBUStDLE1BQ2hCMEksRUFBZTFJLEdBQVM1RyxFQUFLdVAsY0FBYzNJLElBQVU1RyxFQUFLdVAsY0FBY3ZQLEVBQUt3UCxtQkFDN0V2RSxFQUFjb0UsRUFBT25FLE1BQU1vRSxHQUUvQixJQUFLckUsRUFDSCxPQUFPLEtBR1QsSUFPSXhLLEVBUEFnUCxFQUFnQnhFLEVBQVksR0FDNUJ5RSxFQUFnQjlJLEdBQVM1RyxFQUFLMFAsY0FBYzlJLElBQVU1RyxFQUFLMFAsY0FBYzFQLEVBQUsyUCxtQkFDOUVDLEVBQU1DLE1BQU1DLFFBQVFKLEdBQWlCSyxFQUFVTCxHQUFlLFNBQVVqRixHQUMxRSxPQUFPQSxFQUFRdUYsS0FBS1AsRUFDdEIsSUFBS1EsRUFBUVAsR0FBZSxTQUFVakYsR0FDcEMsT0FBT0EsRUFBUXVGLEtBQUtQLEVBQ3RCLElBRUFoUCxFQUFRVCxFQUFLa1EsY0FBZ0JsUSxFQUFLa1EsY0FBY04sR0FBT0EsRUFDdkRuUCxFQUFRb0QsRUFBUXFNLGNBQWdCck0sRUFBUXFNLGNBQWN6UCxHQUFTQSxFQUMvRCxJQUFJMFAsRUFBT2QsRUFBT2UsTUFBTVgsRUFBYzlRLFFBQ3RDLE1BQU8sQ0FDTDhCLE1BQU9BLEVBQ1AwUCxLQUFNQSxFQUVWLENBQ0YsQ0FFQSxTQUFTRixFQUFRSSxFQUFRQyxHQUN2QixJQUFLLElBQUlWLEtBQU9TLEVBQ2QsR0FBSUEsRUFBT0UsZUFBZVgsSUFBUVUsRUFBVUQsRUFBT1QsSUFDakQsT0FBT0EsQ0FLYixDQUVBLFNBQVNHLEVBQVVTLEVBQU9GLEdBQ3hCLElBQUssSUFBSVYsRUFBTSxFQUFHQSxFQUFNWSxFQUFNN1IsT0FBUWlSLElBQ3BDLEdBQUlVLEVBQVVFLEVBQU1aLElBQ2xCLE9BQU9BLENBS2IsQ0NsQkEsTUM1QkEsRURjYSxDQUNYYSxLQUFNLFFBQ05DLGVQK0NtQixTQUF3QnRMLEVBQU91TCxFQUFPOU0sR0FDekQsSUFBSStNLEVBQ0FDLEVBQWFuRSxFQUFxQnRILEdBVXRDLE9BUEV3TCxFQUR3QixpQkFBZkMsRUFDQUEsRUFDVSxJQUFWRixFQUNBRSxFQUFXakUsSUFFWGlFLEVBQVdoRSxNQUFNdkIsUUFBUSxZQUFhcUYsRUFBTTlQLFlBR25EZ0QsU0FBMENBLEVBQVFpTixVQUNoRGpOLEVBQVFrTixZQUFjbE4sRUFBUWtOLFdBQWEsRUFDdEMsTUFBUUgsRUFFUkEsRUFBUyxPQUliQSxDQUNULEVPbkVFbEcsV0xlRixFS2RFc0csZUhWbUIsU0FBd0I1TCxFQUFPNkwsRUFBT0MsRUFBV0MsR0FDcEUsT0FBTzlDLEVBQXFCakosRUFDOUIsRUdTRXNCLFNFaUdhLENBQ2JJLGNBM0JrQixTQUF1QmxGLEVBQWF1UCxHQUN0RCxJQUFJdFAsRUFBU0gsT0FBT0UsR0FPaEJ3UCxFQUFTdlAsRUFBUyxJQUV0QixHQUFJdVAsRUFBUyxJQUFNQSxFQUFTLEdBQzFCLE9BQVFBLEVBQVMsSUFDZixLQUFLLEVBQ0gsT0FBT3ZQLEVBQVMsS0FFbEIsS0FBSyxFQUNILE9BQU9BLEVBQVMsS0FFbEIsS0FBSyxFQUNILE9BQU9BLEVBQVMsS0FJdEIsT0FBT0EsRUFBUyxJQUNsQixFQUlFOEUsSUFBS2dJLEVBQWdCLENBQ25CTyxPQXZIWSxDQUNkbUMsT0FBUSxDQUFDLElBQUssS0FDZEMsWUFBYSxDQUFDLEtBQU0sTUFDcEJDLEtBQU0sQ0FBQyxnQkFBaUIsZ0JBcUh0QnhELGFBQWMsU0FFaEJ4RyxRQUFTb0gsRUFBZ0IsQ0FDdkJPLE9BdEhnQixDQUNsQm1DLE9BQVEsQ0FBQyxJQUFLLElBQUssSUFBSyxLQUN4QkMsWUFBYSxDQUFDLEtBQU0sS0FBTSxLQUFNLE1BQ2hDQyxLQUFNLENBQUMsY0FBZSxjQUFlLGNBQWUsZ0JBb0hsRHhELGFBQWMsT0FDZG9CLGlCQUFrQixTQUEwQjVILEdBQzFDLE9BQU9BLEVBQVUsQ0FDbkIsSUFFRmpDLE1BQU9xSixFQUFnQixDQUNyQk8sT0FwSGMsQ0FDaEJtQyxPQUFRLENBQUMsSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLEtBQ2hFQyxZQUFhLENBQUMsTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE9BQzNGQyxLQUFNLENBQUMsVUFBVyxXQUFZLFFBQVMsUUFBUyxNQUFPLE9BQVEsT0FBUSxTQUFVLFlBQWEsVUFBVyxXQUFZLGFBa0huSHhELGFBQWMsU0FFaEJ0TCxJQUFLa00sRUFBZ0IsQ0FDbkJPLE9BbkhZLENBQ2RtQyxPQUFRLENBQUMsSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssS0FDdkNqRCxNQUFPLENBQUMsS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sTUFDNUNrRCxZQUFhLENBQUMsTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sT0FDeERDLEtBQU0sQ0FBQyxTQUFVLFNBQVUsVUFBVyxZQUFhLFdBQVksU0FBVSxhQWdIdkV4RCxhQUFjLFNBRWhCN0UsVUFBV3lGLEVBQWdCLENBQ3pCTyxPQWpIa0IsQ0FDcEJtQyxPQUFRLENBQ05HLEdBQUksSUFDSkMsR0FBSSxJQUNKQyxTQUFVLEtBQ1ZDLEtBQU0sSUFDTkMsUUFBUyxVQUNUQyxVQUFXLFlBQ1hDLFFBQVMsVUFDVEMsTUFBTyxTQUVUVCxZQUFhLENBQ1hFLEdBQUksS0FDSkMsR0FBSSxLQUNKQyxTQUFVLFdBQ1ZDLEtBQU0sT0FDTkMsUUFBUyxVQUNUQyxVQUFXLFlBQ1hDLFFBQVMsVUFDVEMsTUFBTyxTQUVUUixLQUFNLENBQ0pDLEdBQUksT0FDSkMsR0FBSSxPQUNKQyxTQUFVLFdBQ1ZDLEtBQU0sT0FDTkMsUUFBUyxVQUNUQyxVQUFXLFlBQ1hDLFFBQVMsVUFDVEMsTUFBTyxVQXFGUGhFLGFBQWMsT0FDZGUsaUJBbkY0QixDQUM5QnVDLE9BQVEsQ0FDTkcsR0FBSSxJQUNKQyxHQUFJLElBQ0pDLFNBQVUsS0FDVkMsS0FBTSxJQUNOQyxRQUFTLGlCQUNUQyxVQUFXLG1CQUNYQyxRQUFTLGlCQUNUQyxNQUFPLFlBRVRULFlBQWEsQ0FDWEUsR0FBSSxLQUNKQyxHQUFJLEtBQ0pDLFNBQVUsV0FDVkMsS0FBTSxPQUNOQyxRQUFTLGlCQUNUQyxVQUFXLG1CQUNYQyxRQUFTLGlCQUNUQyxNQUFPLFlBRVRSLEtBQU0sQ0FDSkMsR0FBSSxPQUNKQyxHQUFJLE9BQ0pDLFNBQVUsV0FDVkMsS0FBTSxPQUNOQyxRQUFTLGlCQUNUQyxVQUFXLG1CQUNYQyxRQUFTLGlCQUNUQyxNQUFPLGFBdURQaEQsdUJBQXdCLFVGekgxQjdELE1Ha0NVLENBQ1ZwRSxlUHhEMEM5RyxFT3dEUCxDQUNqQ3NQLGFBdkQ0Qix3QkF3RDVCMEMsYUF2RDRCLE9Bd0Q1QjlCLGNBQWUsU0FBdUJ6UCxHQUNwQyxPQUFPd1IsU0FBU3hSLEVBQU8sR0FDekIsR1A1REssU0FBVTRPLEdBQ2YsSUFBSXhMLEVBQVVuRCxVQUFVL0IsT0FBUyxRQUFzQm1QLElBQWpCcE4sVUFBVSxHQUFtQkEsVUFBVSxHQUFLLENBQUMsRUFDL0V1SyxFQUFjb0UsRUFBT25FLE1BQU1sTCxFQUFLc1AsY0FDcEMsSUFBS3JFLEVBQWEsT0FBTyxLQUN6QixJQUFJd0UsRUFBZ0J4RSxFQUFZLEdBQzVCaUgsRUFBYzdDLEVBQU9uRSxNQUFNbEwsRUFBS2dTLGNBQ3BDLElBQUtFLEVBQWEsT0FBTyxLQUN6QixJQUFJelIsRUFBUVQsRUFBS2tRLGNBQWdCbFEsRUFBS2tRLGNBQWNnQyxFQUFZLElBQU1BLEVBQVksR0FDbEZ6UixFQUFRb0QsRUFBUXFNLGNBQWdCck0sRUFBUXFNLGNBQWN6UCxHQUFTQSxFQUMvRCxJQUFJMFAsRUFBT2QsRUFBT2UsTUFBTVgsRUFBYzlRLFFBQ3RDLE1BQU8sQ0FDTDhCLE1BQU9BLEVBQ1AwUCxLQUFNQSxFQUVWLEdPZ0RBeEosSUFBS3lJLEVBQWEsQ0FDaEJHLGNBNURtQixDQUNyQjhCLE9BQVEsVUFDUkMsWUFBYSw2REFDYkMsS0FBTSw4REEwREovQixrQkFBbUIsT0FDbkJFLGNBekRtQixDQUNyQnlDLElBQUssQ0FBQyxNQUFPLFlBeURYeEMsa0JBQW1CLFFBRXJCcEksUUFBUzZILEVBQWEsQ0FDcEJHLGNBMUR1QixDQUN6QjhCLE9BQVEsV0FDUkMsWUFBYSxZQUNiQyxLQUFNLGtDQXdESi9CLGtCQUFtQixPQUNuQkUsY0F2RHVCLENBQ3pCeUMsSUFBSyxDQUFDLEtBQU0sS0FBTSxLQUFNLE9BdUR0QnhDLGtCQUFtQixNQUNuQk8sY0FBZSxTQUF1QmtDLEdBQ3BDLE9BQU9BLEVBQVEsQ0FDakIsSUFFRjlNLE1BQU84SixFQUFhLENBQ2xCRyxjQTNEcUIsQ0FDdkI4QixPQUFRLGVBQ1JDLFlBQWEsc0RBQ2JDLEtBQU0sNkZBeURKL0Isa0JBQW1CLE9BQ25CRSxjQXhEcUIsQ0FDdkIyQixPQUFRLENBQUMsTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE9BQ3RGYyxJQUFLLENBQUMsT0FBUSxNQUFPLFFBQVMsT0FBUSxRQUFTLFFBQVMsUUFBUyxPQUFRLE1BQU8sTUFBTyxNQUFPLFFBdUQ1RnhDLGtCQUFtQixRQUVyQmxOLElBQUsyTSxFQUFhLENBQ2hCRyxjQXhEbUIsQ0FDckI4QixPQUFRLFlBQ1JqRCxNQUFPLDJCQUNQa0QsWUFBYSxrQ0FDYkMsS0FBTSxnRUFxREovQixrQkFBbUIsT0FDbkJFLGNBcERtQixDQUNyQjJCLE9BQVEsQ0FBQyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxPQUNuRGMsSUFBSyxDQUFDLE9BQVEsTUFBTyxPQUFRLE1BQU8sT0FBUSxNQUFPLFNBbURqRHhDLGtCQUFtQixRQUVyQnpHLFVBQVdrRyxFQUFhLENBQ3RCRyxjQXBEeUIsQ0FDM0I4QixPQUFRLDZEQUNSYyxJQUFLLGtGQW1ESDNDLGtCQUFtQixNQUNuQkUsY0FsRHlCLENBQzNCeUMsSUFBSyxDQUNIWCxHQUFJLE1BQ0pDLEdBQUksTUFDSkMsU0FBVSxPQUNWQyxLQUFNLE9BQ05DLFFBQVMsV0FDVEMsVUFBVyxhQUNYQyxRQUFTLFdBQ1RDLE1BQU8sV0EwQ1BwQyxrQkFBbUIsU0h4RXJCOUwsUUFBUyxDQUNQckIsYUFBYyxFQUdka0Msc0JBQXVCLElJSjNCLElBQUkyTixHQUF5Qix3REFHekJDLEdBQTZCLG9DQUM3QkMsR0FBc0IsZUFDdEJDLEdBQW9CLE1BQ3BCQyxHQUFnQyxXQTZYcEMsU0FBU0MsR0FBbUJsRyxHQUMxQixJQUFJbUcsRUFBVW5HLEVBQU10QixNQUFNcUgsSUFFMUIsT0FBS0ksRUFJRUEsRUFBUSxHQUFHckgsUUFBUWtILEdBQW1CLEtBSHBDaEcsQ0FJWCxDQy9aQSxNQUFNb0csR0FBbUIsV0FpQ3JCLFNBQVNDLEVBQXlCQyxHQUM5QixPQUFJQSxFQUFHQyxTQUFTQyxVQUF5QixLQUFiRixFQUFHclMsS0FHbkMsQ0FDQSxNQUFPLENBQ0h3UyxXQXRDSixTQUFvQnhULEVBQU15VCxHQUN0QixPRDZUTyxTQUFnQjFSLEVBQVcyUixFQUFnQnRQLEdBQ3hELElBQUlDLEVBQU1JLEVBQWlCSCxFQUFPQyxFQUFPb1AsRUFBTzNPLEVBQXVCNE8sRUFBa0JDLEVBQXVCbFAsRUFBdUJDLEVBQXdCa1AsRUFBT0MsRUFBT0MsRUFBT3hQLEVBQXVCeVAsRUFBa0JDLEVBQXVCQyxFQUF3QkMsRUFFNVEvVCxFQUFhLEVBQUdZLFdBQ2hCLElBQUlvVCxFQUFZdE8sT0FBTzJOLEdBQ25CelAsRUFBaUJDLElBQ2pCVyxFQUE0TCxRQUFsTFIsRUFBZ0csUUFBeEZJLEVBQWtCTCxhQUF5QyxFQUFTQSxFQUFRUyxjQUF3QyxJQUFwQkosRUFBNkJBLEVBQWtCUixFQUFlWSxjQUE2QixJQUFUUixFQUFrQkEsRUFBT2lRLEVBQzdOclAsRUFBd0IvQyxFQUF1M0IsUUFBNTJCb0MsRUFBNmpCLFFBQXBqQkMsRUFBdWUsUUFBOWRvUCxFQUFzSCxRQUE3RzNPLEVBQXdCWixhQUF5QyxFQUFTQSxFQUFRYSw2QkFBNkQsSUFBMUJELEVBQW1DQSxFQUF3QlosU0FBMEYsUUFBdkN3UCxFQUFtQnhQLEVBQVFTLGNBQXlDLElBQXJCK08sR0FBOEYsUUFBdERDLEVBQXdCRCxFQUFpQnhQLGVBQStDLElBQTFCeVAsT0FBL0osRUFBMk1BLEVBQXNCNU8sNkJBQTZDLElBQVYwTyxFQUFtQkEsRUFBUTFQLEVBQWVnQiw2QkFBNkMsSUFBVlYsRUFBbUJBLEVBQTRELFFBQW5ESSxFQUF3QlYsRUFBZVksY0FBOEMsSUFBMUJGLEdBQXlHLFFBQTVEQyxFQUF5QkQsRUFBc0JQLGVBQWdELElBQTNCUSxPQUE5RSxFQUEySEEsRUFBdUJLLDZCQUE2QyxJQUFWWCxFQUFtQkEsRUFBUSxHQUV0N0IsS0FBTVcsR0FBeUIsR0FBS0EsR0FBeUIsR0FDM0QsTUFBTSxJQUFJSCxXQUFXLDZEQUd2QixJQUFJL0IsRUFBZWIsRUFBczFCLFFBQTMwQjRSLEVBQWtpQixRQUF6aEJDLEVBQXFkLFFBQTVjQyxFQUE2RyxRQUFwR3hQLEVBQXdCSixhQUF5QyxFQUFTQSxFQUFRckIsb0JBQW9ELElBQTFCeUIsRUFBbUNBLEVBQXdCSixTQUEwRixRQUF2QzZQLEVBQW1CN1AsRUFBUVMsY0FBeUMsSUFBckJvUCxHQUE4RixRQUF0REMsRUFBd0JELEVBQWlCN1AsZUFBK0MsSUFBMUI4UCxPQUEvSixFQUEyTUEsRUFBc0JuUixvQkFBb0MsSUFBVmlSLEVBQW1CQSxFQUFRL1AsRUFBZWxCLG9CQUFvQyxJQUFWZ1IsRUFBbUJBLEVBQTZELFFBQXBESSxFQUF5QmxRLEVBQWVZLGNBQStDLElBQTNCc1AsR0FBMkcsUUFBN0RDLEVBQXlCRCxFQUF1Qi9QLGVBQWdELElBQTNCZ1EsT0FBL0UsRUFBNEhBLEVBQXVCclIsb0JBQW9DLElBQVYrUSxFQUFtQkEsRUFBUSxHQUU1NEIsS0FBTS9RLEdBQWdCLEdBQUtBLEdBQWdCLEdBQ3pDLE1BQU0sSUFBSStCLFdBQVcsb0RBR3ZCLElBQUtELEVBQU9vQyxTQUNWLE1BQU0sSUFBSW5DLFdBQVcseUNBR3ZCLElBQUtELEVBQU9vRyxXQUNWLE1BQU0sSUFBSW5HLFdBQVcsMkNBR3ZCLElBQUkrRixFQUFldkosRUFBT1MsR0FFMUIsSUFBS0QsRUFBUStJLEdBQ1gsTUFBTSxJQUFJL0YsV0FBVyxzQkFNdkIsSUFBSXdGLEVBQWlCd0IsRUFBZ0NqQixHQUNqRGtCLEVBQVVuSixFQUFnQmlJLEVBQWNQLEdBQ3hDaUssRUFBbUIsQ0FDckJ0UCxzQkFBdUJBLEVBQ3ZCbEMsYUFBY0EsRUFDZDhCLE9BQVFBLEVBQ1IwRixjQUFlTSxHQTJDakIsT0F6Q2F3SixFQUFVNUksTUFBTW9ILElBQTRCMkIsS0FBSSxTQUFVQyxHQUNyRSxJQUFJQyxFQUFpQkQsRUFBVSxHQUUvQixNQUF1QixNQUFuQkMsR0FBNkMsTUFBbkJBLEdBRXJCQyxFQURhLEVBQWVELElBQ2RELEVBQVc1UCxFQUFPb0csWUFHbEN3SixDQUNULElBQUdHLEtBQUssSUFBSW5KLE1BQU1tSCxJQUF3QjRCLEtBQUksU0FBVUMsR0FFdEQsR0FBa0IsT0FBZEEsRUFDRixNQUFPLElBR1QsSUFBSUMsRUFBaUJELEVBQVUsR0FFL0IsR0FBdUIsTUFBbkJDLEVBQ0YsT0FBT3pCLEdBQW1Cd0IsR0FHNUIsSUFBSUksRUFBWSxFQUFXSCxHQUUzQixHQUFJRyxFQVNGLE9BUk16USxTQUEwQ0EsRUFBUTBRLDhCQUFnQ2xJLEVBQXlCNkgsSUFDL0c1SCxFQUFvQjRILEVBQVdmLEVBQWdCM04sT0FBT2hFLElBR2xEcUMsU0FBMENBLEVBQVEyUSwrQkFBaUNySSxFQUEwQitILElBQ2pINUgsRUFBb0I0SCxFQUFXZixFQUFnQjNOLE9BQU9oRSxJQUdqRDhTLEVBQVU5SSxFQUFTMEksRUFBVzVQLEVBQU9vQyxTQUFVc04sR0FHeEQsR0FBSUcsRUFBZWpKLE1BQU11SCxJQUN2QixNQUFNLElBQUlsTyxXQUFXLGlFQUFtRTRQLEVBQWlCLEtBRzNHLE9BQU9ELENBQ1QsSUFBR0csS0FBSyxHQUVWLENDblplOUgsQ0FBTyxJQUFJNUwsS0FBS2xCLEdBQU95VCxFQUNsQyxFQXFDSXVCLHVCQW5DSixTQUFnQzNCLEVBQUk0QixHQUNoQyxNQUFNQyxFQUFVQyxTQUFTQyxjQUFjL0IsR0FFdkMsSUFBSyxJQUFLbEQsRUFBS2tGLEtBQVFsVSxPQUFPbVUsUUFBUUwsR0FDdEIsVUFBUjlFLEVBQ0ErRSxFQUFRSyxpQkFDSk4sRUFBV08sTUFBTS9CLEtBQ2pCd0IsRUFBV08sTUFBTUMsY0FFcEJQLEVBQVEvRSxHQUFPa0YsRUFHeEIsT0FBT0gsQ0FDWCxFQXVCSTlCLDJCQUNBc0MseUJBckJKLFNBQWtDckMsR0FDekJELEVBQXlCQyxHQU0xQkEsRUFBR3NDLGtCQUFrQixLQUxyQnRDLEVBQUdzQyxrQkFDQywrQkFBK0J0QyxFQUFHdUMseUJBRXRDdkMsRUFBR3dDLGlCQUlYLEVBY0gsQ0E1Q3dCLEdBOEN6QixNQ3JCQSxHQTNCMkIsV0FtQnZCLFNBQVNDLElBQ0wsTUFBTS9YLEVBQU9nWSxhQUFhQyxRQUFRLFdBQ2xDLE9BQU92VyxLQUFLd1csTUFBTWxZLEVBQ3RCLENBRUEsTUFBTyxDQUFFbVksWUF2QlQsU0FBcUJDLEdBQ2pCLE1BQU1wWSxFQUFPLENBQ1RHLFNBQVVpWSxFQUFRalksU0FDbEJELE1BQU9rWSxFQUFRbFksTUFDZkUsR0FBSWdZLEVBQVFoWSxHQUNaaUMsU0FBVStWLEVBQVEvVixVQUV0QjJWLGFBQWFLLFFBQVEsVUFBVzNXLEtBQUtDLFVBQVUzQixHQUNuRCxFQWVzQnNZLDRCQWJ0QixTQUFxQ0YsR0FDakMsTUFBTXBZLEVBQU8rWCxJQUNiSyxFQUFRalksU0FBV0gsRUFBS0csU0FDeEJpWSxFQUFRbFksTUFBUUYsRUFBS0UsTUFDckJrWSxFQUFRaFksR0FBS0osRUFBS0ksR0FDbEJnWSxFQUFRL1YsU0FBV3JDLEVBQUtxQyxRQUM1QixFQU9tRDBWLGFBQ3RELENBekIwQixHQ2lZM0IsR0E1WGMsV0FDVixNQUFNUSxFQUFZLEVBQ1pDLEVBQXFCQyxHQUNyQkMsRUFBZXRCLFNBQVN1QixjQUFjLGtCQUN0Q0MsRUFBaUIsR0EySHZCLFNBQVNDLEVBQVF6TixHQUViLE1BQU0wTixFQUFZMUIsU0FBU3VCLGNBQWMsNkJBQ3pDLElBQUtILEVBQW1CbkQseUJBQXlCeUQsR0FHN0MsT0FGQU4sRUFBbUJiLHlCQUF5Qm1CLFFBQzVDMU4sRUFBRTJOLGlCQUdOLE1BQU1DLEVBQVc1QixTQUFTdUIsY0FDdEIsNkJBQ0YxVixNQUNJZ1csRUFBZ0JELEVBQVMsR0FBR0UsY0FBZ0JGLEVBQVNwRyxNQUFNLEdBQzNEdUcsRUFBVy9CLFNBQVN1QixjQUN0Qiw2QkFDRjFWLE1BQ0ltVyxFQUFnQlosRUFBbUIvQyxXQUNyQyxJQUFJdFMsS0FBS2dXLEdBQ1QsY0FFRUUsRUFBVWQsRUFBVW5XLEtBQUs2VyxFQUFlRyxHQUc5Q2IsRUFBVXJZLE1BQU1vWixLQUFLRCxHQUNyQkUsRUFBaUJoQixFQUFVclksT0FDM0JzWixFQUFxQmQsR0FDckJILEVBQVVqWCxnQkFDTmlYLEVBQVVwWSxTQUNWb1ksRUFBVXJZLE1BQ1ZxWSxFQUFVblksSUFHZHdZLEVBQWVULFlBQVlJLEVBQy9CLENBRUEsU0FBU2tCLElBd0VPckMsU0FBU3VCLGNBQWMsaUJBQy9CZSxTQXZFSixNQUFNQyxFQUFtQm5CLEVBQW1CdkIsdUJBQ3hDLE1BQ0EsQ0FBRTJDLFVBQVcsNEJBRVhDLEVBQWlCckIsRUFBbUJ2Qix1QkFDdEMsTUFDQSxDQUFFMkMsVUFBVyw4QkFFWGQsRUFBWU4sRUFBbUJ2Qix1QkFBdUIsUUFBUyxDQUNqRTJDLFVBQVcsMkJBQ1hFLFlBQWEsWUFDYnBFLEtBQU0sT0FDTnFFLFlBQVksRUFDWmxDLFVBQVcsSUFFVG1DLEVBQVl4QixFQUFtQnZCLHVCQUF1QixRQUFTLENBQ2pFMkMsVUFBVywyQkFDWGxFLEtBQU0sT0FDTnpTLE1BQU91VixFQUFtQi9DLFdBQVcsSUFBSXRTLEtBQVEsZ0JBRS9DOFcsRUFBZXpCLEVBQW1CdkIsdUJBQXVCLE1BQU8sQ0FDbEUyQyxVQUFXLDRCQUVUTSxFQUFTMUIsRUFBbUJ2Qix1QkFBdUIsU0FBVSxDQUMvRDJDLFVBQVcsc0NBQ1hPLFlBQWEsTUFDYjFDLE1BQU8sQ0FDSC9CLEtBQU0sUUFDTmdDLGFBQWNtQixLQUdoQnVCLEVBQVk1QixFQUFtQnZCLHVCQUF1QixTQUFVLENBQ2xFMkMsVUFBVyx1Q0FDWE8sWUFBYSxTQUNiMUMsTUFBTyxDQUNIL0IsS0FBTSxRQUNOZ0MsYUFBYzJDLEtBR3RCdkIsRUFBVXRCLGlCQUNOLFFBQ0FnQixFQUFtQmIseUJBQXlCMkMsS0FDeEN4QixFQUNBQSxJQUdSZSxFQUFlVSxPQUFPekIsRUFBV2tCLEdBQ2pDQyxFQUFhTSxPQUFPTCxFQUFRRSxHQUM1QlQsRUFBaUJZLE9BQU9WLEVBQWdCSSxHQUN4Q3ZCLEVBQWE4QixZQUFZYixFQUM3QixDQUVBLFNBQVNVLElBQ1FqRCxTQUFTdUIsY0FBYyw0QkFDL0JlLFNBQ0xGLEVBQXFCZCxFQUN6QixDQWtCQSxTQUFTYyxFQUFxQmxFLEdBQzFCQSxFQUFHa0YsWUFoQlMvQixHQUFBLHVCQUF3QyxTQUFVLENBQzFEbUIsVUFBVyxlQUNYYSxVQUFXLG9rQkFFWGhELE1BQU8sQ0FBRS9CLEtBQU0sUUFBU2dDLGFBQWMrQixLQWE5QyxDQUlBLFNBQVNpQixFQUFvQnRQLEdBQ3pCQSxFQUFFdVAsa0JBQ0YsTUFBTUMsRUFBVXhELFNBQVN1QixjQUFjLG9CQUNqQ2tDLEVBQWV6RCxTQUFTdUIsY0FBYyxtQkFDNUNpQyxFQUFRRSxVQUFVcEIsT0FBTyxVQUN6Qm1CLEVBQWFDLFVBQVVwQixPQUFPLFVBQzlCbUIsRUFBYUwsWUE5TGpCLFNBQTZCbEYsR0FDekIsTUFDTXlGLEVBRG1CekYsRUFBRzBGLFFBQVEsbUJBRWZyQyxjQUFjLGlCQUFpQndCLFlBRTlDYyxFQUFjMUMsRUFBVXJXLFlBQzFCNlksRUFDQXhDLEVBQVVyWSxPQUdSZ2IsRUFBWTFDLEVBQW1CdkIsdUJBQXVCLE1BQU8sQ0FDL0QyQyxVQUFXLDJDQUEyQ21CLEVBQWVqTixRQUNqRSxLQUNBLFNBR0ZxTixFQUFlM0MsRUFBbUJ2Qix1QkFDcEMsUUFDQSxDQUNJMkMsVUFBVywwQkFDWGxFLEtBQU0sT0FDTnpTLE1BQU84WCxFQUNQbEQsVUFBVyxJQUdibUMsRUFBWXhCLEVBQW1CdkIsdUJBQXVCLFFBQVMsQ0FDakUyQyxVQUFXLHVCQUNYbEUsS0FBTSxPQUNOelMsTUFBT3VWLEVBQW1CL0MsV0FDdEIsSUFBSXRTLEtBQUs4WCxHQUNULGdCQUdGaEIsRUFBZXpCLEVBQW1CdkIsdUJBQXVCLE1BQU8sQ0FDbEUyQyxVQUFXLG9EQUVUd0IsRUFBVTVDLEVBQW1CdkIsdUJBQXVCLFNBQVUsQ0FDaEUyQyxVQUFXLHVDQUNYTyxZQUFhLE9BQ2J6RSxLQUFNLFNBQ04rQixNQUFPLENBQ0gvQixLQUFNLFFBQ05nQyxhQUFjMkQsS0FHaEJqQixFQUFZNUIsRUFBbUJ2Qix1QkFBdUIsU0FBVSxDQUNsRTJDLFVBQVcsdUNBQ1hPLFlBQWEsU0FDYnpFLEtBQU0sU0FDTitCLE1BQU8sQ0FDSC9CLEtBQU0sUUFDTmdDLGFBQWM0RCxLQWF0QixPQVRBSCxFQUFhM0QsaUJBQ1QsUUFDQWdCLEVBQW1CYix5QkFBeUIyQyxLQUN4Q2EsRUFDQUEsSUFHUmxCLEVBQWFNLE9BQU9hLEVBQVNoQixHQUM3QmMsRUFBVVgsT0FBT1ksRUFBY25CLEVBQVdDLEdBQ25DaUIsQ0FDWCxDQTZINkJLLENBQW9CdGIsTUFDakQsQ0FFQSxTQUFTcWIsSUFDTCxNQUFNVixFQUFVeEQsU0FBU3VCLGNBQWMsb0JBQ2pDa0MsRUFBZXpELFNBQVN1QixjQUFjLG1CQUM1Q2lDLEVBQVFFLFVBQVVVLElBQUksVUFDdEJYLEVBQWFDLFVBQVVVLElBQUksVUFDM0JDLEVBQWdCWixFQUNwQixDQUVBLFNBQVNhLEVBQW1CdFEsR0FDeEJBLEVBQUV1UCxrQkFDRixNQUFNeGEsRUFBV29ZLEVBQVVwWSxTQUVyQndiLEVBRGdCMWIsS0FDYzBZLGNBQWMsaUJBQzVDMVgsRUFBYzBhLEVBQWN4QixZQUM1QmhCLEVBSGdCbFosS0FHUzBZLGNBQWMsY0FDdkMzWCxFQUFZdVgsRUFBVXJZLE1BRzVCeWIsRUFBY0MsTUFBTUMsZUFDdUIsaUJBQXZDRixFQUFjQyxNQUFNQyxlQUNkLE9BQ0EsZUFDVjFDLEVBQVN5QyxNQUFNQyxlQUN1QixpQkFBbEMxQyxFQUFTeUMsTUFBTUMsZUFDVCxPQUNBLGVBRVZ0RCxFQUFVM1csdUJBQXVCWixFQUFXQyxHQUM1Q3NYLEVBQVVqWCxnQkFBZ0JuQixFQUFVYSxFQUFXdVgsRUFBVW5ZLElBRXpEd1ksRUFBZVQsWUFBWUksRUFDL0IsQ0FjQXhZLGVBQWVzYixFQUFTalEsR0FDcEIsTUFBTTBRLEVBQVkxRSxTQUFTdUIsY0FBYyw0QkFHekMsSUFBS0gsRUFBbUJuRCx5QkFBeUJ5RyxHQUc3QyxPQUZBdEQsRUFBbUJiLHlCQUF5Qm1FLFFBQzVDMVEsRUFBRTJOLGlCQUlOLE1BQU05WCxFQXJCVixXQUlJLElBQUlBLEVBSHNCbVcsU0FBU3VCLGNBQy9CLHdCQUVnQ2lCLFVBQy9CbUMsTUFBTSxLQUFLLEdBQ1hBLE1BQU0sd0JBQXdCLEdBRW5DLE9BREE5YSxFQUFjQSxFQUFZNk0sUUFBUSxLQUFNLEtBQ2pDN00sQ0FDWCxDQVl3QithLEdBQ2RqYSxFQUFpQnFWLFNBQVN1QixjQUM1Qiw0QkFDRjFWLE1BQ0lqQixFQUFjb1YsU0FBU3VCLGNBQ3pCLHlCQUNGMVYsTUFHRnNWLEVBQVV6VyxhQUNOeVcsRUFBVXJZLE1BQ1ZlLEVBQ0FjLEVBQ0FDLEdBRUp1WCxFQUFpQmhCLEVBQVVyWSxPQUMzQm9iLElBQ0E5QixFQUFxQmQsR0FHckJILEVBQVVqWCxnQkFDTmlYLEVBQVVwWSxTQUNWb1ksRUFBVXJZLE1BQ1ZxWSxFQUFVblksSUFHZHdZLEVBQWVULFlBQVlJLEVBQy9CLENBSUEsU0FBUzBELElBQ0wsTUFBTTliLEVBQVdvWSxFQUFVcFksU0FDckJhLEVBQVl1WCxFQUFVclksTUFDdEJnYyxFQUFnQmpjLEtBQUsrYSxRQUFRLG1CQUM3Qi9aLEVBQ0ZpYixFQUFjdkQsY0FBYyxpQkFBaUJ3QixZQUVqRCtCLEVBQWN4QyxTQUNkbkIsRUFBVXhYLGVBQWVDLEVBQVdDLEdBQ3BDc1gsRUFBVWpYLGdCQUFnQm5CLEVBQVVhLEVBQVd1WCxFQUFVblksSUFDekR3WSxFQUFlVCxZQUFZSSxFQUMvQixDQUlBeFksZUFBZXdaLEVBQWlCclosR0FDNUJpYyxJQUNBamMsRUFBTWtjLFNBQVNDLElBQ1gzRCxFQUFhOEIsWUF4VnJCLFNBQThCNkIsR0FDMUIsTUFBTUMsRUFBTTlELEVBQW1CdkIsdUJBQXVCLE1BQU8sQ0FDekQyQyxVQUFXLGlCQUNYbkMsTUFBTyxDQUFFL0IsS0FBTSxRQUFTZ0MsYUFBY2dFLEtBRXBDYSxFQUFVL0QsRUFBbUJ2Qix1QkFBdUIsTUFBTyxDQUM3RDJDLFVBQVcsd0JBRVQ0QyxFQUFXaEUsRUFBbUJ2Qix1QkFBdUIsTUFBTyxDQUM5RDJDLFVBQVcseUJBRVQ2QyxFQUFjakUsRUFBbUJ2Qix1QkFDbkMsU0FDQSxDQUNJMkMsVUFBVyxtQkFDWG5DLE1BQU8sQ0FBRS9CLEtBQU0sUUFBU2dDLGFBQWN1RSxLQUd4QzNPLEVBQUlrTCxFQUFtQnZCLHVCQUF1QixJQUFLLENBQ3JEMkMsVUFBVyxlQUNYTyxZQUFha0MsRUFBS2piLFVBRWhCc2IsRUFBT2xFLEVBQW1CdkIsdUJBQXVCLE9BQVEsQ0FDM0QyQyxVQUFXLFlBQ1hPLFlBQWEzQixFQUFtQi9DLFdBQzVCLElBQUl0UyxLQUFLa1osRUFBS3BhLE1BQ2QscUJBR0ZtWixFQUFVNUMsRUFBbUJ2Qix1QkFBdUIsU0FBVSxDQUNoRTJDLFVBQVcsWUFDWE8sWUFBYSxPQUNiMUMsTUFBTyxDQUFFL0IsS0FBTSxRQUFTZ0MsYUFBY2dELEtBWTFDLE9BVEkyQixFQUFLeGEsY0FDTHlMLEVBQUVzTyxNQUFNQyxlQUFpQixlQUN6QmEsRUFBS2QsTUFBTUMsZUFBaUIsZ0JBR2hDVSxFQUFRaEMsT0FBT2tDLEVBQWFuUCxFQUFHOE4sR0FDL0JvQixFQUFTakMsT0FBT21DLEdBQ2hCSixFQUFJL0IsT0FBT2dDLEVBQVNDLEdBRWJGLENBQ1gsQ0EyU2lDSyxDQUFxQk4sR0FBTSxHQUU1RCxDQUVBLFNBQVNGLElBQ0xWLEVBQWdCL0MsRUFDcEIsQ0FFQSxTQUFTK0MsRUFBZ0JuRyxHQUNyQixLQUFPQSxFQUFHc0gsWUFDTnRILEVBQUd1SCxZQUFZdkgsRUFBR3dILFVBRTFCLENBRUEsT0EzV0lsRSxFQUFlYixjQUNmYSxFQUFlTiw0QkFBNEJDLEdBMFd4QyxDQUNIZ0IsbUJBQ0E0QyxhQUNBRixhQUNBUCxxQkFDQWxDLHVCQUNBWCxVQUVQLENBMVhhLElDQUgsV0FFUCxNQUFNTixFQUFZLEVBQ1pLLEVBQWlCLEdBQ2pCbUUsRUFBVSxHQUNWdkUsRUFBcUJDLEdBQ3JCdUUsRUFBcUI1RixTQUFTdUIsY0FBYywwQkFDNUNzRSxFQUFPN0YsU0FBU3VCLGNBQWMsU0FDOUJ1RSxFQUFXOUYsU0FBU3VCLGNBQWMsY0FDbEN3RSxFQUFZL0YsU0FBU3VCLGNBQWMsZUFDbkNpQyxFQUFVeEQsU0FBU3VCLGNBQWMsb0JBQ2pDeUUsRUFBZWhHLFNBQVN1QixjQUFjLG1CQUN0QzBFLEVBQWdCakcsU0FBU3VCLGNBQWMsbUJBQ3ZDMkUsRUFBZ0JsRyxTQUFTdUIsY0FBYyxtQkFDdkM0RSxFQUFlLElBQUluRyxTQUFTb0csaUJBQWlCLG9CQUM3Q0MsRUFBWXJHLFNBQVN1QixjQUFjLGVBQ25DRCxFQUFldEIsU0FBU3VCLGNBQWMsa0JBQ3RDK0UsRUFBWXRHLFNBQVN1QixjQUFjLGVBQ25DZ0YsRUFBcUJ2RyxTQUFTdUIsY0FBYyxnQkFDNUNpRixFQUFzQnhHLFNBQVN1QixjQUFjLG9CQUM3Q2tGLEVBQWF6RyxTQUFTdUIsY0FBYyxnQkFDcENtRixFQUFzQjFHLFNBQVN1QixjQUNqQywwQkFFRW9GLEVBQW9CM0csU0FBU3VCLGNBQWMsd0JBQzNDcUYsRUFBa0I1RyxTQUFTdUIsY0FBYywwQkFDL0MsSUFBSXNGLEdBQWlCLEVBNEJyQixTQUFTQyxFQUFnQjdiLEdBQ3JCLE1BQU04YixFQUFPbkIsRUFBbUJyRSxjQUFjLFFBRTdCLElBQWJ0VyxHQUNBNGEsRUFBS25DLFVBQVVVLElBQUksY0FDbkIyQyxFQUFLQyxJQUFNLHNCQUNYcEIsRUFBbUJsQyxVQUFVVSxJQUFJLGNBQ2pDaUMsRUFBVXRELFlBQWMsZUFDSixJQUFiOVgsR0FDUDRhLEVBQUtuQyxVQUFVcEIsT0FBTyxjQUN0QnlFLEVBQUtDLElBQU0sdUJBQ1hwQixFQUFtQmxDLFVBQVVwQixPQUFPLGNBQ3BDK0QsRUFBVXRELFlBQWMsY0FHeEI4QyxFQUFLbkMsVUFBVXVELE9BQU8sY0FDbEJyQixFQUFtQmxDLFVBQVV3RCxTQUFTLGVBQ3RDSCxFQUFLQyxJQUFNLHVCQUNYcEIsRUFBbUJsQyxVQUFVcEIsT0FBTyxjQUNwQytELEVBQVV0RCxZQUFjLFlBQ3hCNUIsRUFBVWxXLFVBQVcsSUFFckI4YixFQUFLQyxJQUFNLHNCQUNYcEIsRUFBbUJsQyxVQUFVVSxJQUFJLGNBQ2pDaUMsRUFBVXRELFlBQWMsYUFDeEI1QixFQUFVbFcsVUFBVyxJQUc3QnVXLEVBQWVULFlBQVlJLEVBQy9CLENBNkJBLFNBQVNnRyxJQUNMM0QsRUFBUUUsVUFBVVUsSUFBSSxVQUN0QmtDLEVBQVU1QyxVQUFVVSxJQUFJLFVBQ3hCcUMsRUFBVy9DLFVBQVVVLElBQUksU0FDN0IsQ0FFQSxTQUFTZ0QsRUFBZ0JyZSxHQUVyQitjLEVBQVMvQyxZQUFjaGEsRUFBVyxHQUVsQytjLEVBQVN6QyxVQUFZLEdBQUd0YSw0UEFDeEIrYyxFQUFTcEMsVUFBVXBCLE9BQU8sYUFDMUJ3RCxFQUFTcEMsVUFBVVUsSUFBSSxjQUMzQixDQWpHQXdCLEVBQW1CeEYsaUJBQWlCLFFBQVMwRyxHQUM3Q2hCLEVBQVMxRixpQkFBaUIsU0F3RDFCLFdBRVN2WCxLQUFLNmEsVUFBVXdELFNBQVMsZUFDN0IxRCxFQUFRRSxVQUFVcEIsT0FBTyxVQUN6QmdFLEVBQVU1QyxVQUFVcEIsT0FBTyxVQUMzQjJELEVBQWNwYSxNQUFRLEdBQ3RCcWEsRUFBY3hDLFVBQVVVLElBQUksVUFDaEMsSUE5REEyQixFQUFVM0YsaUJBQWlCLFNBeUUzQixXQUNJLE1BQU1pSCxFQUFhckgsU0FBU3VCLGNBQWMsZ0JBQzFDOEYsRUFBVzNELFVBQVVwQixPQUFPLGVBQzVCK0UsRUFBVzNELFVBQVVVLElBQUksYUFDekJpRCxFQUFXdEUsWUFBYyxRQUN6QjRDLEVBQVFaLGFBQ1JuRSxhQUFhMEcsT0FDakIsSUEvRUF0QixFQUFhNUYsaUJBQWlCLFNBaUc5QnpYLGVBQXFCcUwsR0FDakIsTUFBTXVULEVBQWN2SCxTQUFTdUIsY0FBYyxpQkFHM0MsR0FBSXNGLEVBQ0EsT0FLSixHQUhBQSxHQUFpQixHQUdaekYsRUFBbUJuRCx5QkFBeUJnSSxHQUk3QyxPQUhBN0UsRUFBbUJiLHlCQUF5QjBGLEdBQzVDalMsRUFBRTJOLHNCQUNGa0YsR0FBaUIsR0FHckJVLEVBQVk3RCxVQUFVcEIsT0FBTyxVQUM3QixNQUFNdlosRUFBV2tkLEVBQWNwYSxNQUN6QnpCLFFBQWlCK1csRUFBVWxZLFlBQVlGLEdBRzdDLEdBQUlxQixFQUFVLENBQ1YsTUFBTVIsRUFBWVEsRUFBU3RCLE1BQzNCcVksRUFBVXpZLHFCQUFxQjBCLFNBRXpCdWIsRUFBUXhELGlCQUFpQnZZLEdBRS9Cd2QsRUFBZ0JyZSxHQUNoQjRjLEVBQVF2RCxxQkFBcUJkLEdBQzdCNkYsSUFDQUksRUFBWTdELFVBQVVVLElBQUksVUFDMUJ5QyxHQUFpQixFQUNqQnJGLEVBQWVULFlBQVlJLEVBQy9CLE1BQ0lvRyxFQUFZN0QsVUFBVVUsSUFBSSxVQUUxQjhCLEVBQWN4QyxVQUFVcEIsT0FBTyxVQUMvQnVFLEdBQWlCLENBRXpCLElBdklBWixFQUFjN0YsaUJBQ1YsUUFDQWdCLEVBQW1CYix5QkFBeUIyQyxLQUN4QytDLEVBQ0FBLElBR1JFLEVBQWFuQixTQUFTd0MsR0FBUUEsRUFBSXBILGlCQUFpQixRQUFTK0csS0FDNURaLEVBQW1CbkcsaUJBQWlCLFNBc0RwQyxXQUNJb0QsRUFBUUUsVUFBVXBCLE9BQU8sVUFDekJnRSxFQUFVNUMsVUFBVVUsSUFBSSxVQUN4QnFDLEVBQVcvQyxVQUFVcEIsT0FBTyxVQUU1Qm9FLEVBQW9CN2EsTUFBUSxHQUM1QithLEVBQWdCbEQsVUFBVVUsSUFBSSxTQUNsQyxJQTVEQXNDLEVBQW9CdEcsaUJBQ2hCLFFBQ0FnQixFQUFtQmIseUJBQXlCMkMsS0FDeEN3RCxFQUNBQSxJQUdSRixFQUFvQnBHLGlCQUFpQixTQXlIckN6WCxlQUFzQnFMLEdBQ2xCLE1BQU1qTCxFQUFXMmQsRUFBb0I3YSxNQUVyQyxJQUFLdVYsRUFBbUJuRCx5QkFBeUJ5SSxHQUc3QyxPQUZBdEYsRUFBbUJiLHlCQUF5Qm1HLFFBQzVDMVMsRUFBRTJOLGlCQUdOZ0YsRUFBa0JqRCxVQUFVcEIsT0FBTyxVQUNuQyxJQUFJbFksUUFBaUIrVyxFQUFVbFksWUFBWUYsR0FFM0MsR0FBSXFCLEVBR0EsT0FGQXdjLEVBQWdCbEQsVUFBVXBCLE9BQU8sZUFDakNxRSxFQUFrQmpELFVBQVVVLElBQUksZ0JBSzlCakQsRUFBVXBXLGNBQWNoQyxHQUM5QnFCLFFBQWlCK1csRUFBVWxZLFlBQVlGLEdBRXZDb1ksRUFBVXpZLHFCQUFxQjBCLEdBQy9CdWMsRUFBa0JqRCxVQUFVVSxJQUFJLFVBQ2hDK0MsSUFDQUMsRUFBZ0JyZSxHQUNoQjRjLEVBQVF4RCxpQkFBaUJoQixFQUFVclksT0FDbkM2YyxFQUFRdkQscUJBQXFCZCxHQUM3QkgsRUFBVXBZLFNBQVdBLEVBQ3JCeVksRUFBZVQsWUFBWUksRUFDL0IsSUFHUUssRUFBZWIsZUFDZmEsRUFBZU4sNEJBQTRCQyxHQUMzQ3dFLEVBQVF4RCxpQkFBaUJoQixFQUFVclksT0FDbkNzZSxFQUFnQmpHLEVBQVVwWSxVQUMxQjRjLEVBQVF2RCxxQkFBcUJkLEdBQzdCd0YsRUFBZ0IsWUFHM0IsQ0FqTlUsRSIsInNvdXJjZXMiOlsid2VicGFjazovL3BvcHVwc21hcnQtcmVhY3QtcHJhY3RpY3VtLWZpcnN0LWNhc2UvLi9zcmMvbW9kdWxlcy9hY2NvdW50LmpzIiwid2VicGFjazovL3BvcHVwc21hcnQtcmVhY3QtcHJhY3RpY3VtLWZpcnN0LWNhc2UvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzIiwid2VicGFjazovL3BvcHVwc21hcnQtcmVhY3QtcHJhY3RpY3VtLWZpcnN0LWNhc2UvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2lzRGF0ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9wb3B1cHNtYXJ0LXJlYWN0LXByYWN0aWN1bS1maXJzdC1jYXNlLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS90b0RhdGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcG9wdXBzbWFydC1yZWFjdC1wcmFjdGljdW0tZmlyc3QtY2FzZS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vaXNWYWxpZC9pbmRleC5qcyIsIndlYnBhY2s6Ly9wb3B1cHNtYXJ0LXJlYWN0LXByYWN0aWN1bS1maXJzdC1jYXNlLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3RvSW50ZWdlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9wb3B1cHNtYXJ0LXJlYWN0LXByYWN0aWN1bS1maXJzdC1jYXNlLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9hZGRNaWxsaXNlY29uZHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcG9wdXBzbWFydC1yZWFjdC1wcmFjdGljdW0tZmlyc3QtY2FzZS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vc3ViTWlsbGlzZWNvbmRzL2luZGV4LmpzIiwid2VicGFjazovL3BvcHVwc21hcnQtcmVhY3QtcHJhY3RpY3VtLWZpcnN0LWNhc2UvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VVRDRGF5T2ZZZWFyL2luZGV4LmpzIiwid2VicGFjazovL3BvcHVwc21hcnQtcmVhY3QtcHJhY3RpY3VtLWZpcnN0LWNhc2UvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvc3RhcnRPZlVUQ0lTT1dlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcG9wdXBzbWFydC1yZWFjdC1wcmFjdGljdW0tZmlyc3QtY2FzZS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENJU09XZWVrWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly9wb3B1cHNtYXJ0LXJlYWN0LXByYWN0aWN1bS1maXJzdC1jYXNlLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENJU09XZWVrWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly9wb3B1cHNtYXJ0LXJlYWN0LXByYWN0aWN1bS1maXJzdC1jYXNlLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ0lTT1dlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcG9wdXBzbWFydC1yZWFjdC1wcmFjdGljdW0tZmlyc3QtY2FzZS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9kZWZhdWx0T3B0aW9ucy9pbmRleC5qcyIsIndlYnBhY2s6Ly9wb3B1cHNtYXJ0LXJlYWN0LXByYWN0aWN1bS1maXJzdC1jYXNlLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENXZWVrL2luZGV4LmpzIiwid2VicGFjazovL3BvcHVwc21hcnQtcmVhY3QtcHJhY3RpY3VtLWZpcnN0LWNhc2UvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VVRDV2Vla1llYXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcG9wdXBzbWFydC1yZWFjdC1wcmFjdGljdW0tZmlyc3QtY2FzZS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9zdGFydE9mVVRDV2Vla1llYXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcG9wdXBzbWFydC1yZWFjdC1wcmFjdGljdW0tZmlyc3QtY2FzZS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENXZWVrL2luZGV4LmpzIiwid2VicGFjazovL3BvcHVwc21hcnQtcmVhY3QtcHJhY3RpY3VtLWZpcnN0LWNhc2UvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvYWRkTGVhZGluZ1plcm9zL2luZGV4LmpzIiwid2VicGFjazovL3BvcHVwc21hcnQtcmVhY3QtcHJhY3RpY3VtLWZpcnN0LWNhc2UvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZm9ybWF0L2xpZ2h0Rm9ybWF0dGVycy9pbmRleC5qcyIsIndlYnBhY2s6Ly9wb3B1cHNtYXJ0LXJlYWN0LXByYWN0aWN1bS1maXJzdC1jYXNlLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2Zvcm1hdC9mb3JtYXR0ZXJzL2luZGV4LmpzIiwid2VicGFjazovL3BvcHVwc21hcnQtcmVhY3QtcHJhY3RpY3VtLWZpcnN0LWNhc2UvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZm9ybWF0L2xvbmdGb3JtYXR0ZXJzL2luZGV4LmpzIiwid2VicGFjazovL3BvcHVwc21hcnQtcmVhY3QtcHJhY3RpY3VtLWZpcnN0LWNhc2UvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9wb3B1cHNtYXJ0LXJlYWN0LXByYWN0aWN1bS1maXJzdC1jYXNlLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3Byb3RlY3RlZFRva2Vucy9pbmRleC5qcyIsIndlYnBhY2s6Ly9wb3B1cHNtYXJ0LXJlYWN0LXByYWN0aWN1bS1maXJzdC1jYXNlLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9mb3JtYXREaXN0YW5jZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9wb3B1cHNtYXJ0LXJlYWN0LXByYWN0aWN1bS1maXJzdC1jYXNlLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvX2xpYi9idWlsZEZvcm1hdExvbmdGbi9pbmRleC5qcyIsIndlYnBhY2s6Ly9wb3B1cHNtYXJ0LXJlYWN0LXByYWN0aWN1bS1maXJzdC1jYXNlLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9mb3JtYXRMb25nL2luZGV4LmpzIiwid2VicGFjazovL3BvcHVwc21hcnQtcmVhY3QtcHJhY3RpY3VtLWZpcnN0LWNhc2UvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkTWF0Y2hQYXR0ZXJuRm4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vcG9wdXBzbWFydC1yZWFjdC1wcmFjdGljdW0tZmlyc3QtY2FzZS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvZm9ybWF0UmVsYXRpdmUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcG9wdXBzbWFydC1yZWFjdC1wcmFjdGljdW0tZmlyc3QtY2FzZS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL19saWIvYnVpbGRMb2NhbGl6ZUZuL2luZGV4LmpzIiwid2VicGFjazovL3BvcHVwc21hcnQtcmVhY3QtcHJhY3RpY3VtLWZpcnN0LWNhc2UvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkTWF0Y2hGbi9pbmRleC5qcyIsIndlYnBhY2s6Ly9wb3B1cHNtYXJ0LXJlYWN0LXByYWN0aWN1bS1maXJzdC1jYXNlLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcG9wdXBzbWFydC1yZWFjdC1wcmFjdGljdW0tZmlyc3QtY2FzZS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9kZWZhdWx0TG9jYWxlL2luZGV4LmpzIiwid2VicGFjazovL3BvcHVwc21hcnQtcmVhY3QtcHJhY3RpY3VtLWZpcnN0LWNhc2UvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL2xvY2FsaXplL2luZGV4LmpzIiwid2VicGFjazovL3BvcHVwc21hcnQtcmVhY3QtcHJhY3RpY3VtLWZpcnN0LWNhc2UvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL21hdGNoL2luZGV4LmpzIiwid2VicGFjazovL3BvcHVwc21hcnQtcmVhY3QtcHJhY3RpY3VtLWZpcnN0LWNhc2UvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2Zvcm1hdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9wb3B1cHNtYXJ0LXJlYWN0LXByYWN0aWN1bS1maXJzdC1jYXNlLy4vc3JjL21vZHVsZXMvdXRpbGl0eS5qcyIsIndlYnBhY2s6Ly9wb3B1cHNtYXJ0LXJlYWN0LXByYWN0aWN1bS1maXJzdC1jYXNlLy4vc3JjL21vZHVsZXMvbG9jYWxTdG9yYWdlLmpzIiwid2VicGFjazovL3BvcHVwc21hcnQtcmVhY3QtcHJhY3RpY3VtLWZpcnN0LWNhc2UvLi9zcmMvbW9kdWxlcy90b2Rvcy5qcyIsIndlYnBhY2s6Ly9wb3B1cHNtYXJ0LXJlYWN0LXByYWN0aWN1bS1maXJzdC1jYXNlLy4vc3JjL21vZHVsZXMvVUkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgYWNjb3VudCA9IChmdW5jdGlvbiAoKSB7XG4gICAgbGV0IHRvZG9zID0gW107XG4gICAgbGV0IHVzZXJuYW1lO1xuICAgIGxldCBpZDtcbiAgICBsZXQgZGFya01vZGUgPSBmYWxzZTtcbiAgICBjb25zdCBzZXRBY2NvdW50UHJvcGVydGllcyA9IGFzeW5jIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICB0aGlzLnRvZG9zID0gZGF0YS50b2RvcztcbiAgICAgICAgICAgIHRoaXMudXNlcm5hbWUgPSBkYXRhLnVzZXJuYW1lO1xuICAgICAgICAgICAgdGhpcy5pZCA9IGRhdGEuaWQ7XG4gICAgICAgICAgICByZXR1cm4gZGF0YS50b2RvcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudG9kb3MgPSBbXTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCBnZXRVc2VyRGF0YSA9IGFzeW5jIGZ1bmN0aW9uICh1c2VybmFtZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcbiAgICAgICAgICAgICAgICBgaHR0cHM6Ly82MzI0OTgwNjZmN2E3NWY4Yjc5NWM1ZmEubW9ja2FwaS5pby90b2Rvcz91c2VybmFtZT0ke3VzZXJuYW1lfWAsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnQ29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9VVRGLTgnLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBtb2RlOiAnY29ycycsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgLy8gYmVjYXVzZSBtb2NrIGFwaSBmaWx0ZXIgcmV0dXJucyBhcnJheVxuICAgICAgICAgICAgY29uc3QgZGF0YUFyciA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBkYXRhQXJyWzBdO1xuXG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCB1cGRhdGVVc2VyVG9kb3MgPSBmdW5jdGlvbiAodXNlcm5hbWUsIHVzZXJUb2RvcywgdXNlcklEKSB7XG4gICAgICAgIGNvbnN0IHVzZXJEYXRhID0ge1xuICAgICAgICAgICAgdXNlcm5hbWUsXG4gICAgICAgICAgICB0b2RvczogdXNlclRvZG9zLFxuICAgICAgICB9O1xuXG4gICAgICAgIGZldGNoKGBodHRwczovLzYzMjQ5ODA2NmY3YTc1ZjhiNzk1YzVmYS5tb2NrYXBpLmlvL3RvZG9zLyR7dXNlcklEfWAsIHtcbiAgICAgICAgICAgIG1ldGhvZDogJ1BVVCcsXG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PVVURi04JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtb2RlOiAnY29ycycsXG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh1c2VyRGF0YSksXG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBjb25zdCBhZGROZXdBY2NvdW50ID0gYXN5bmMgZnVuY3Rpb24gKHVzZXJuYW1lKSB7XG4gICAgICAgIGNvbnN0IHVzZXJEYXRhID0ge1xuICAgICAgICAgICAgdXNlcm5hbWUsXG4gICAgICAgICAgICB0b2RvczogW10sXG4gICAgICAgIH07XG5cbiAgICAgICAgYXdhaXQgZmV0Y2goYGh0dHBzOi8vNjMyNDk4MDY2ZjdhNzVmOGI3OTVjNWZhLm1vY2thcGkuaW8vdG9kb3NgLCB7XG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAnQ29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9VVRGLTgnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1vZGU6ICdjb3JzJyxcbiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHVzZXJEYXRhKSxcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIGNvbnN0IGRlbGV0ZVVzZXJUb2RvID0gZnVuY3Rpb24gKHVzZXJUb2RvcywgdG9kb0NvbnRlbnQpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB1c2VyVG9kb3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh1c2VyVG9kb3NbaV0uY29udGVudCA9PT0gdG9kb0NvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICB1c2VyVG9kb3Muc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHVzZXJUb2RvcztcbiAgICB9O1xuXG4gICAgY29uc3Qgc3dpdGNoQ29tcGxldGVVc2VyVG9kbyA9IGZ1bmN0aW9uICh1c2VyVG9kb3MsIHRvZG9Db250ZW50KSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdXNlclRvZG9zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAodXNlclRvZG9zW2ldLmNvbnRlbnQgPT09IHRvZG9Db250ZW50KSB7XG4gICAgICAgICAgICAgICAgdXNlclRvZG9zW2ldLmlzQ29tcGxldGVkID0gdXNlclRvZG9zW2ldLmlzQ29tcGxldGVkXG4gICAgICAgICAgICAgICAgICAgID8gZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgOiB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1c2VyVG9kb3M7XG4gICAgfTtcblxuICAgIGNvbnN0IGdldFRvZG9EYXRlID0gZnVuY3Rpb24gKGNvbnRlbnQsIHVzZXJUb2Rvcykge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHVzZXJUb2Rvcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHVzZXJUb2Rvc1tpXS5jb250ZW50ID09PSBjb250ZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVzZXJUb2Rvc1tpXS5kYXRlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIGNvbnN0IFRvZG8gPSBmdW5jdGlvbiAoY29udGVudCwgZGF0ZSkge1xuICAgICAgICByZXR1cm4geyBjb250ZW50LCBpc0NvbXBsZXRlZDogZmFsc2UsIGRhdGUgfTtcbiAgICB9O1xuXG4gICAgY29uc3QgZWRpdFVzZXJUb2RvID0gZnVuY3Rpb24gKFxuICAgICAgICB1c2VyVG9kb3MsXG4gICAgICAgIGNvbnRlbnQsXG4gICAgICAgIHVwZGF0ZWRDb250ZW50LFxuICAgICAgICB1cGRhdGVkRGF0ZVxuICAgICkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHVzZXJUb2Rvcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHVzZXJUb2Rvc1tpXS5jb250ZW50ID09PSBjb250ZW50KSB7XG4gICAgICAgICAgICAgICAgdXNlclRvZG9zW2ldLmNvbnRlbnQgPSB1cGRhdGVkQ29udGVudDtcbiAgICAgICAgICAgICAgICB1c2VyVG9kb3NbaV0uZGF0ZSA9IHVwZGF0ZWREYXRlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIHNldEFjY291bnRQcm9wZXJ0aWVzLFxuICAgICAgICBnZXRVc2VyRGF0YSxcbiAgICAgICAgZGVsZXRlVXNlclRvZG8sXG4gICAgICAgIHVwZGF0ZVVzZXJUb2RvcyxcbiAgICAgICAgc3dpdGNoQ29tcGxldGVVc2VyVG9kbyxcbiAgICAgICAgZWRpdFVzZXJUb2RvLFxuICAgICAgICBnZXRUb2RvRGF0ZSxcbiAgICAgICAgYWRkTmV3QWNjb3VudCxcbiAgICAgICAgVG9kbyxcbiAgICAgICAgdG9kb3MsXG4gICAgICAgIHVzZXJuYW1lLFxuICAgICAgICBpZCxcbiAgICAgICAgZGFya01vZGUsXG4gICAgfTtcbn0pKCk7XG5cbmV4cG9ydCBkZWZhdWx0IGFjY291bnQ7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZXF1aXJlZEFyZ3MocmVxdWlyZWQsIGFyZ3MpIHtcbiAgaWYgKGFyZ3MubGVuZ3RoIDwgcmVxdWlyZWQpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHJlcXVpcmVkICsgJyBhcmd1bWVudCcgKyAocmVxdWlyZWQgPiAxID8gJ3MnIDogJycpICsgJyByZXF1aXJlZCwgYnV0IG9ubHkgJyArIGFyZ3MubGVuZ3RoICsgJyBwcmVzZW50Jyk7XG4gIH1cbn0iLCJmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGlzRGF0ZVxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBJcyB0aGUgZ2l2ZW4gdmFsdWUgYSBkYXRlP1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBhbiBpbnN0YW5jZSBvZiBEYXRlLiBUaGUgZnVuY3Rpb24gd29ya3MgZm9yIGRhdGVzIHRyYW5zZmVycmVkIGFjcm9zcyBpZnJhbWVzLlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgLSB0aGUgdmFsdWUgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBhIGRhdGVcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIGEgdmFsaWQgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzRGF0ZShuZXcgRGF0ZSgpKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciBhbiBpbnZhbGlkIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc0RhdGUobmV3IERhdGUoTmFOKSlcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3Igc29tZSB2YWx1ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzRGF0ZSgnMjAxNC0wMi0zMScpXG4gKiAvLz0+IGZhbHNlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciBhbiBvYmplY3Q6XG4gKiBjb25zdCByZXN1bHQgPSBpc0RhdGUoe30pXG4gKiAvLz0+IGZhbHNlXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNEYXRlKHZhbHVlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBEYXRlIHx8IF90eXBlb2YodmFsdWUpID09PSAnb2JqZWN0JyAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBEYXRlXSc7XG59IiwiZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSB0b0RhdGVcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgQ29udmVydCB0aGUgZ2l2ZW4gYXJndW1lbnQgdG8gYW4gaW5zdGFuY2Ugb2YgRGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvbnZlcnQgdGhlIGdpdmVuIGFyZ3VtZW50IHRvIGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIGFuIGluc3RhbmNlIG9mIERhdGUsIHRoZSBmdW5jdGlvbiByZXR1cm5zIGl0cyBjbG9uZS5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgYSBudW1iZXIsIGl0IGlzIHRyZWF0ZWQgYXMgYSB0aW1lc3RhbXAuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIG5vbmUgb2YgdGhlIGFib3ZlLCB0aGUgZnVuY3Rpb24gcmV0dXJucyBJbnZhbGlkIERhdGUuXG4gKlxuICogKipOb3RlKio6ICphbGwqIERhdGUgYXJndW1lbnRzIHBhc3NlZCB0byBhbnkgKmRhdGUtZm5zKiBmdW5jdGlvbiBpcyBwcm9jZXNzZWQgYnkgYHRvRGF0ZWAuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gYXJndW1lbnQgLSB0aGUgdmFsdWUgdG8gY29udmVydFxuICogQHJldHVybnMge0RhdGV9IHRoZSBwYXJzZWQgZGF0ZSBpbiB0aGUgbG9jYWwgdGltZSB6b25lXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ2xvbmUgdGhlIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSB0b0RhdGUobmV3IERhdGUoMjAxNCwgMSwgMTEsIDExLCAzMCwgMzApKVxuICogLy89PiBUdWUgRmViIDExIDIwMTQgMTE6MzA6MzBcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ29udmVydCB0aGUgdGltZXN0YW1wIHRvIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSB0b0RhdGUoMTM5MjA5ODQzMDAwMClcbiAqIC8vPT4gVHVlIEZlYiAxMSAyMDE0IDExOjMwOjMwXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9EYXRlKGFyZ3VtZW50KSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgYXJnU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZ3VtZW50KTsgLy8gQ2xvbmUgdGhlIGRhdGVcblxuICBpZiAoYXJndW1lbnQgaW5zdGFuY2VvZiBEYXRlIHx8IF90eXBlb2YoYXJndW1lbnQpID09PSAnb2JqZWN0JyAmJiBhcmdTdHIgPT09ICdbb2JqZWN0IERhdGVdJykge1xuICAgIC8vIFByZXZlbnQgdGhlIGRhdGUgdG8gbG9zZSB0aGUgbWlsbGlzZWNvbmRzIHdoZW4gcGFzc2VkIHRvIG5ldyBEYXRlKCkgaW4gSUUxMFxuICAgIHJldHVybiBuZXcgRGF0ZShhcmd1bWVudC5nZXRUaW1lKCkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBhcmd1bWVudCA9PT0gJ251bWJlcicgfHwgYXJnU3RyID09PSAnW29iamVjdCBOdW1iZXJdJykge1xuICAgIHJldHVybiBuZXcgRGF0ZShhcmd1bWVudCk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCh0eXBlb2YgYXJndW1lbnQgPT09ICdzdHJpbmcnIHx8IGFyZ1N0ciA9PT0gJ1tvYmplY3QgU3RyaW5nXScpICYmIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybihcIlN0YXJ0aW5nIHdpdGggdjIuMC4wLWJldGEuMSBkYXRlLWZucyBkb2Vzbid0IGFjY2VwdCBzdHJpbmdzIGFzIGRhdGUgYXJndW1lbnRzLiBQbGVhc2UgdXNlIGBwYXJzZUlTT2AgdG8gcGFyc2Ugc3RyaW5ncy4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjc3RyaW5nLWFyZ3VtZW50c1wiKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcblxuICAgICAgY29uc29sZS53YXJuKG5ldyBFcnJvcigpLnN0YWNrKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgfVxufSIsImltcG9ydCBpc0RhdGUgZnJvbSBcIi4uL2lzRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBpc1ZhbGlkXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IElzIHRoZSBnaXZlbiBkYXRlIHZhbGlkP1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJucyBmYWxzZSBpZiBhcmd1bWVudCBpcyBJbnZhbGlkIERhdGUgYW5kIHRydWUgb3RoZXJ3aXNlLlxuICogQXJndW1lbnQgaXMgY29udmVydGVkIHRvIERhdGUgdXNpbmcgYHRvRGF0ZWAuIFNlZSBbdG9EYXRlXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL3RvRGF0ZX1cbiAqIEludmFsaWQgRGF0ZSBpcyBhIERhdGUsIHdob3NlIHRpbWUgdmFsdWUgaXMgTmFOLlxuICpcbiAqIFRpbWUgdmFsdWUgb2YgRGF0ZTogaHR0cDovL2VzNS5naXRodWIuaW8vI3gxNS45LjEuMVxuICpcbiAqIEBwYXJhbSB7Kn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gdGhlIGRhdGUgaXMgdmFsaWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgdGhlIHZhbGlkIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc1ZhbGlkKG5ldyBEYXRlKDIwMTQsIDEsIDMxKSlcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgdGhlIHZhbHVlLCBjb252ZXJ0YWJsZSBpbnRvIGEgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzVmFsaWQoMTM5MzgwNDgwMDAwMClcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgdGhlIGludmFsaWQgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzVmFsaWQobmV3IERhdGUoJycpKVxuICogLy89PiBmYWxzZVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzVmFsaWQoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuXG4gIGlmICghaXNEYXRlKGRpcnR5RGF0ZSkgJiYgdHlwZW9mIGRpcnR5RGF0ZSAhPT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICByZXR1cm4gIWlzTmFOKE51bWJlcihkYXRlKSk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9JbnRlZ2VyKGRpcnR5TnVtYmVyKSB7XG4gIGlmIChkaXJ0eU51bWJlciA9PT0gbnVsbCB8fCBkaXJ0eU51bWJlciA9PT0gdHJ1ZSB8fCBkaXJ0eU51bWJlciA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gTmFOO1xuICB9XG5cbiAgdmFyIG51bWJlciA9IE51bWJlcihkaXJ0eU51bWJlcik7XG5cbiAgaWYgKGlzTmFOKG51bWJlcikpIHtcbiAgICByZXR1cm4gbnVtYmVyO1xuICB9XG5cbiAgcmV0dXJuIG51bWJlciA8IDAgPyBNYXRoLmNlaWwobnVtYmVyKSA6IE1hdGguZmxvb3IobnVtYmVyKTtcbn0iLCJpbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBhZGRNaWxsaXNlY29uZHNcbiAqIEBjYXRlZ29yeSBNaWxsaXNlY29uZCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBBZGQgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gYmUgY2hhbmdlZFxuICogQHBhcmFtIHtOdW1iZXJ9IGFtb3VudCAtIHRoZSBhbW91bnQgb2YgbWlsbGlzZWNvbmRzIHRvIGJlIGFkZGVkLiBQb3NpdGl2ZSBkZWNpbWFscyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguZmxvb3JgLCBkZWNpbWFscyBsZXNzIHRoYW4gemVybyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguY2VpbGAuXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIG5ldyBkYXRlIHdpdGggdGhlIG1pbGxpc2Vjb25kcyBhZGRlZFxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBBZGQgNzUwIG1pbGxpc2Vjb25kcyB0byAxMCBKdWx5IDIwMTQgMTI6NDU6MzAuMDAwOlxuICogY29uc3QgcmVzdWx0ID0gYWRkTWlsbGlzZWNvbmRzKG5ldyBEYXRlKDIwMTQsIDYsIDEwLCAxMiwgNDUsIDMwLCAwKSwgNzUwKVxuICogLy89PiBUaHUgSnVsIDEwIDIwMTQgMTI6NDU6MzAuNzUwXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkTWlsbGlzZWNvbmRzKGRpcnR5RGF0ZSwgZGlydHlBbW91bnQpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciB0aW1lc3RhbXAgPSB0b0RhdGUoZGlydHlEYXRlKS5nZXRUaW1lKCk7XG4gIHZhciBhbW91bnQgPSB0b0ludGVnZXIoZGlydHlBbW91bnQpO1xuICByZXR1cm4gbmV3IERhdGUodGltZXN0YW1wICsgYW1vdW50KTtcbn0iLCJpbXBvcnQgYWRkTWlsbGlzZWNvbmRzIGZyb20gXCIuLi9hZGRNaWxsaXNlY29uZHMvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBzdWJNaWxsaXNlY29uZHNcbiAqIEBjYXRlZ29yeSBNaWxsaXNlY29uZCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBTdWJ0cmFjdCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtaWxsaXNlY29uZHMgZnJvbSB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFN1YnRyYWN0IHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBmcm9tIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB0byBiZSBjaGFuZ2VkXG4gKiBAcGFyYW0ge051bWJlcn0gYW1vdW50IC0gdGhlIGFtb3VudCBvZiBtaWxsaXNlY29uZHMgdG8gYmUgc3VidHJhY3RlZC4gUG9zaXRpdmUgZGVjaW1hbHMgd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmZsb29yYCwgZGVjaW1hbHMgbGVzcyB0aGFuIHplcm8gd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmNlaWxgLlxuICogQHJldHVybnMge0RhdGV9IHRoZSBuZXcgZGF0ZSB3aXRoIHRoZSBtaWxsaXNlY29uZHMgc3VidHJhY3RlZFxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBTdWJ0cmFjdCA3NTAgbWlsbGlzZWNvbmRzIGZyb20gMTAgSnVseSAyMDE0IDEyOjQ1OjMwLjAwMDpcbiAqIGNvbnN0IHJlc3VsdCA9IHN1Yk1pbGxpc2Vjb25kcyhuZXcgRGF0ZSgyMDE0LCA2LCAxMCwgMTIsIDQ1LCAzMCwgMCksIDc1MClcbiAqIC8vPT4gVGh1IEp1bCAxMCAyMDE0IDEyOjQ1OjI5LjI1MFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN1Yk1pbGxpc2Vjb25kcyhkaXJ0eURhdGUsIGRpcnR5QW1vdW50KSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgYW1vdW50ID0gdG9JbnRlZ2VyKGRpcnR5QW1vdW50KTtcbiAgcmV0dXJuIGFkZE1pbGxpc2Vjb25kcyhkaXJ0eURhdGUsIC1hbW91bnQpO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG52YXIgTUlMTElTRUNPTkRTX0lOX0RBWSA9IDg2NDAwMDAwO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDRGF5T2ZZZWFyKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIHRpbWVzdGFtcCA9IGRhdGUuZ2V0VGltZSgpO1xuICBkYXRlLnNldFVUQ01vbnRoKDAsIDEpO1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZlllYXJUaW1lc3RhbXAgPSBkYXRlLmdldFRpbWUoKTtcbiAgdmFyIGRpZmZlcmVuY2UgPSB0aW1lc3RhbXAgLSBzdGFydE9mWWVhclRpbWVzdGFtcDtcbiAgcmV0dXJuIE1hdGguZmxvb3IoZGlmZmVyZW5jZSAvIE1JTExJU0VDT05EU19JTl9EQVkpICsgMTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZlVUQ0lTT1dlZWsoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgd2Vla1N0YXJ0c09uID0gMTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRheSA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gIHZhciBkaWZmID0gKGRheSA8IHdlZWtTdGFydHNPbiA/IDcgOiAwKSArIGRheSAtIHdlZWtTdGFydHNPbjtcbiAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpIC0gZGlmZik7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ0lTT1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENJU09XZWVrWWVhcihkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciB5ZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICB2YXIgZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhciA9IG5ldyBEYXRlKDApO1xuICBmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyLnNldFVUQ0Z1bGxZZWFyKHllYXIgKyAxLCAwLCA0KTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhci5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZOZXh0WWVhciA9IHN0YXJ0T2ZVVENJU09XZWVrKGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIpO1xuICB2YXIgZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhciA9IG5ldyBEYXRlKDApO1xuICBmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyLnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIDQpO1xuICBmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZlRoaXNZZWFyID0gc3RhcnRPZlVUQ0lTT1dlZWsoZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhcik7XG5cbiAgaWYgKGRhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZOZXh0WWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhciArIDE7XG4gIH0gZWxzZSBpZiAoZGF0ZS5nZXRUaW1lKCkgPj0gc3RhcnRPZlRoaXNZZWFyLmdldFRpbWUoKSkge1xuICAgIHJldHVybiB5ZWFyO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB5ZWFyIC0gMTtcbiAgfVxufSIsImltcG9ydCBnZXRVVENJU09XZWVrWWVhciBmcm9tIFwiLi4vZ2V0VVRDSVNPV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDSVNPV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ0lTT1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZlVUQ0lTT1dlZWtZZWFyKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIHllYXIgPSBnZXRVVENJU09XZWVrWWVhcihkaXJ0eURhdGUpO1xuICB2YXIgZm91cnRoT2ZKYW51YXJ5ID0gbmV3IERhdGUoMCk7XG4gIGZvdXJ0aE9mSmFudWFyeS5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCA0KTtcbiAgZm91cnRoT2ZKYW51YXJ5LnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgZGF0ZSA9IHN0YXJ0T2ZVVENJU09XZWVrKGZvdXJ0aE9mSmFudWFyeSk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDSVNPV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrWWVhciBmcm9tIFwiLi4vc3RhcnRPZlVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbnZhciBNSUxMSVNFQ09ORFNfSU5fV0VFSyA9IDYwNDgwMDAwMDtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVUQ0lTT1dlZWsoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGlmZiA9IHN0YXJ0T2ZVVENJU09XZWVrKGRhdGUpLmdldFRpbWUoKSAtIHN0YXJ0T2ZVVENJU09XZWVrWWVhcihkYXRlKS5nZXRUaW1lKCk7IC8vIFJvdW5kIHRoZSBudW1iZXIgb2YgZGF5cyB0byB0aGUgbmVhcmVzdCBpbnRlZ2VyXG4gIC8vIGJlY2F1c2UgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaW4gYSB3ZWVrIGlzIG5vdCBjb25zdGFudFxuICAvLyAoZS5nLiBpdCdzIGRpZmZlcmVudCBpbiB0aGUgd2VlayBvZiB0aGUgZGF5bGlnaHQgc2F2aW5nIHRpbWUgY2xvY2sgc2hpZnQpXG5cbiAgcmV0dXJuIE1hdGgucm91bmQoZGlmZiAvIE1JTExJU0VDT05EU19JTl9XRUVLKSArIDE7XG59IiwidmFyIGRlZmF1bHRPcHRpb25zID0ge307XG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVmYXVsdE9wdGlvbnMoKSB7XG4gIHJldHVybiBkZWZhdWx0T3B0aW9ucztcbn1cbmV4cG9ydCBmdW5jdGlvbiBzZXREZWZhdWx0T3B0aW9ucyhuZXdPcHRpb25zKSB7XG4gIGRlZmF1bHRPcHRpb25zID0gbmV3T3B0aW9ucztcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBnZXREZWZhdWx0T3B0aW9ucyB9IGZyb20gXCIuLi9kZWZhdWx0T3B0aW9ucy9pbmRleC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZlVUQ1dlZWsoZGlydHlEYXRlLCBvcHRpb25zKSB7XG4gIHZhciBfcmVmLCBfcmVmMiwgX3JlZjMsIF9vcHRpb25zJHdlZWtTdGFydHNPbiwgX29wdGlvbnMkbG9jYWxlLCBfb3B0aW9ucyRsb2NhbGUkb3B0aW8sIF9kZWZhdWx0T3B0aW9ucyRsb2NhbCwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMjtcblxuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRlZmF1bHRPcHRpb25zID0gZ2V0RGVmYXVsdE9wdGlvbnMoKTtcbiAgdmFyIHdlZWtTdGFydHNPbiA9IHRvSW50ZWdlcigoX3JlZiA9IChfcmVmMiA9IChfcmVmMyA9IChfb3B0aW9ucyR3ZWVrU3RhcnRzT24gPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMud2Vla1N0YXJ0c09uKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyR3ZWVrU3RhcnRzT24gIT09IHZvaWQgMCA/IF9vcHRpb25zJHdlZWtTdGFydHNPbiA6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfb3B0aW9ucyRsb2NhbGUkb3B0aW8gPSBfb3B0aW9ucyRsb2NhbGUub3B0aW9ucykgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlJG9wdGlvID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfb3B0aW9ucyRsb2NhbGUkb3B0aW8ud2Vla1N0YXJ0c09uKSAhPT0gbnVsbCAmJiBfcmVmMyAhPT0gdm9pZCAwID8gX3JlZjMgOiBkZWZhdWx0T3B0aW9ucy53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9yZWYyICE9PSB2b2lkIDAgPyBfcmVmMiA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWwgPSBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIgPSBfZGVmYXVsdE9wdGlvbnMkbG9jYWwub3B0aW9ucykgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2RlZmF1bHRPcHRpb25zJGxvY2FsMi53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9yZWYgIT09IHZvaWQgMCA/IF9yZWYgOiAwKTsgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAwIGFuZCA2IF9hbmRfIGlzIG5vdCBOYU5cblxuICBpZiAoISh3ZWVrU3RhcnRzT24gPj0gMCAmJiB3ZWVrU3RhcnRzT24gPD0gNikpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignd2Vla1N0YXJ0c09uIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA2IGluY2x1c2l2ZWx5Jyk7XG4gIH1cblxuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGF5ID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgdmFyIGRpZmYgPSAoZGF5IDwgd2Vla1N0YXJ0c09uID8gNyA6IDApICsgZGF5IC0gd2Vla1N0YXJ0c09uO1xuICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgLSBkaWZmKTtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tIFwiLi4vZGVmYXVsdE9wdGlvbnMvaW5kZXguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVUQ1dlZWtZZWFyKGRpcnR5RGF0ZSwgb3B0aW9ucykge1xuICB2YXIgX3JlZiwgX3JlZjIsIF9yZWYzLCBfb3B0aW9ucyRmaXJzdFdlZWtDb24sIF9vcHRpb25zJGxvY2FsZSwgX29wdGlvbnMkbG9jYWxlJG9wdGlvLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwsIF9kZWZhdWx0T3B0aW9ucyRsb2NhbDI7XG5cbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciB5ZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICB2YXIgZGVmYXVsdE9wdGlvbnMgPSBnZXREZWZhdWx0T3B0aW9ucygpO1xuICB2YXIgZmlyc3RXZWVrQ29udGFpbnNEYXRlID0gdG9JbnRlZ2VyKChfcmVmID0gKF9yZWYyID0gKF9yZWYzID0gKF9vcHRpb25zJGZpcnN0V2Vla0NvbiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9vcHRpb25zJGZpcnN0V2Vla0NvbiAhPT0gdm9pZCAwID8gX29wdGlvbnMkZmlyc3RXZWVrQ29uIDogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlID0gb3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9vcHRpb25zJGxvY2FsZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZSRvcHRpbyA9IF9vcHRpb25zJGxvY2FsZS5vcHRpb25zKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUkb3B0aW8gPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRpb25zJGxvY2FsZSRvcHRpby5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYzICE9PSB2b2lkIDAgPyBfcmVmMyA6IGRlZmF1bHRPcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZjIgIT09IHZvaWQgMCA/IF9yZWYyIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9IGRlZmF1bHRPcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9IF9kZWZhdWx0T3B0aW9ucyRsb2NhbC5vcHRpb25zKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZiAhPT0gdm9pZCAwID8gX3JlZiA6IDEpOyAvLyBUZXN0IGlmIHdlZWtTdGFydHNPbiBpcyBiZXR3ZWVuIDEgYW5kIDcgX2FuZF8gaXMgbm90IE5hTlxuXG4gIGlmICghKGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA+PSAxICYmIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA8PSA3KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdmaXJzdFdlZWtDb250YWluc0RhdGUgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDcgaW5jbHVzaXZlbHknKTtcbiAgfVxuXG4gIHZhciBmaXJzdFdlZWtPZk5leHRZZWFyID0gbmV3IERhdGUoMCk7XG4gIGZpcnN0V2Vla09mTmV4dFllYXIuc2V0VVRDRnVsbFllYXIoeWVhciArIDEsIDAsIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIGZpcnN0V2Vla09mTmV4dFllYXIuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mTmV4dFllYXIgPSBzdGFydE9mVVRDV2VlayhmaXJzdFdlZWtPZk5leHRZZWFyLCBvcHRpb25zKTtcbiAgdmFyIGZpcnN0V2Vla09mVGhpc1llYXIgPSBuZXcgRGF0ZSgwKTtcbiAgZmlyc3RXZWVrT2ZUaGlzWWVhci5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCBmaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICBmaXJzdFdlZWtPZlRoaXNZZWFyLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZlRoaXNZZWFyID0gc3RhcnRPZlVUQ1dlZWsoZmlyc3RXZWVrT2ZUaGlzWWVhciwgb3B0aW9ucyk7XG5cbiAgaWYgKGRhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZOZXh0WWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhciArIDE7XG4gIH0gZWxzZSBpZiAoZGF0ZS5nZXRUaW1lKCkgPj0gc3RhcnRPZlRoaXNZZWFyLmdldFRpbWUoKSkge1xuICAgIHJldHVybiB5ZWFyO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB5ZWFyIC0gMTtcbiAgfVxufSIsImltcG9ydCBnZXRVVENXZWVrWWVhciBmcm9tIFwiLi4vZ2V0VVRDV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENXZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBnZXREZWZhdWx0T3B0aW9ucyB9IGZyb20gXCIuLi9kZWZhdWx0T3B0aW9ucy9pbmRleC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZlVUQ1dlZWtZZWFyKGRpcnR5RGF0ZSwgb3B0aW9ucykge1xuICB2YXIgX3JlZiwgX3JlZjIsIF9yZWYzLCBfb3B0aW9ucyRmaXJzdFdlZWtDb24sIF9vcHRpb25zJGxvY2FsZSwgX29wdGlvbnMkbG9jYWxlJG9wdGlvLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwsIF9kZWZhdWx0T3B0aW9ucyRsb2NhbDI7XG5cbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkZWZhdWx0T3B0aW9ucyA9IGdldERlZmF1bHRPcHRpb25zKCk7XG4gIHZhciBmaXJzdFdlZWtDb250YWluc0RhdGUgPSB0b0ludGVnZXIoKF9yZWYgPSAoX3JlZjIgPSAoX3JlZjMgPSAoX29wdGlvbnMkZmlyc3RXZWVrQ29uID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX29wdGlvbnMkZmlyc3RXZWVrQ29uICE9PSB2b2lkIDAgPyBfb3B0aW9ucyRmaXJzdFdlZWtDb24gOiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfb3B0aW9ucyRsb2NhbGUgPSBvcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlJG9wdGlvID0gX29wdGlvbnMkbG9jYWxlLm9wdGlvbnMpID09PSBudWxsIHx8IF9vcHRpb25zJGxvY2FsZSRvcHRpbyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX29wdGlvbnMkbG9jYWxlJG9wdGlvLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZjMgIT09IHZvaWQgMCA/IF9yZWYzIDogZGVmYXVsdE9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfcmVmMiAhPT0gdm9pZCAwID8gX3JlZjIgOiAoX2RlZmF1bHRPcHRpb25zJGxvY2FsID0gZGVmYXVsdE9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWwyID0gX2RlZmF1bHRPcHRpb25zJGxvY2FsLm9wdGlvbnMpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIuZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfcmVmICE9PSB2b2lkIDAgPyBfcmVmIDogMSk7XG4gIHZhciB5ZWFyID0gZ2V0VVRDV2Vla1llYXIoZGlydHlEYXRlLCBvcHRpb25zKTtcbiAgdmFyIGZpcnN0V2VlayA9IG5ldyBEYXRlKDApO1xuICBmaXJzdFdlZWsuc2V0VVRDRnVsbFllYXIoeWVhciwgMCwgZmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgZmlyc3RXZWVrLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgZGF0ZSA9IHN0YXJ0T2ZVVENXZWVrKGZpcnN0V2Vlaywgb3B0aW9ucyk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENXZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENXZWVrWWVhciBmcm9tIFwiLi4vc3RhcnRPZlVUQ1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbnZhciBNSUxMSVNFQ09ORFNfSU5fV0VFSyA9IDYwNDgwMDAwMDtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVUQ1dlZWsoZGlydHlEYXRlLCBvcHRpb25zKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGlmZiA9IHN0YXJ0T2ZVVENXZWVrKGRhdGUsIG9wdGlvbnMpLmdldFRpbWUoKSAtIHN0YXJ0T2ZVVENXZWVrWWVhcihkYXRlLCBvcHRpb25zKS5nZXRUaW1lKCk7IC8vIFJvdW5kIHRoZSBudW1iZXIgb2YgZGF5cyB0byB0aGUgbmVhcmVzdCBpbnRlZ2VyXG4gIC8vIGJlY2F1c2UgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaW4gYSB3ZWVrIGlzIG5vdCBjb25zdGFudFxuICAvLyAoZS5nLiBpdCdzIGRpZmZlcmVudCBpbiB0aGUgd2VlayBvZiB0aGUgZGF5bGlnaHQgc2F2aW5nIHRpbWUgY2xvY2sgc2hpZnQpXG5cbiAgcmV0dXJuIE1hdGgucm91bmQoZGlmZiAvIE1JTExJU0VDT05EU19JTl9XRUVLKSArIDE7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkTGVhZGluZ1plcm9zKG51bWJlciwgdGFyZ2V0TGVuZ3RoKSB7XG4gIHZhciBzaWduID0gbnVtYmVyIDwgMCA/ICctJyA6ICcnO1xuICB2YXIgb3V0cHV0ID0gTWF0aC5hYnMobnVtYmVyKS50b1N0cmluZygpO1xuXG4gIHdoaWxlIChvdXRwdXQubGVuZ3RoIDwgdGFyZ2V0TGVuZ3RoKSB7XG4gICAgb3V0cHV0ID0gJzAnICsgb3V0cHV0O1xuICB9XG5cbiAgcmV0dXJuIHNpZ24gKyBvdXRwdXQ7XG59IiwiaW1wb3J0IGFkZExlYWRpbmdaZXJvcyBmcm9tIFwiLi4vLi4vYWRkTGVhZGluZ1plcm9zL2luZGV4LmpzXCI7XG4vKlxuICogfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCAgYSAgfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgfCAgQSogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgZCAgfCBEYXkgb2YgbW9udGggICAgICAgICAgICAgICAgICAgfCAgRCAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgaCAgfCBIb3VyIFsxLTEyXSAgICAgICAgICAgICAgICAgICAgfCAgSCAgfCBIb3VyIFswLTIzXSAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgbSAgfCBNaW51dGUgICAgICAgICAgICAgICAgICAgICAgICAgfCAgTSAgfCBNb250aCAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgcyAgfCBTZWNvbmQgICAgICAgICAgICAgICAgICAgICAgICAgfCAgUyAgfCBGcmFjdGlvbiBvZiBzZWNvbmQgICAgICAgICAgICAgfFxuICogfCAgeSAgfCBZZWFyIChhYnMpICAgICAgICAgICAgICAgICAgICAgfCAgWSAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICpcbiAqIExldHRlcnMgbWFya2VkIGJ5ICogYXJlIG5vdCBpbXBsZW1lbnRlZCBidXQgcmVzZXJ2ZWQgYnkgVW5pY29kZSBzdGFuZGFyZC5cbiAqL1xuXG52YXIgZm9ybWF0dGVycyA9IHtcbiAgLy8gWWVhclxuICB5OiBmdW5jdGlvbiB5KGRhdGUsIHRva2VuKSB7XG4gICAgLy8gRnJvbSBodHRwOi8vd3d3LnVuaWNvZGUub3JnL3JlcG9ydHMvdHIzNS90cjM1LTMxL3RyMzUtZGF0ZXMuaHRtbCNEYXRlX0Zvcm1hdF90b2tlbnNcbiAgICAvLyB8IFllYXIgICAgIHwgICAgIHkgfCB5eSB8ICAgeXl5IHwgIHl5eXkgfCB5eXl5eSB8XG4gICAgLy8gfC0tLS0tLS0tLS18LS0tLS0tLXwtLS0tfC0tLS0tLS18LS0tLS0tLXwtLS0tLS0tfFxuICAgIC8vIHwgQUQgMSAgICAgfCAgICAgMSB8IDAxIHwgICAwMDEgfCAgMDAwMSB8IDAwMDAxIHxcbiAgICAvLyB8IEFEIDEyICAgIHwgICAgMTIgfCAxMiB8ICAgMDEyIHwgIDAwMTIgfCAwMDAxMiB8XG4gICAgLy8gfCBBRCAxMjMgICB8ICAgMTIzIHwgMjMgfCAgIDEyMyB8ICAwMTIzIHwgMDAxMjMgfFxuICAgIC8vIHwgQUQgMTIzNCAgfCAgMTIzNCB8IDM0IHwgIDEyMzQgfCAgMTIzNCB8IDAxMjM0IHxcbiAgICAvLyB8IEFEIDEyMzQ1IHwgMTIzNDUgfCA0NSB8IDEyMzQ1IHwgMTIzNDUgfCAxMjM0NSB8XG4gICAgdmFyIHNpZ25lZFllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7IC8vIFJldHVybnMgMSBmb3IgMSBCQyAod2hpY2ggaXMgeWVhciAwIGluIEphdmFTY3JpcHQpXG5cbiAgICB2YXIgeWVhciA9IHNpZ25lZFllYXIgPiAwID8gc2lnbmVkWWVhciA6IDEgLSBzaWduZWRZZWFyO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModG9rZW4gPT09ICd5eScgPyB5ZWFyICUgMTAwIDogeWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gTW9udGhcbiAgTTogZnVuY3Rpb24gTShkYXRlLCB0b2tlbikge1xuICAgIHZhciBtb250aCA9IGRhdGUuZ2V0VVRDTW9udGgoKTtcbiAgICByZXR1cm4gdG9rZW4gPT09ICdNJyA/IFN0cmluZyhtb250aCArIDEpIDogYWRkTGVhZGluZ1plcm9zKG1vbnRoICsgMSwgMik7XG4gIH0sXG4gIC8vIERheSBvZiB0aGUgbW9udGhcbiAgZDogZnVuY3Rpb24gZChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENEYXRlKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEFNIG9yIFBNXG4gIGE6IGZ1bmN0aW9uIGEoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF0ZS5nZXRVVENIb3VycygpIC8gMTIgPj0gMSA/ICdwbScgOiAnYW0nO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnYSc6XG4gICAgICBjYXNlICdhYSc6XG4gICAgICAgIHJldHVybiBkYXlQZXJpb2RFbnVtVmFsdWUudG9VcHBlckNhc2UoKTtcblxuICAgICAgY2FzZSAnYWFhJzpcbiAgICAgICAgcmV0dXJuIGRheVBlcmlvZEVudW1WYWx1ZTtcblxuICAgICAgY2FzZSAnYWFhYWEnOlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlWzBdO1xuXG4gICAgICBjYXNlICdhYWFhJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBkYXlQZXJpb2RFbnVtVmFsdWUgPT09ICdhbScgPyAnYS5tLicgOiAncC5tLic7XG4gICAgfVxuICB9LFxuICAvLyBIb3VyIFsxLTEyXVxuICBoOiBmdW5jdGlvbiBoKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldFVUQ0hvdXJzKCkgJSAxMiB8fCAxMiwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gSG91ciBbMC0yM11cbiAgSDogZnVuY3Rpb24gSChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENIb3VycygpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBNaW51dGVcbiAgbTogZnVuY3Rpb24gbShkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENNaW51dGVzKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIFNlY29uZFxuICBzOiBmdW5jdGlvbiBzKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldFVUQ1NlY29uZHMoKSwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gRnJhY3Rpb24gb2Ygc2Vjb25kXG4gIFM6IGZ1bmN0aW9uIFMoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgbnVtYmVyT2ZEaWdpdHMgPSB0b2tlbi5sZW5ndGg7XG4gICAgdmFyIG1pbGxpc2Vjb25kcyA9IGRhdGUuZ2V0VVRDTWlsbGlzZWNvbmRzKCk7XG4gICAgdmFyIGZyYWN0aW9uYWxTZWNvbmRzID0gTWF0aC5mbG9vcihtaWxsaXNlY29uZHMgKiBNYXRoLnBvdygxMCwgbnVtYmVyT2ZEaWdpdHMgLSAzKSk7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhmcmFjdGlvbmFsU2Vjb25kcywgdG9rZW4ubGVuZ3RoKTtcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGZvcm1hdHRlcnM7IiwiaW1wb3J0IGdldFVUQ0RheU9mWWVhciBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENEYXlPZlllYXIvaW5kZXguanNcIjtcbmltcG9ydCBnZXRVVENJU09XZWVrIGZyb20gXCIuLi8uLi8uLi9fbGliL2dldFVUQ0lTT1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCBnZXRVVENJU09XZWVrWWVhciBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENJU09XZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFVUQ1dlZWsgZnJvbSBcIi4uLy4uLy4uL19saWIvZ2V0VVRDV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFVUQ1dlZWtZZWFyIGZyb20gXCIuLi8uLi8uLi9fbGliL2dldFVUQ1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgYWRkTGVhZGluZ1plcm9zIGZyb20gXCIuLi8uLi9hZGRMZWFkaW5nWmVyb3MvaW5kZXguanNcIjtcbmltcG9ydCBsaWdodEZvcm1hdHRlcnMgZnJvbSBcIi4uL2xpZ2h0Rm9ybWF0dGVycy9pbmRleC5qc1wiO1xudmFyIGRheVBlcmlvZEVudW0gPSB7XG4gIGFtOiAnYW0nLFxuICBwbTogJ3BtJyxcbiAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gIG5vb246ICdub29uJyxcbiAgbW9ybmluZzogJ21vcm5pbmcnLFxuICBhZnRlcm5vb246ICdhZnRlcm5vb24nLFxuICBldmVuaW5nOiAnZXZlbmluZycsXG4gIG5pZ2h0OiAnbmlnaHQnXG59O1xuXG4vKlxuICogfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCAgYSAgfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgfCAgQSogfCBNaWxsaXNlY29uZHMgaW4gZGF5ICAgICAgICAgICAgfFxuICogfCAgYiAgfCBBTSwgUE0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgfCAgQiAgfCBGbGV4aWJsZSBkYXkgcGVyaW9kICAgICAgICAgICAgfFxuICogfCAgYyAgfCBTdGFuZC1hbG9uZSBsb2NhbCBkYXkgb2Ygd2VlayAgfCAgQyogfCBMb2NhbGl6ZWQgaG91ciB3LyBkYXkgcGVyaW9kICAgfFxuICogfCAgZCAgfCBEYXkgb2YgbW9udGggICAgICAgICAgICAgICAgICAgfCAgRCAgfCBEYXkgb2YgeWVhciAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgZSAgfCBMb2NhbCBkYXkgb2Ygd2VlayAgICAgICAgICAgICAgfCAgRSAgfCBEYXkgb2Ygd2VlayAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgZiAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgRiogfCBEYXkgb2Ygd2VlayBpbiBtb250aCAgICAgICAgICAgfFxuICogfCAgZyogfCBNb2RpZmllZCBKdWxpYW4gZGF5ICAgICAgICAgICAgfCAgRyAgfCBFcmEgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgaCAgfCBIb3VyIFsxLTEyXSAgICAgICAgICAgICAgICAgICAgfCAgSCAgfCBIb3VyIFswLTIzXSAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgaSEgfCBJU08gZGF5IG9mIHdlZWsgICAgICAgICAgICAgICAgfCAgSSEgfCBJU08gd2VlayBvZiB5ZWFyICAgICAgICAgICAgICAgfFxuICogfCAgaiogfCBMb2NhbGl6ZWQgaG91ciB3LyBkYXkgcGVyaW9kICAgfCAgSiogfCBMb2NhbGl6ZWQgaG91ciB3L28gZGF5IHBlcmlvZCAgfFxuICogfCAgayAgfCBIb3VyIFsxLTI0XSAgICAgICAgICAgICAgICAgICAgfCAgSyAgfCBIb3VyIFswLTExXSAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgbCogfCAoZGVwcmVjYXRlZCkgICAgICAgICAgICAgICAgICAgfCAgTCAgfCBTdGFuZC1hbG9uZSBtb250aCAgICAgICAgICAgICAgfFxuICogfCAgbSAgfCBNaW51dGUgICAgICAgICAgICAgICAgICAgICAgICAgfCAgTSAgfCBNb250aCAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgbiAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgTiAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgbyEgfCBPcmRpbmFsIG51bWJlciBtb2RpZmllciAgICAgICAgfCAgTyAgfCBUaW1lem9uZSAoR01UKSAgICAgICAgICAgICAgICAgfFxuICogfCAgcCEgfCBMb25nIGxvY2FsaXplZCB0aW1lICAgICAgICAgICAgfCAgUCEgfCBMb25nIGxvY2FsaXplZCBkYXRlICAgICAgICAgICAgfFxuICogfCAgcSAgfCBTdGFuZC1hbG9uZSBxdWFydGVyICAgICAgICAgICAgfCAgUSAgfCBRdWFydGVyICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgciogfCBSZWxhdGVkIEdyZWdvcmlhbiB5ZWFyICAgICAgICAgfCAgUiEgfCBJU08gd2Vlay1udW1iZXJpbmcgeWVhciAgICAgICAgfFxuICogfCAgcyAgfCBTZWNvbmQgICAgICAgICAgICAgICAgICAgICAgICAgfCAgUyAgfCBGcmFjdGlvbiBvZiBzZWNvbmQgICAgICAgICAgICAgfFxuICogfCAgdCEgfCBTZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgICAgICAgfCAgVCEgfCBNaWxsaXNlY29uZHMgdGltZXN0YW1wICAgICAgICAgfFxuICogfCAgdSAgfCBFeHRlbmRlZCB5ZWFyICAgICAgICAgICAgICAgICAgfCAgVSogfCBDeWNsaWMgeWVhciAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgdiogfCBUaW1lem9uZSAoZ2VuZXJpYyBub24tbG9jYXQuKSAgfCAgViogfCBUaW1lem9uZSAobG9jYXRpb24pICAgICAgICAgICAgfFxuICogfCAgdyAgfCBMb2NhbCB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgfCAgVyogfCBXZWVrIG9mIG1vbnRoICAgICAgICAgICAgICAgICAgfFxuICogfCAgeCAgfCBUaW1lem9uZSAoSVNPLTg2MDEgdy9vIFopICAgICAgfCAgWCAgfCBUaW1lem9uZSAoSVNPLTg2MDEpICAgICAgICAgICAgfFxuICogfCAgeSAgfCBZZWFyIChhYnMpICAgICAgICAgICAgICAgICAgICAgfCAgWSAgfCBMb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgfFxuICogfCAgeiAgfCBUaW1lem9uZSAoc3BlY2lmaWMgbm9uLWxvY2F0LikgfCAgWiogfCBUaW1lem9uZSAoYWxpYXNlcykgICAgICAgICAgICAgfFxuICpcbiAqIExldHRlcnMgbWFya2VkIGJ5ICogYXJlIG5vdCBpbXBsZW1lbnRlZCBidXQgcmVzZXJ2ZWQgYnkgVW5pY29kZSBzdGFuZGFyZC5cbiAqXG4gKiBMZXR0ZXJzIG1hcmtlZCBieSAhIGFyZSBub24tc3RhbmRhcmQsIGJ1dCBpbXBsZW1lbnRlZCBieSBkYXRlLWZuczpcbiAqIC0gYG9gIG1vZGlmaWVzIHRoZSBwcmV2aW91cyB0b2tlbiB0byB0dXJuIGl0IGludG8gYW4gb3JkaW5hbCAoc2VlIGBmb3JtYXRgIGRvY3MpXG4gKiAtIGBpYCBpcyBJU08gZGF5IG9mIHdlZWsuIEZvciBgaWAgYW5kIGBpaWAgaXMgcmV0dXJucyBudW1lcmljIElTTyB3ZWVrIGRheXMsXG4gKiAgIGkuZS4gNyBmb3IgU3VuZGF5LCAxIGZvciBNb25kYXksIGV0Yy5cbiAqIC0gYElgIGlzIElTTyB3ZWVrIG9mIHllYXIsIGFzIG9wcG9zZWQgdG8gYHdgIHdoaWNoIGlzIGxvY2FsIHdlZWsgb2YgeWVhci5cbiAqIC0gYFJgIGlzIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyLCBhcyBvcHBvc2VkIHRvIGBZYCB3aGljaCBpcyBsb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyLlxuICogICBgUmAgaXMgc3VwcG9zZWQgdG8gYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIGBJYCBhbmQgYGlgXG4gKiAgIGZvciB1bml2ZXJzYWwgSVNPIHdlZWstbnVtYmVyaW5nIGRhdGUsIHdoZXJlYXNcbiAqICAgYFlgIGlzIHN1cHBvc2VkIHRvIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBgd2AgYW5kIGBlYFxuICogICBmb3Igd2Vlay1udW1iZXJpbmcgZGF0ZSBzcGVjaWZpYyB0byB0aGUgbG9jYWxlLlxuICogLSBgUGAgaXMgbG9uZyBsb2NhbGl6ZWQgZGF0ZSBmb3JtYXRcbiAqIC0gYHBgIGlzIGxvbmcgbG9jYWxpemVkIHRpbWUgZm9ybWF0XG4gKi9cbnZhciBmb3JtYXR0ZXJzID0ge1xuICAvLyBFcmFcbiAgRzogZnVuY3Rpb24gRyhkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgZXJhID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpID4gMCA/IDEgOiAwO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gQUQsIEJDXG4gICAgICBjYXNlICdHJzpcbiAgICAgIGNhc2UgJ0dHJzpcbiAgICAgIGNhc2UgJ0dHRyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5lcmEoZXJhLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCdcbiAgICAgICAgfSk7XG4gICAgICAvLyBBLCBCXG5cbiAgICAgIGNhc2UgJ0dHR0dHJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmVyYShlcmEsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdydcbiAgICAgICAgfSk7XG4gICAgICAvLyBBbm5vIERvbWluaSwgQmVmb3JlIENocmlzdFxuXG4gICAgICBjYXNlICdHR0dHJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5lcmEoZXJhLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFllYXJcbiAgeTogZnVuY3Rpb24geShkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICAvLyBPcmRpbmFsIG51bWJlclxuICAgIGlmICh0b2tlbiA9PT0gJ3lvJykge1xuICAgICAgdmFyIHNpZ25lZFllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7IC8vIFJldHVybnMgMSBmb3IgMSBCQyAod2hpY2ggaXMgeWVhciAwIGluIEphdmFTY3JpcHQpXG5cbiAgICAgIHZhciB5ZWFyID0gc2lnbmVkWWVhciA+IDAgPyBzaWduZWRZZWFyIDogMSAtIHNpZ25lZFllYXI7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcih5ZWFyLCB7XG4gICAgICAgIHVuaXQ6ICd5ZWFyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy55KGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gTG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhclxuICBZOiBmdW5jdGlvbiBZKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBzaWduZWRXZWVrWWVhciA9IGdldFVUQ1dlZWtZZWFyKGRhdGUsIG9wdGlvbnMpOyAvLyBSZXR1cm5zIDEgZm9yIDEgQkMgKHdoaWNoIGlzIHllYXIgMCBpbiBKYXZhU2NyaXB0KVxuXG4gICAgdmFyIHdlZWtZZWFyID0gc2lnbmVkV2Vla1llYXIgPiAwID8gc2lnbmVkV2Vla1llYXIgOiAxIC0gc2lnbmVkV2Vla1llYXI7IC8vIFR3byBkaWdpdCB5ZWFyXG5cbiAgICBpZiAodG9rZW4gPT09ICdZWScpIHtcbiAgICAgIHZhciB0d29EaWdpdFllYXIgPSB3ZWVrWWVhciAlIDEwMDtcbiAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModHdvRGlnaXRZZWFyLCAyKTtcbiAgICB9IC8vIE9yZGluYWwgbnVtYmVyXG5cblxuICAgIGlmICh0b2tlbiA9PT0gJ1lvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIod2Vla1llYXIsIHtcbiAgICAgICAgdW5pdDogJ3llYXInXG4gICAgICB9KTtcbiAgICB9IC8vIFBhZGRpbmdcblxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh3ZWVrWWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gSVNPIHdlZWstbnVtYmVyaW5nIHllYXJcbiAgUjogZnVuY3Rpb24gUihkYXRlLCB0b2tlbikge1xuICAgIHZhciBpc29XZWVrWWVhciA9IGdldFVUQ0lTT1dlZWtZZWFyKGRhdGUpOyAvLyBQYWRkaW5nXG5cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGlzb1dlZWtZZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBFeHRlbmRlZCB5ZWFyLiBUaGlzIGlzIGEgc2luZ2xlIG51bWJlciBkZXNpZ25hdGluZyB0aGUgeWVhciBvZiB0aGlzIGNhbGVuZGFyIHN5c3RlbS5cbiAgLy8gVGhlIG1haW4gZGlmZmVyZW5jZSBiZXR3ZWVuIGB5YCBhbmQgYHVgIGxvY2FsaXplcnMgYXJlIEIuQy4geWVhcnM6XG4gIC8vIHwgWWVhciB8IGB5YCB8IGB1YCB8XG4gIC8vIHwtLS0tLS18LS0tLS18LS0tLS18XG4gIC8vIHwgQUMgMSB8ICAgMSB8ICAgMSB8XG4gIC8vIHwgQkMgMSB8ICAgMSB8ICAgMCB8XG4gIC8vIHwgQkMgMiB8ICAgMiB8ICAtMSB8XG4gIC8vIEFsc28gYHl5YCBhbHdheXMgcmV0dXJucyB0aGUgbGFzdCB0d28gZGlnaXRzIG9mIGEgeWVhcixcbiAgLy8gd2hpbGUgYHV1YCBwYWRzIHNpbmdsZSBkaWdpdCB5ZWFycyB0byAyIGNoYXJhY3RlcnMgYW5kIHJldHVybnMgb3RoZXIgeWVhcnMgdW5jaGFuZ2VkLlxuICB1OiBmdW5jdGlvbiB1KGRhdGUsIHRva2VuKSB7XG4gICAgdmFyIHllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh5ZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBRdWFydGVyXG4gIFE6IGZ1bmN0aW9uIFEoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIHF1YXJ0ZXIgPSBNYXRoLmNlaWwoKGRhdGUuZ2V0VVRDTW9udGgoKSArIDEpIC8gMyk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAxLCAyLCAzLCA0XG4gICAgICBjYXNlICdRJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhxdWFydGVyKTtcbiAgICAgIC8vIDAxLCAwMiwgMDMsIDA0XG5cbiAgICAgIGNhc2UgJ1FRJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhxdWFydGVyLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAzcmQsIDR0aFxuXG4gICAgICBjYXNlICdRbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB1bml0OiAncXVhcnRlcidcbiAgICAgICAgfSk7XG4gICAgICAvLyBRMSwgUTIsIFEzLCBRNFxuXG4gICAgICBjYXNlICdRUVEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gMSwgMiwgMywgNCAobmFycm93IHF1YXJ0ZXI7IGNvdWxkIGJlIG5vdCBudW1lcmljYWwpXG5cbiAgICAgIGNhc2UgJ1FRUVFRJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLlxuXG4gICAgICBjYXNlICdRUVFRJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFN0YW5kLWFsb25lIHF1YXJ0ZXJcbiAgcTogZnVuY3Rpb24gcShkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgcXVhcnRlciA9IE1hdGguY2VpbCgoZGF0ZS5nZXRVVENNb250aCgpICsgMSkgLyAzKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIDEsIDIsIDMsIDRcbiAgICAgIGNhc2UgJ3EnOlxuICAgICAgICByZXR1cm4gU3RyaW5nKHF1YXJ0ZXIpO1xuICAgICAgLy8gMDEsIDAyLCAwMywgMDRcblxuICAgICAgY2FzZSAncXEnOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHF1YXJ0ZXIsIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIDNyZCwgNHRoXG5cbiAgICAgIGNhc2UgJ3FvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIocXVhcnRlciwge1xuICAgICAgICAgIHVuaXQ6ICdxdWFydGVyJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFExLCBRMiwgUTMsIFE0XG5cbiAgICAgIGNhc2UgJ3FxcSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyAxLCAyLCAzLCA0IChuYXJyb3cgcXVhcnRlcjsgY291bGQgYmUgbm90IG51bWVyaWNhbClcblxuICAgICAgY2FzZSAncXFxcXEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uXG5cbiAgICAgIGNhc2UgJ3FxcXEnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gTW9udGhcbiAgTTogZnVuY3Rpb24gTShkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgbW9udGggPSBkYXRlLmdldFVUQ01vbnRoKCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdNJzpcbiAgICAgIGNhc2UgJ01NJzpcbiAgICAgICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5NKGRhdGUsIHRva2VuKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDEydGhcblxuICAgICAgY2FzZSAnTW8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihtb250aCArIDEsIHtcbiAgICAgICAgICB1bml0OiAnbW9udGgnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSmFuLCBGZWIsIC4uLiwgRGVjXG5cbiAgICAgIGNhc2UgJ01NTSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEosIEYsIC4uLiwgRFxuXG4gICAgICBjYXNlICdNTU1NTSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlclxuXG4gICAgICBjYXNlICdNTU1NJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gU3RhbmQtYWxvbmUgbW9udGhcbiAgTDogZnVuY3Rpb24gTChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgbW9udGggPSBkYXRlLmdldFVUQ01vbnRoKCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAxLCAyLCAuLi4sIDEyXG4gICAgICBjYXNlICdMJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhtb250aCArIDEpO1xuICAgICAgLy8gMDEsIDAyLCAuLi4sIDEyXG5cbiAgICAgIGNhc2UgJ0xMJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhtb250aCArIDEsIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgMTJ0aFxuXG4gICAgICBjYXNlICdMbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKG1vbnRoICsgMSwge1xuICAgICAgICAgIHVuaXQ6ICdtb250aCdcbiAgICAgICAgfSk7XG4gICAgICAvLyBKYW4sIEZlYiwgLi4uLCBEZWNcblxuICAgICAgY2FzZSAnTExMJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSiwgRiwgLi4uLCBEXG5cbiAgICAgIGNhc2UgJ0xMTExMJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyXG5cbiAgICAgIGNhc2UgJ0xMTEwnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBMb2NhbCB3ZWVrIG9mIHllYXJcbiAgdzogZnVuY3Rpb24gdyhkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgd2VlayA9IGdldFVUQ1dlZWsoZGF0ZSwgb3B0aW9ucyk7XG5cbiAgICBpZiAodG9rZW4gPT09ICd3bycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHdlZWssIHtcbiAgICAgICAgdW5pdDogJ3dlZWsnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHdlZWssIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIElTTyB3ZWVrIG9mIHllYXJcbiAgSTogZnVuY3Rpb24gSShkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaXNvV2VlayA9IGdldFVUQ0lTT1dlZWsoZGF0ZSk7XG5cbiAgICBpZiAodG9rZW4gPT09ICdJbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGlzb1dlZWssIHtcbiAgICAgICAgdW5pdDogJ3dlZWsnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGlzb1dlZWssIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIERheSBvZiB0aGUgbW9udGhcbiAgZDogZnVuY3Rpb24gZChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdkbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRhdGUuZ2V0VVRDRGF0ZSgpLCB7XG4gICAgICAgIHVuaXQ6ICdkYXRlJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5kKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gRGF5IG9mIHllYXJcbiAgRDogZnVuY3Rpb24gRChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgZGF5T2ZZZWFyID0gZ2V0VVRDRGF5T2ZZZWFyKGRhdGUpO1xuXG4gICAgaWYgKHRva2VuID09PSAnRG8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXlPZlllYXIsIHtcbiAgICAgICAgdW5pdDogJ2RheU9mWWVhcidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF5T2ZZZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBEYXkgb2Ygd2Vla1xuICBFOiBmdW5jdGlvbiBFKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBkYXlPZldlZWsgPSBkYXRlLmdldFVUQ0RheSgpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gVHVlXG4gICAgICBjYXNlICdFJzpcbiAgICAgIGNhc2UgJ0VFJzpcbiAgICAgIGNhc2UgJ0VFRSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVFxuXG4gICAgICBjYXNlICdFRUVFRSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1XG5cbiAgICAgIGNhc2UgJ0VFRUVFRSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuXG4gICAgICBjYXNlICdFRUVFJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBMb2NhbCBkYXkgb2Ygd2Vla1xuICBlOiBmdW5jdGlvbiBlKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBkYXlPZldlZWsgPSBkYXRlLmdldFVUQ0RheSgpO1xuICAgIHZhciBsb2NhbERheU9mV2VlayA9IChkYXlPZldlZWsgLSBvcHRpb25zLndlZWtTdGFydHNPbiArIDgpICUgNyB8fCA3O1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gTnVtZXJpY2FsIHZhbHVlIChOdGggZGF5IG9mIHdlZWsgd2l0aCBjdXJyZW50IGxvY2FsZSBvciB3ZWVrU3RhcnRzT24pXG4gICAgICBjYXNlICdlJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhsb2NhbERheU9mV2Vlayk7XG4gICAgICAvLyBQYWRkZWQgbnVtZXJpY2FsIHZhbHVlXG5cbiAgICAgIGNhc2UgJ2VlJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhsb2NhbERheU9mV2VlaywgMik7XG4gICAgICAvLyAxc3QsIDJuZCwgLi4uLCA3dGhcblxuICAgICAgY2FzZSAnZW8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihsb2NhbERheU9mV2Vlaywge1xuICAgICAgICAgIHVuaXQ6ICdkYXknXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdlZWUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFRcblxuICAgICAgY2FzZSAnZWVlZWUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuXG4gICAgICBjYXNlICdlZWVlZWUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZXNkYXlcblxuICAgICAgY2FzZSAnZWVlZSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gU3RhbmQtYWxvbmUgbG9jYWwgZGF5IG9mIHdlZWtcbiAgYzogZnVuY3Rpb24gYyhkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgICB2YXIgbG9jYWxEYXlPZldlZWsgPSAoZGF5T2ZXZWVrIC0gb3B0aW9ucy53ZWVrU3RhcnRzT24gKyA4KSAlIDcgfHwgNztcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIE51bWVyaWNhbCB2YWx1ZSAoc2FtZSBhcyBpbiBgZWApXG4gICAgICBjYXNlICdjJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhsb2NhbERheU9mV2Vlayk7XG4gICAgICAvLyBQYWRkZWQgbnVtZXJpY2FsIHZhbHVlXG5cbiAgICAgIGNhc2UgJ2NjJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhsb2NhbERheU9mV2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDd0aFxuXG4gICAgICBjYXNlICdjbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGxvY2FsRGF5T2ZXZWVrLCB7XG4gICAgICAgICAgdW5pdDogJ2RheSdcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2NjYyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVFxuXG4gICAgICBjYXNlICdjY2NjYyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1XG5cbiAgICAgIGNhc2UgJ2NjY2NjYyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuXG4gICAgICBjYXNlICdjY2NjJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBJU08gZGF5IG9mIHdlZWtcbiAgaTogZnVuY3Rpb24gaShkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgICB2YXIgaXNvRGF5T2ZXZWVrID0gZGF5T2ZXZWVrID09PSAwID8gNyA6IGRheU9mV2VlaztcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIDJcbiAgICAgIGNhc2UgJ2knOlxuICAgICAgICByZXR1cm4gU3RyaW5nKGlzb0RheU9mV2Vlayk7XG4gICAgICAvLyAwMlxuXG4gICAgICBjYXNlICdpaSc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaXNvRGF5T2ZXZWVrLCB0b2tlbi5sZW5ndGgpO1xuICAgICAgLy8gMm5kXG5cbiAgICAgIGNhc2UgJ2lvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaXNvRGF5T2ZXZWVrLCB7XG4gICAgICAgICAgdW5pdDogJ2RheSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVcblxuICAgICAgY2FzZSAnaWlpJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG5cbiAgICAgIGNhc2UgJ2lpaWlpJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVcblxuICAgICAgY2FzZSAnaWlpaWlpJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVzZGF5XG5cbiAgICAgIGNhc2UgJ2lpaWknOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIEFNIG9yIFBNXG4gIGE6IGZ1bmN0aW9uIGEoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpO1xuICAgIHZhciBkYXlQZXJpb2RFbnVtVmFsdWUgPSBob3VycyAvIDEyID49IDEgPyAncG0nIDogJ2FtJztcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ2EnOlxuICAgICAgY2FzZSAnYWEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnYWFhJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSkudG9Mb3dlckNhc2UoKTtcblxuICAgICAgY2FzZSAnYWFhYWEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2FhYWEnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIEFNLCBQTSwgbWlkbmlnaHQsIG5vb25cbiAgYjogZnVuY3Rpb24gYihkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgdmFyIGRheVBlcmlvZEVudW1WYWx1ZTtcblxuICAgIGlmIChob3VycyA9PT0gMTIpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0ubm9vbjtcbiAgICB9IGVsc2UgaWYgKGhvdXJzID09PSAwKSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm1pZG5pZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBob3VycyAvIDEyID49IDEgPyAncG0nIDogJ2FtJztcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdiJzpcbiAgICAgIGNhc2UgJ2JiJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2JiYic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgIGNhc2UgJ2JiYmJiJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdiYmJiJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBpbiB0aGUgbW9ybmluZywgaW4gdGhlIGFmdGVybm9vbiwgaW4gdGhlIGV2ZW5pbmcsIGF0IG5pZ2h0XG4gIEI6IGZ1bmN0aW9uIEIoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpO1xuICAgIHZhciBkYXlQZXJpb2RFbnVtVmFsdWU7XG5cbiAgICBpZiAoaG91cnMgPj0gMTcpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0uZXZlbmluZztcbiAgICB9IGVsc2UgaWYgKGhvdXJzID49IDEyKSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLmFmdGVybm9vbjtcbiAgICB9IGVsc2UgaWYgKGhvdXJzID49IDQpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0ubW9ybmluZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5uaWdodDtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdCJzpcbiAgICAgIGNhc2UgJ0JCJzpcbiAgICAgIGNhc2UgJ0JCQic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdCQkJCQic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnQkJCQic6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gSG91ciBbMS0xMl1cbiAgaDogZnVuY3Rpb24gaChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdobycpIHtcbiAgICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKSAlIDEyO1xuICAgICAgaWYgKGhvdXJzID09PSAwKSBob3VycyA9IDEyO1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaG91cnMsIHtcbiAgICAgICAgdW5pdDogJ2hvdXInXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLmgoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBIb3VyIFswLTIzXVxuICBIOiBmdW5jdGlvbiBIKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ0hvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF0ZS5nZXRVVENIb3VycygpLCB7XG4gICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5IKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gSG91ciBbMC0xMV1cbiAgSzogZnVuY3Rpb24gSyhkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCkgJSAxMjtcblxuICAgIGlmICh0b2tlbiA9PT0gJ0tvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaG91cnMsIHtcbiAgICAgICAgdW5pdDogJ2hvdXInXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGhvdXJzLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBIb3VyIFsxLTI0XVxuICBrOiBmdW5jdGlvbiBrKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICBpZiAoaG91cnMgPT09IDApIGhvdXJzID0gMjQ7XG5cbiAgICBpZiAodG9rZW4gPT09ICdrbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGhvdXJzLCB7XG4gICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhob3VycywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gTWludXRlXG4gIG06IGZ1bmN0aW9uIG0oZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnbW8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldFVUQ01pbnV0ZXMoKSwge1xuICAgICAgICB1bml0OiAnbWludXRlJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5tKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gU2Vjb25kXG4gIHM6IGZ1bmN0aW9uIHMoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnc28nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldFVUQ1NlY29uZHMoKSwge1xuICAgICAgICB1bml0OiAnc2Vjb25kJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5zKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gRnJhY3Rpb24gb2Ygc2Vjb25kXG4gIFM6IGZ1bmN0aW9uIFMoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLlMoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBUaW1lem9uZSAoSVNPLTg2MDEuIElmIG9mZnNldCBpcyAwLCBvdXRwdXQgaXMgYWx3YXlzIGAnWidgKVxuICBYOiBmdW5jdGlvbiBYKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICBpZiAodGltZXpvbmVPZmZzZXQgPT09IDApIHtcbiAgICAgIHJldHVybiAnWic7XG4gICAgfVxuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gSG91cnMgYW5kIG9wdGlvbmFsIG1pbnV0ZXNcbiAgICAgIGNhc2UgJ1gnOlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzKHRpbWV6b25lT2Zmc2V0KTtcbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYFhYYFxuXG4gICAgICBjYXNlICdYWFhYJzpcbiAgICAgIGNhc2UgJ1hYJzpcbiAgICAgICAgLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCk7XG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRoIGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGBYWFhgXG5cbiAgICAgIGNhc2UgJ1hYWFhYJzpcbiAgICAgIGNhc2UgJ1hYWCc6IC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGggYDpgIGRlbGltaXRlclxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgfVxuICB9LFxuICAvLyBUaW1lem9uZSAoSVNPLTg2MDEuIElmIG9mZnNldCBpcyAwLCBvdXRwdXQgaXMgYCcrMDA6MDAnYCBvciBlcXVpdmFsZW50KVxuICB4OiBmdW5jdGlvbiB4KGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBIb3VycyBhbmQgb3B0aW9uYWwgbWludXRlc1xuICAgICAgY2FzZSAneCc6XG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZVdpdGhPcHRpb25hbE1pbnV0ZXModGltZXpvbmVPZmZzZXQpO1xuICAgICAgLy8gSG91cnMsIG1pbnV0ZXMgYW5kIG9wdGlvbmFsIHNlY29uZHMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAvLyBOb3RlOiBuZWl0aGVyIElTTy04NjAxIG5vciBKYXZhU2NyaXB0IHN1cHBvcnRzIHNlY29uZHMgaW4gdGltZXpvbmUgb2Zmc2V0c1xuICAgICAgLy8gc28gdGhpcyB0b2tlbiBhbHdheXMgaGFzIHRoZSBzYW1lIG91dHB1dCBhcyBgeHhgXG5cbiAgICAgIGNhc2UgJ3h4eHgnOlxuICAgICAgY2FzZSAneHgnOlxuICAgICAgICAvLyBIb3VycyBhbmQgbWludXRlcyB3aXRob3V0IGA6YCBkZWxpbWl0ZXJcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0KTtcbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGggYDpgIGRlbGltaXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYHh4eGBcblxuICAgICAgY2FzZSAneHh4eHgnOlxuICAgICAgY2FzZSAneHh4JzogLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aCBgOmAgZGVsaW1pdGVyXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICB9XG4gIH0sXG4gIC8vIFRpbWV6b25lIChHTVQpXG4gIE86IGZ1bmN0aW9uIE8oZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXpvbmVPZmZzZXQgPSBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIFNob3J0XG4gICAgICBjYXNlICdPJzpcbiAgICAgIGNhc2UgJ09PJzpcbiAgICAgIGNhc2UgJ09PTyc6XG4gICAgICAgIHJldHVybiAnR01UJyArIGZvcm1hdFRpbWV6b25lU2hvcnQodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgICAvLyBMb25nXG5cbiAgICAgIGNhc2UgJ09PT08nOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuICdHTVQnICsgZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgfVxuICB9LFxuICAvLyBUaW1lem9uZSAoc3BlY2lmaWMgbm9uLWxvY2F0aW9uKVxuICB6OiBmdW5jdGlvbiB6KGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBTaG9ydFxuICAgICAgY2FzZSAneic6XG4gICAgICBjYXNlICd6eic6XG4gICAgICBjYXNlICd6enonOlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZVNob3J0KHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgICAgLy8gTG9uZ1xuXG4gICAgICBjYXNlICd6enp6JzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAnR01UJyArIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgIH1cbiAgfSxcbiAgLy8gU2Vjb25kcyB0aW1lc3RhbXBcbiAgdDogZnVuY3Rpb24gdChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lc3RhbXAgPSBNYXRoLmZsb29yKG9yaWdpbmFsRGF0ZS5nZXRUaW1lKCkgLyAxMDAwKTtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHRpbWVzdGFtcCwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gTWlsbGlzZWNvbmRzIHRpbWVzdGFtcFxuICBUOiBmdW5jdGlvbiBUKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWVzdGFtcCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lKCk7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh0aW1lc3RhbXAsIHRva2VuLmxlbmd0aCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGZvcm1hdFRpbWV6b25lU2hvcnQob2Zmc2V0LCBkaXJ0eURlbGltaXRlcikge1xuICB2YXIgc2lnbiA9IG9mZnNldCA+IDAgPyAnLScgOiAnKyc7XG4gIHZhciBhYnNPZmZzZXQgPSBNYXRoLmFicyhvZmZzZXQpO1xuICB2YXIgaG91cnMgPSBNYXRoLmZsb29yKGFic09mZnNldCAvIDYwKTtcbiAgdmFyIG1pbnV0ZXMgPSBhYnNPZmZzZXQgJSA2MDtcblxuICBpZiAobWludXRlcyA9PT0gMCkge1xuICAgIHJldHVybiBzaWduICsgU3RyaW5nKGhvdXJzKTtcbiAgfVxuXG4gIHZhciBkZWxpbWl0ZXIgPSBkaXJ0eURlbGltaXRlciB8fCAnJztcbiAgcmV0dXJuIHNpZ24gKyBTdHJpbmcoaG91cnMpICsgZGVsaW1pdGVyICsgYWRkTGVhZGluZ1plcm9zKG1pbnV0ZXMsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRUaW1lem9uZVdpdGhPcHRpb25hbE1pbnV0ZXMob2Zmc2V0LCBkaXJ0eURlbGltaXRlcikge1xuICBpZiAob2Zmc2V0ICUgNjAgPT09IDApIHtcbiAgICB2YXIgc2lnbiA9IG9mZnNldCA+IDAgPyAnLScgOiAnKyc7XG4gICAgcmV0dXJuIHNpZ24gKyBhZGRMZWFkaW5nWmVyb3MoTWF0aC5hYnMob2Zmc2V0KSAvIDYwLCAyKTtcbiAgfVxuXG4gIHJldHVybiBmb3JtYXRUaW1lem9uZShvZmZzZXQsIGRpcnR5RGVsaW1pdGVyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VGltZXpvbmUob2Zmc2V0LCBkaXJ0eURlbGltaXRlcikge1xuICB2YXIgZGVsaW1pdGVyID0gZGlydHlEZWxpbWl0ZXIgfHwgJyc7XG4gIHZhciBzaWduID0gb2Zmc2V0ID4gMCA/ICctJyA6ICcrJztcbiAgdmFyIGFic09mZnNldCA9IE1hdGguYWJzKG9mZnNldCk7XG4gIHZhciBob3VycyA9IGFkZExlYWRpbmdaZXJvcyhNYXRoLmZsb29yKGFic09mZnNldCAvIDYwKSwgMik7XG4gIHZhciBtaW51dGVzID0gYWRkTGVhZGluZ1plcm9zKGFic09mZnNldCAlIDYwLCAyKTtcbiAgcmV0dXJuIHNpZ24gKyBob3VycyArIGRlbGltaXRlciArIG1pbnV0ZXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZvcm1hdHRlcnM7IiwidmFyIGRhdGVMb25nRm9ybWF0dGVyID0gZnVuY3Rpb24gZGF0ZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZykge1xuICBzd2l0Y2ggKHBhdHRlcm4pIHtcbiAgICBjYXNlICdQJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoe1xuICAgICAgICB3aWR0aDogJ3Nob3J0J1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdQUCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy5kYXRlKHtcbiAgICAgICAgd2lkdGg6ICdtZWRpdW0nXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ1BQUCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy5kYXRlKHtcbiAgICAgICAgd2lkdGg6ICdsb25nJ1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdQUFBQJzpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7XG4gICAgICAgIHdpZHRoOiAnZnVsbCdcbiAgICAgIH0pO1xuICB9XG59O1xuXG52YXIgdGltZUxvbmdGb3JtYXR0ZXIgPSBmdW5jdGlvbiB0aW1lTG9uZ0Zvcm1hdHRlcihwYXR0ZXJuLCBmb3JtYXRMb25nKSB7XG4gIHN3aXRjaCAocGF0dGVybikge1xuICAgIGNhc2UgJ3AnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7XG4gICAgICAgIHdpZHRoOiAnc2hvcnQnXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ3BwJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoe1xuICAgICAgICB3aWR0aDogJ21lZGl1bSdcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAncHBwJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoe1xuICAgICAgICB3aWR0aDogJ2xvbmcnXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ3BwcHAnOlxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHtcbiAgICAgICAgd2lkdGg6ICdmdWxsJ1xuICAgICAgfSk7XG4gIH1cbn07XG5cbnZhciBkYXRlVGltZUxvbmdGb3JtYXR0ZXIgPSBmdW5jdGlvbiBkYXRlVGltZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZykge1xuICB2YXIgbWF0Y2hSZXN1bHQgPSBwYXR0ZXJuLm1hdGNoKC8oUCspKHArKT8vKSB8fCBbXTtcbiAgdmFyIGRhdGVQYXR0ZXJuID0gbWF0Y2hSZXN1bHRbMV07XG4gIHZhciB0aW1lUGF0dGVybiA9IG1hdGNoUmVzdWx0WzJdO1xuXG4gIGlmICghdGltZVBhdHRlcm4pIHtcbiAgICByZXR1cm4gZGF0ZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZyk7XG4gIH1cblxuICB2YXIgZGF0ZVRpbWVGb3JtYXQ7XG5cbiAgc3dpdGNoIChkYXRlUGF0dGVybikge1xuICAgIGNhc2UgJ1AnOlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHtcbiAgICAgICAgd2lkdGg6ICdzaG9ydCdcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdQUCc6XG4gICAgICBkYXRlVGltZUZvcm1hdCA9IGZvcm1hdExvbmcuZGF0ZVRpbWUoe1xuICAgICAgICB3aWR0aDogJ21lZGl1bSdcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdQUFAnOlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHtcbiAgICAgICAgd2lkdGg6ICdsb25nJ1xuICAgICAgfSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ1BQUFAnOlxuICAgIGRlZmF1bHQ6XG4gICAgICBkYXRlVGltZUZvcm1hdCA9IGZvcm1hdExvbmcuZGF0ZVRpbWUoe1xuICAgICAgICB3aWR0aDogJ2Z1bGwnXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgcmV0dXJuIGRhdGVUaW1lRm9ybWF0LnJlcGxhY2UoJ3t7ZGF0ZX19JywgZGF0ZUxvbmdGb3JtYXR0ZXIoZGF0ZVBhdHRlcm4sIGZvcm1hdExvbmcpKS5yZXBsYWNlKCd7e3RpbWV9fScsIHRpbWVMb25nRm9ybWF0dGVyKHRpbWVQYXR0ZXJuLCBmb3JtYXRMb25nKSk7XG59O1xuXG52YXIgbG9uZ0Zvcm1hdHRlcnMgPSB7XG4gIHA6IHRpbWVMb25nRm9ybWF0dGVyLFxuICBQOiBkYXRlVGltZUxvbmdGb3JtYXR0ZXJcbn07XG5leHBvcnQgZGVmYXVsdCBsb25nRm9ybWF0dGVyczsiLCIvKipcbiAqIEdvb2dsZSBDaHJvbWUgYXMgb2YgNjcuMC4zMzk2Ljg3IGludHJvZHVjZWQgdGltZXpvbmVzIHdpdGggb2Zmc2V0IHRoYXQgaW5jbHVkZXMgc2Vjb25kcy5cbiAqIFRoZXkgdXN1YWxseSBhcHBlYXIgZm9yIGRhdGVzIHRoYXQgZGVub3RlIHRpbWUgYmVmb3JlIHRoZSB0aW1lem9uZXMgd2VyZSBpbnRyb2R1Y2VkXG4gKiAoZS5nLiBmb3IgJ0V1cm9wZS9QcmFndWUnIHRpbWV6b25lIHRoZSBvZmZzZXQgaXMgR01UKzAwOjU3OjQ0IGJlZm9yZSAxIE9jdG9iZXIgMTg5MVxuICogYW5kIEdNVCswMTowMDowMCBhZnRlciB0aGF0IGRhdGUpXG4gKlxuICogRGF0ZSNnZXRUaW1lem9uZU9mZnNldCByZXR1cm5zIHRoZSBvZmZzZXQgaW4gbWludXRlcyBhbmQgd291bGQgcmV0dXJuIDU3IGZvciB0aGUgZXhhbXBsZSBhYm92ZSxcbiAqIHdoaWNoIHdvdWxkIGxlYWQgdG8gaW5jb3JyZWN0IGNhbGN1bGF0aW9ucy5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHRpbWV6b25lIG9mZnNldCBpbiBtaWxsaXNlY29uZHMgdGhhdCB0YWtlcyBzZWNvbmRzIGluIGFjY291bnQuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMoZGF0ZSkge1xuICB2YXIgdXRjRGF0ZSA9IG5ldyBEYXRlKERhdGUuVVRDKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpLCBkYXRlLmdldERhdGUoKSwgZGF0ZS5nZXRIb3VycygpLCBkYXRlLmdldE1pbnV0ZXMoKSwgZGF0ZS5nZXRTZWNvbmRzKCksIGRhdGUuZ2V0TWlsbGlzZWNvbmRzKCkpKTtcbiAgdXRjRGF0ZS5zZXRVVENGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCkpO1xuICByZXR1cm4gZGF0ZS5nZXRUaW1lKCkgLSB1dGNEYXRlLmdldFRpbWUoKTtcbn0iLCJ2YXIgcHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW5zID0gWydEJywgJ0REJ107XG52YXIgcHJvdGVjdGVkV2Vla1llYXJUb2tlbnMgPSBbJ1lZJywgJ1lZWVknXTtcbmV4cG9ydCBmdW5jdGlvbiBpc1Byb3RlY3RlZERheU9mWWVhclRva2VuKHRva2VuKSB7XG4gIHJldHVybiBwcm90ZWN0ZWREYXlPZlllYXJUb2tlbnMuaW5kZXhPZih0b2tlbikgIT09IC0xO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzUHJvdGVjdGVkV2Vla1llYXJUb2tlbih0b2tlbikge1xuICByZXR1cm4gcHJvdGVjdGVkV2Vla1llYXJUb2tlbnMuaW5kZXhPZih0b2tlbikgIT09IC0xO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHRocm93UHJvdGVjdGVkRXJyb3IodG9rZW4sIGZvcm1hdCwgaW5wdXQpIHtcbiAgaWYgKHRva2VuID09PSAnWVlZWScpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlVzZSBgeXl5eWAgaW5zdGVhZCBvZiBgWVlZWWAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIHllYXJzIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcIikpO1xuICB9IGVsc2UgaWYgKHRva2VuID09PSAnWVknKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYHl5YCBpbnN0ZWFkIG9mIGBZWWAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIHllYXJzIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcIikpO1xuICB9IGVsc2UgaWYgKHRva2VuID09PSAnRCcpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlVzZSBgZGAgaW5zdGVhZCBvZiBgRGAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcIikpO1xuICB9IGVsc2UgaWYgKHRva2VuID09PSAnREQnKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYGRkYCBpbnN0ZWFkIG9mIGBERGAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcIikpO1xuICB9XG59IiwidmFyIGZvcm1hdERpc3RhbmNlTG9jYWxlID0ge1xuICBsZXNzVGhhblhTZWNvbmRzOiB7XG4gICAgb25lOiAnbGVzcyB0aGFuIGEgc2Vjb25kJyxcbiAgICBvdGhlcjogJ2xlc3MgdGhhbiB7e2NvdW50fX0gc2Vjb25kcydcbiAgfSxcbiAgeFNlY29uZHM6IHtcbiAgICBvbmU6ICcxIHNlY29uZCcsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gc2Vjb25kcydcbiAgfSxcbiAgaGFsZkFNaW51dGU6ICdoYWxmIGEgbWludXRlJyxcbiAgbGVzc1RoYW5YTWludXRlczoge1xuICAgIG9uZTogJ2xlc3MgdGhhbiBhIG1pbnV0ZScsXG4gICAgb3RoZXI6ICdsZXNzIHRoYW4ge3tjb3VudH19IG1pbnV0ZXMnXG4gIH0sXG4gIHhNaW51dGVzOiB7XG4gICAgb25lOiAnMSBtaW51dGUnLFxuICAgIG90aGVyOiAne3tjb3VudH19IG1pbnV0ZXMnXG4gIH0sXG4gIGFib3V0WEhvdXJzOiB7XG4gICAgb25lOiAnYWJvdXQgMSBob3VyJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSBob3VycydcbiAgfSxcbiAgeEhvdXJzOiB7XG4gICAgb25lOiAnMSBob3VyJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBob3VycydcbiAgfSxcbiAgeERheXM6IHtcbiAgICBvbmU6ICcxIGRheScsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gZGF5cydcbiAgfSxcbiAgYWJvdXRYV2Vla3M6IHtcbiAgICBvbmU6ICdhYm91dCAxIHdlZWsnLFxuICAgIG90aGVyOiAnYWJvdXQge3tjb3VudH19IHdlZWtzJ1xuICB9LFxuICB4V2Vla3M6IHtcbiAgICBvbmU6ICcxIHdlZWsnLFxuICAgIG90aGVyOiAne3tjb3VudH19IHdlZWtzJ1xuICB9LFxuICBhYm91dFhNb250aHM6IHtcbiAgICBvbmU6ICdhYm91dCAxIG1vbnRoJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSBtb250aHMnXG4gIH0sXG4gIHhNb250aHM6IHtcbiAgICBvbmU6ICcxIG1vbnRoJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBtb250aHMnXG4gIH0sXG4gIGFib3V0WFllYXJzOiB7XG4gICAgb25lOiAnYWJvdXQgMSB5ZWFyJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSB5ZWFycydcbiAgfSxcbiAgeFllYXJzOiB7XG4gICAgb25lOiAnMSB5ZWFyJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSB5ZWFycydcbiAgfSxcbiAgb3ZlclhZZWFyczoge1xuICAgIG9uZTogJ292ZXIgMSB5ZWFyJyxcbiAgICBvdGhlcjogJ292ZXIge3tjb3VudH19IHllYXJzJ1xuICB9LFxuICBhbG1vc3RYWWVhcnM6IHtcbiAgICBvbmU6ICdhbG1vc3QgMSB5ZWFyJyxcbiAgICBvdGhlcjogJ2FsbW9zdCB7e2NvdW50fX0geWVhcnMnXG4gIH1cbn07XG5cbnZhciBmb3JtYXREaXN0YW5jZSA9IGZ1bmN0aW9uIGZvcm1hdERpc3RhbmNlKHRva2VuLCBjb3VudCwgb3B0aW9ucykge1xuICB2YXIgcmVzdWx0O1xuICB2YXIgdG9rZW5WYWx1ZSA9IGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXTtcblxuICBpZiAodHlwZW9mIHRva2VuVmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmVzdWx0ID0gdG9rZW5WYWx1ZTtcbiAgfSBlbHNlIGlmIChjb3VudCA9PT0gMSkge1xuICAgIHJlc3VsdCA9IHRva2VuVmFsdWUub25lO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9IHRva2VuVmFsdWUub3RoZXIucmVwbGFjZSgne3tjb3VudH19JywgY291bnQudG9TdHJpbmcoKSk7XG4gIH1cblxuICBpZiAob3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zICE9PSB2b2lkIDAgJiYgb3B0aW9ucy5hZGRTdWZmaXgpIHtcbiAgICBpZiAob3B0aW9ucy5jb21wYXJpc29uICYmIG9wdGlvbnMuY29tcGFyaXNvbiA+IDApIHtcbiAgICAgIHJldHVybiAnaW4gJyArIHJlc3VsdDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHJlc3VsdCArICcgYWdvJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZm9ybWF0RGlzdGFuY2U7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRGb3JtYXRMb25nRm4oYXJncykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICAvLyBUT0RPOiBSZW1vdmUgU3RyaW5nKClcbiAgICB2YXIgd2lkdGggPSBvcHRpb25zLndpZHRoID8gU3RyaW5nKG9wdGlvbnMud2lkdGgpIDogYXJncy5kZWZhdWx0V2lkdGg7XG4gICAgdmFyIGZvcm1hdCA9IGFyZ3MuZm9ybWF0c1t3aWR0aF0gfHwgYXJncy5mb3JtYXRzW2FyZ3MuZGVmYXVsdFdpZHRoXTtcbiAgICByZXR1cm4gZm9ybWF0O1xuICB9O1xufSIsImltcG9ydCBidWlsZEZvcm1hdExvbmdGbiBmcm9tIFwiLi4vLi4vLi4vX2xpYi9idWlsZEZvcm1hdExvbmdGbi9pbmRleC5qc1wiO1xudmFyIGRhdGVGb3JtYXRzID0ge1xuICBmdWxsOiAnRUVFRSwgTU1NTSBkbywgeScsXG4gIGxvbmc6ICdNTU1NIGRvLCB5JyxcbiAgbWVkaXVtOiAnTU1NIGQsIHknLFxuICBzaG9ydDogJ01NL2RkL3l5eXknXG59O1xudmFyIHRpbWVGb3JtYXRzID0ge1xuICBmdWxsOiAnaDptbTpzcyBhIHp6enonLFxuICBsb25nOiAnaDptbTpzcyBhIHonLFxuICBtZWRpdW06ICdoOm1tOnNzIGEnLFxuICBzaG9ydDogJ2g6bW0gYSdcbn07XG52YXIgZGF0ZVRpbWVGb3JtYXRzID0ge1xuICBmdWxsOiBcInt7ZGF0ZX19ICdhdCcge3t0aW1lfX1cIixcbiAgbG9uZzogXCJ7e2RhdGV9fSAnYXQnIHt7dGltZX19XCIsXG4gIG1lZGl1bTogJ3t7ZGF0ZX19LCB7e3RpbWV9fScsXG4gIHNob3J0OiAne3tkYXRlfX0sIHt7dGltZX19J1xufTtcbnZhciBmb3JtYXRMb25nID0ge1xuICBkYXRlOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogZGF0ZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSksXG4gIHRpbWU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiB0aW1lRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KSxcbiAgZGF0ZVRpbWU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiBkYXRlVGltZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBmb3JtYXRMb25nOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkTWF0Y2hQYXR0ZXJuRm4oYXJncykge1xuICByZXR1cm4gZnVuY3Rpb24gKHN0cmluZykge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICB2YXIgbWF0Y2hSZXN1bHQgPSBzdHJpbmcubWF0Y2goYXJncy5tYXRjaFBhdHRlcm4pO1xuICAgIGlmICghbWF0Y2hSZXN1bHQpIHJldHVybiBudWxsO1xuICAgIHZhciBtYXRjaGVkU3RyaW5nID0gbWF0Y2hSZXN1bHRbMF07XG4gICAgdmFyIHBhcnNlUmVzdWx0ID0gc3RyaW5nLm1hdGNoKGFyZ3MucGFyc2VQYXR0ZXJuKTtcbiAgICBpZiAoIXBhcnNlUmVzdWx0KSByZXR1cm4gbnVsbDtcbiAgICB2YXIgdmFsdWUgPSBhcmdzLnZhbHVlQ2FsbGJhY2sgPyBhcmdzLnZhbHVlQ2FsbGJhY2socGFyc2VSZXN1bHRbMF0pIDogcGFyc2VSZXN1bHRbMF07XG4gICAgdmFsdWUgPSBvcHRpb25zLnZhbHVlQ2FsbGJhY2sgPyBvcHRpb25zLnZhbHVlQ2FsbGJhY2sodmFsdWUpIDogdmFsdWU7XG4gICAgdmFyIHJlc3QgPSBzdHJpbmcuc2xpY2UobWF0Y2hlZFN0cmluZy5sZW5ndGgpO1xuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICByZXN0OiByZXN0XG4gICAgfTtcbiAgfTtcbn0iLCJ2YXIgZm9ybWF0UmVsYXRpdmVMb2NhbGUgPSB7XG4gIGxhc3RXZWVrOiBcIidsYXN0JyBlZWVlICdhdCcgcFwiLFxuICB5ZXN0ZXJkYXk6IFwiJ3llc3RlcmRheSBhdCcgcFwiLFxuICB0b2RheTogXCIndG9kYXkgYXQnIHBcIixcbiAgdG9tb3Jyb3c6IFwiJ3RvbW9ycm93IGF0JyBwXCIsXG4gIG5leHRXZWVrOiBcImVlZWUgJ2F0JyBwXCIsXG4gIG90aGVyOiAnUCdcbn07XG5cbnZhciBmb3JtYXRSZWxhdGl2ZSA9IGZ1bmN0aW9uIGZvcm1hdFJlbGF0aXZlKHRva2VuLCBfZGF0ZSwgX2Jhc2VEYXRlLCBfb3B0aW9ucykge1xuICByZXR1cm4gZm9ybWF0UmVsYXRpdmVMb2NhbGVbdG9rZW5dO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZm9ybWF0UmVsYXRpdmU7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRMb2NhbGl6ZUZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChkaXJ0eUluZGV4LCBvcHRpb25zKSB7XG4gICAgdmFyIGNvbnRleHQgPSBvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCAmJiBvcHRpb25zLmNvbnRleHQgPyBTdHJpbmcob3B0aW9ucy5jb250ZXh0KSA6ICdzdGFuZGFsb25lJztcbiAgICB2YXIgdmFsdWVzQXJyYXk7XG5cbiAgICBpZiAoY29udGV4dCA9PT0gJ2Zvcm1hdHRpbmcnICYmIGFyZ3MuZm9ybWF0dGluZ1ZhbHVlcykge1xuICAgICAgdmFyIGRlZmF1bHRXaWR0aCA9IGFyZ3MuZGVmYXVsdEZvcm1hdHRpbmdXaWR0aCB8fCBhcmdzLmRlZmF1bHRXaWR0aDtcbiAgICAgIHZhciB3aWR0aCA9IG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMud2lkdGggPyBTdHJpbmcob3B0aW9ucy53aWR0aCkgOiBkZWZhdWx0V2lkdGg7XG4gICAgICB2YWx1ZXNBcnJheSA9IGFyZ3MuZm9ybWF0dGluZ1ZhbHVlc1t3aWR0aF0gfHwgYXJncy5mb3JtYXR0aW5nVmFsdWVzW2RlZmF1bHRXaWR0aF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBfZGVmYXVsdFdpZHRoID0gYXJncy5kZWZhdWx0V2lkdGg7XG5cbiAgICAgIHZhciBfd2lkdGggPSBvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCAmJiBvcHRpb25zLndpZHRoID8gU3RyaW5nKG9wdGlvbnMud2lkdGgpIDogYXJncy5kZWZhdWx0V2lkdGg7XG5cbiAgICAgIHZhbHVlc0FycmF5ID0gYXJncy52YWx1ZXNbX3dpZHRoXSB8fCBhcmdzLnZhbHVlc1tfZGVmYXVsdFdpZHRoXTtcbiAgICB9XG5cbiAgICB2YXIgaW5kZXggPSBhcmdzLmFyZ3VtZW50Q2FsbGJhY2sgPyBhcmdzLmFyZ3VtZW50Q2FsbGJhY2soZGlydHlJbmRleCkgOiBkaXJ0eUluZGV4OyAvLyBAdHMtaWdub3JlOiBGb3Igc29tZSByZWFzb24gVHlwZVNjcmlwdCBqdXN0IGRvbid0IHdhbnQgdG8gbWF0Y2ggaXQsIG5vIG1hdHRlciBob3cgaGFyZCB3ZSB0cnkuIEkgY2hhbGxlbmdlIHlvdSB0byB0cnkgdG8gcmVtb3ZlIGl0IVxuXG4gICAgcmV0dXJuIHZhbHVlc0FycmF5W2luZGV4XTtcbiAgfTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZE1hdGNoRm4oYXJncykge1xuICByZXR1cm4gZnVuY3Rpb24gKHN0cmluZykge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICB2YXIgd2lkdGggPSBvcHRpb25zLndpZHRoO1xuICAgIHZhciBtYXRjaFBhdHRlcm4gPSB3aWR0aCAmJiBhcmdzLm1hdGNoUGF0dGVybnNbd2lkdGhdIHx8IGFyZ3MubWF0Y2hQYXR0ZXJuc1thcmdzLmRlZmF1bHRNYXRjaFdpZHRoXTtcbiAgICB2YXIgbWF0Y2hSZXN1bHQgPSBzdHJpbmcubWF0Y2gobWF0Y2hQYXR0ZXJuKTtcblxuICAgIGlmICghbWF0Y2hSZXN1bHQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBtYXRjaGVkU3RyaW5nID0gbWF0Y2hSZXN1bHRbMF07XG4gICAgdmFyIHBhcnNlUGF0dGVybnMgPSB3aWR0aCAmJiBhcmdzLnBhcnNlUGF0dGVybnNbd2lkdGhdIHx8IGFyZ3MucGFyc2VQYXR0ZXJuc1thcmdzLmRlZmF1bHRQYXJzZVdpZHRoXTtcbiAgICB2YXIga2V5ID0gQXJyYXkuaXNBcnJheShwYXJzZVBhdHRlcm5zKSA/IGZpbmRJbmRleChwYXJzZVBhdHRlcm5zLCBmdW5jdGlvbiAocGF0dGVybikge1xuICAgICAgcmV0dXJuIHBhdHRlcm4udGVzdChtYXRjaGVkU3RyaW5nKTtcbiAgICB9KSA6IGZpbmRLZXkocGFyc2VQYXR0ZXJucywgZnVuY3Rpb24gKHBhdHRlcm4pIHtcbiAgICAgIHJldHVybiBwYXR0ZXJuLnRlc3QobWF0Y2hlZFN0cmluZyk7XG4gICAgfSk7XG4gICAgdmFyIHZhbHVlO1xuICAgIHZhbHVlID0gYXJncy52YWx1ZUNhbGxiYWNrID8gYXJncy52YWx1ZUNhbGxiYWNrKGtleSkgOiBrZXk7XG4gICAgdmFsdWUgPSBvcHRpb25zLnZhbHVlQ2FsbGJhY2sgPyBvcHRpb25zLnZhbHVlQ2FsbGJhY2sodmFsdWUpIDogdmFsdWU7XG4gICAgdmFyIHJlc3QgPSBzdHJpbmcuc2xpY2UobWF0Y2hlZFN0cmluZy5sZW5ndGgpO1xuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICByZXN0OiByZXN0XG4gICAgfTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZmluZEtleShvYmplY3QsIHByZWRpY2F0ZSkge1xuICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgaWYgKG9iamVjdC5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIHByZWRpY2F0ZShvYmplY3Rba2V5XSkpIHtcbiAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gZmluZEluZGV4KGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgZm9yICh2YXIga2V5ID0gMDsga2V5IDwgYXJyYXkubGVuZ3RoOyBrZXkrKykge1xuICAgIGlmIChwcmVkaWNhdGUoYXJyYXlba2V5XSkpIHtcbiAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn0iLCJpbXBvcnQgZm9ybWF0RGlzdGFuY2UgZnJvbSBcIi4vX2xpYi9mb3JtYXREaXN0YW5jZS9pbmRleC5qc1wiO1xuaW1wb3J0IGZvcm1hdExvbmcgZnJvbSBcIi4vX2xpYi9mb3JtYXRMb25nL2luZGV4LmpzXCI7XG5pbXBvcnQgZm9ybWF0UmVsYXRpdmUgZnJvbSBcIi4vX2xpYi9mb3JtYXRSZWxhdGl2ZS9pbmRleC5qc1wiO1xuaW1wb3J0IGxvY2FsaXplIGZyb20gXCIuL19saWIvbG9jYWxpemUvaW5kZXguanNcIjtcbmltcG9ydCBtYXRjaCBmcm9tIFwiLi9fbGliL21hdGNoL2luZGV4LmpzXCI7XG5cbi8qKlxuICogQHR5cGUge0xvY2FsZX1cbiAqIEBjYXRlZ29yeSBMb2NhbGVzXG4gKiBAc3VtbWFyeSBFbmdsaXNoIGxvY2FsZSAoVW5pdGVkIFN0YXRlcykuXG4gKiBAbGFuZ3VhZ2UgRW5nbGlzaFxuICogQGlzby02MzktMiBlbmdcbiAqIEBhdXRob3IgU2FzaGEgS29zcyBbQGtvc3Nub2NvcnBde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9rb3Nzbm9jb3JwfVxuICogQGF1dGhvciBMZXNoYSBLb3NzIFtAbGVzaGFrb3NzXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vbGVzaGFrb3NzfVxuICovXG52YXIgbG9jYWxlID0ge1xuICBjb2RlOiAnZW4tVVMnLFxuICBmb3JtYXREaXN0YW5jZTogZm9ybWF0RGlzdGFuY2UsXG4gIGZvcm1hdExvbmc6IGZvcm1hdExvbmcsXG4gIGZvcm1hdFJlbGF0aXZlOiBmb3JtYXRSZWxhdGl2ZSxcbiAgbG9jYWxpemU6IGxvY2FsaXplLFxuICBtYXRjaDogbWF0Y2gsXG4gIG9wdGlvbnM6IHtcbiAgICB3ZWVrU3RhcnRzT246IDBcbiAgICAvKiBTdW5kYXkgKi9cbiAgICAsXG4gICAgZmlyc3RXZWVrQ29udGFpbnNEYXRlOiAxXG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBsb2NhbGU7IiwiaW1wb3J0IGRlZmF1bHRMb2NhbGUgZnJvbSBcIi4uLy4uL2xvY2FsZS9lbi1VUy9pbmRleC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZGVmYXVsdExvY2FsZTsiLCJpbXBvcnQgYnVpbGRMb2NhbGl6ZUZuIGZyb20gXCIuLi8uLi8uLi9fbGliL2J1aWxkTG9jYWxpemVGbi9pbmRleC5qc1wiO1xudmFyIGVyYVZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ0InLCAnQSddLFxuICBhYmJyZXZpYXRlZDogWydCQycsICdBRCddLFxuICB3aWRlOiBbJ0JlZm9yZSBDaHJpc3QnLCAnQW5ubyBEb21pbmknXVxufTtcbnZhciBxdWFydGVyVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnMScsICcyJywgJzMnLCAnNCddLFxuICBhYmJyZXZpYXRlZDogWydRMScsICdRMicsICdRMycsICdRNCddLFxuICB3aWRlOiBbJzFzdCBxdWFydGVyJywgJzJuZCBxdWFydGVyJywgJzNyZCBxdWFydGVyJywgJzR0aCBxdWFydGVyJ11cbn07IC8vIE5vdGU6IGluIEVuZ2xpc2gsIHRoZSBuYW1lcyBvZiBkYXlzIG9mIHRoZSB3ZWVrIGFuZCBtb250aHMgYXJlIGNhcGl0YWxpemVkLlxuLy8gSWYgeW91IGFyZSBtYWtpbmcgYSBuZXcgbG9jYWxlIGJhc2VkIG9uIHRoaXMgb25lLCBjaGVjayBpZiB0aGUgc2FtZSBpcyB0cnVlIGZvciB0aGUgbGFuZ3VhZ2UgeW91J3JlIHdvcmtpbmcgb24uXG4vLyBHZW5lcmFsbHksIGZvcm1hdHRlZCBkYXRlcyBzaG91bGQgbG9vayBsaWtlIHRoZXkgYXJlIGluIHRoZSBtaWRkbGUgb2YgYSBzZW50ZW5jZSxcbi8vIGUuZy4gaW4gU3BhbmlzaCBsYW5ndWFnZSB0aGUgd2Vla2RheXMgYW5kIG1vbnRocyBzaG91bGQgYmUgaW4gdGhlIGxvd2VyY2FzZS5cblxudmFyIG1vbnRoVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnSicsICdGJywgJ00nLCAnQScsICdNJywgJ0onLCAnSicsICdBJywgJ1MnLCAnTycsICdOJywgJ0QnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnSmFuJywgJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0F1ZycsICdTZXAnLCAnT2N0JywgJ05vdicsICdEZWMnXSxcbiAgd2lkZTogWydKYW51YXJ5JywgJ0ZlYnJ1YXJ5JywgJ01hcmNoJywgJ0FwcmlsJywgJ01heScsICdKdW5lJywgJ0p1bHknLCAnQXVndXN0JywgJ1NlcHRlbWJlcicsICdPY3RvYmVyJywgJ05vdmVtYmVyJywgJ0RlY2VtYmVyJ11cbn07XG52YXIgZGF5VmFsdWVzID0ge1xuICBuYXJyb3c6IFsnUycsICdNJywgJ1QnLCAnVycsICdUJywgJ0YnLCAnUyddLFxuICBzaG9ydDogWydTdScsICdNbycsICdUdScsICdXZScsICdUaCcsICdGcicsICdTYSddLFxuICBhYmJyZXZpYXRlZDogWydTdW4nLCAnTW9uJywgJ1R1ZScsICdXZWQnLCAnVGh1JywgJ0ZyaScsICdTYXQnXSxcbiAgd2lkZTogWydTdW5kYXknLCAnTW9uZGF5JywgJ1R1ZXNkYXknLCAnV2VkbmVzZGF5JywgJ1RodXJzZGF5JywgJ0ZyaWRheScsICdTYXR1cmRheSddXG59O1xudmFyIGRheVBlcmlvZFZhbHVlcyA9IHtcbiAgbmFycm93OiB7XG4gICAgYW06ICdhJyxcbiAgICBwbTogJ3AnLFxuICAgIG1pZG5pZ2h0OiAnbWknLFxuICAgIG5vb246ICduJyxcbiAgICBtb3JuaW5nOiAnbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnZXZlbmluZycsXG4gICAgbmlnaHQ6ICduaWdodCdcbiAgfSxcbiAgYWJicmV2aWF0ZWQ6IHtcbiAgICBhbTogJ0FNJyxcbiAgICBwbTogJ1BNJyxcbiAgICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgICBub29uOiAnbm9vbicsXG4gICAgbW9ybmluZzogJ21vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2FmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2V2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnbmlnaHQnXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogJ2EubS4nLFxuICAgIHBtOiAncC5tLicsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdldmVuaW5nJyxcbiAgICBuaWdodDogJ25pZ2h0J1xuICB9XG59O1xudmFyIGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiAnYScsXG4gICAgcG06ICdwJyxcbiAgICBtaWRuaWdodDogJ21pJyxcbiAgICBub29uOiAnbicsXG4gICAgbW9ybmluZzogJ2luIHRoZSBtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdpbiB0aGUgYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnaW4gdGhlIGV2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnYXQgbmlnaHQnXG4gIH0sXG4gIGFiYnJldmlhdGVkOiB7XG4gICAgYW06ICdBTScsXG4gICAgcG06ICdQTScsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdpbiB0aGUgbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnaW4gdGhlIGFmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2luIHRoZSBldmVuaW5nJyxcbiAgICBuaWdodDogJ2F0IG5pZ2h0J1xuICB9LFxuICB3aWRlOiB7XG4gICAgYW06ICdhLm0uJyxcbiAgICBwbTogJ3AubS4nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICAgIG5vb246ICdub29uJyxcbiAgICBtb3JuaW5nOiAnaW4gdGhlIG1vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2luIHRoZSBhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdpbiB0aGUgZXZlbmluZycsXG4gICAgbmlnaHQ6ICdhdCBuaWdodCdcbiAgfVxufTtcblxudmFyIG9yZGluYWxOdW1iZXIgPSBmdW5jdGlvbiBvcmRpbmFsTnVtYmVyKGRpcnR5TnVtYmVyLCBfb3B0aW9ucykge1xuICB2YXIgbnVtYmVyID0gTnVtYmVyKGRpcnR5TnVtYmVyKTsgLy8gSWYgb3JkaW5hbCBudW1iZXJzIGRlcGVuZCBvbiBjb250ZXh0LCBmb3IgZXhhbXBsZSxcbiAgLy8gaWYgdGhleSBhcmUgZGlmZmVyZW50IGZvciBkaWZmZXJlbnQgZ3JhbW1hdGljYWwgZ2VuZGVycyxcbiAgLy8gdXNlIGBvcHRpb25zLnVuaXRgLlxuICAvL1xuICAvLyBgdW5pdGAgY2FuIGJlICd5ZWFyJywgJ3F1YXJ0ZXInLCAnbW9udGgnLCAnd2VlaycsICdkYXRlJywgJ2RheU9mWWVhcicsXG4gIC8vICdkYXknLCAnaG91cicsICdtaW51dGUnLCAnc2Vjb25kJy5cblxuICB2YXIgcmVtMTAwID0gbnVtYmVyICUgMTAwO1xuXG4gIGlmIChyZW0xMDAgPiAyMCB8fCByZW0xMDAgPCAxMCkge1xuICAgIHN3aXRjaCAocmVtMTAwICUgMTApIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcmV0dXJuIG51bWJlciArICdzdCc7XG5cbiAgICAgIGNhc2UgMjpcbiAgICAgICAgcmV0dXJuIG51bWJlciArICduZCc7XG5cbiAgICAgIGNhc2UgMzpcbiAgICAgICAgcmV0dXJuIG51bWJlciArICdyZCc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bWJlciArICd0aCc7XG59O1xuXG52YXIgbG9jYWxpemUgPSB7XG4gIG9yZGluYWxOdW1iZXI6IG9yZGluYWxOdW1iZXIsXG4gIGVyYTogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGVyYVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgcXVhcnRlcjogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IHF1YXJ0ZXJWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZScsXG4gICAgYXJndW1lbnRDYWxsYmFjazogZnVuY3Rpb24gYXJndW1lbnRDYWxsYmFjayhxdWFydGVyKSB7XG4gICAgICByZXR1cm4gcXVhcnRlciAtIDE7XG4gICAgfVxuICB9KSxcbiAgbW9udGg6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBtb250aFZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgZGF5OiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5VmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBkYXlQZXJpb2Q6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBkYXlQZXJpb2RWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZScsXG4gICAgZm9ybWF0dGluZ1ZhbHVlczogZm9ybWF0dGluZ0RheVBlcmlvZFZhbHVlcyxcbiAgICBkZWZhdWx0Rm9ybWF0dGluZ1dpZHRoOiAnd2lkZSdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBsb2NhbGl6ZTsiLCJpbXBvcnQgYnVpbGRNYXRjaEZuIGZyb20gXCIuLi8uLi8uLi9fbGliL2J1aWxkTWF0Y2hGbi9pbmRleC5qc1wiO1xuaW1wb3J0IGJ1aWxkTWF0Y2hQYXR0ZXJuRm4gZnJvbSBcIi4uLy4uLy4uL19saWIvYnVpbGRNYXRjaFBhdHRlcm5Gbi9pbmRleC5qc1wiO1xudmFyIG1hdGNoT3JkaW5hbE51bWJlclBhdHRlcm4gPSAvXihcXGQrKSh0aHxzdHxuZHxyZCk/L2k7XG52YXIgcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9cXGQrL2k7XG52YXIgbWF0Y2hFcmFQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXihifGEpL2ksXG4gIGFiYnJldmlhdGVkOiAvXihiXFwuP1xccz9jXFwuP3xiXFwuP1xccz9jXFwuP1xccz9lXFwuP3xhXFwuP1xccz9kXFwuP3xjXFwuP1xccz9lXFwuPykvaSxcbiAgd2lkZTogL14oYmVmb3JlIGNocmlzdHxiZWZvcmUgY29tbW9uIGVyYXxhbm5vIGRvbWluaXxjb21tb24gZXJhKS9pXG59O1xudmFyIHBhcnNlRXJhUGF0dGVybnMgPSB7XG4gIGFueTogWy9eYi9pLCAvXihhfGMpL2ldXG59O1xudmFyIG1hdGNoUXVhcnRlclBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eWzEyMzRdL2ksXG4gIGFiYnJldmlhdGVkOiAvXnFbMTIzNF0vaSxcbiAgd2lkZTogL15bMTIzNF0odGh8c3R8bmR8cmQpPyBxdWFydGVyL2lcbn07XG52YXIgcGFyc2VRdWFydGVyUGF0dGVybnMgPSB7XG4gIGFueTogWy8xL2ksIC8yL2ksIC8zL2ksIC80L2ldXG59O1xudmFyIG1hdGNoTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXltqZm1hc29uZF0vaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKGphbnxmZWJ8bWFyfGFwcnxtYXl8anVufGp1bHxhdWd8c2VwfG9jdHxub3Z8ZGVjKS9pLFxuICB3aWRlOiAvXihqYW51YXJ5fGZlYnJ1YXJ5fG1hcmNofGFwcmlsfG1heXxqdW5lfGp1bHl8YXVndXN0fHNlcHRlbWJlcnxvY3RvYmVyfG5vdmVtYmVyfGRlY2VtYmVyKS9pXG59O1xudmFyIHBhcnNlTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbL15qL2ksIC9eZi9pLCAvXm0vaSwgL15hL2ksIC9ebS9pLCAvXmovaSwgL15qL2ksIC9eYS9pLCAvXnMvaSwgL15vL2ksIC9ebi9pLCAvXmQvaV0sXG4gIGFueTogWy9eamEvaSwgL15mL2ksIC9ebWFyL2ksIC9eYXAvaSwgL15tYXkvaSwgL15qdW4vaSwgL15qdWwvaSwgL15hdS9pLCAvXnMvaSwgL15vL2ksIC9ebi9pLCAvXmQvaV1cbn07XG52YXIgbWF0Y2hEYXlQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXltzbXR3Zl0vaSxcbiAgc2hvcnQ6IC9eKHN1fG1vfHR1fHdlfHRofGZyfHNhKS9pLFxuICBhYmJyZXZpYXRlZDogL14oc3VufG1vbnx0dWV8d2VkfHRodXxmcml8c2F0KS9pLFxuICB3aWRlOiAvXihzdW5kYXl8bW9uZGF5fHR1ZXNkYXl8d2VkbmVzZGF5fHRodXJzZGF5fGZyaWRheXxzYXR1cmRheSkvaVxufTtcbnZhciBwYXJzZURheVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IFsvXnMvaSwgL15tL2ksIC9edC9pLCAvXncvaSwgL150L2ksIC9eZi9pLCAvXnMvaV0sXG4gIGFueTogWy9ec3UvaSwgL15tL2ksIC9edHUvaSwgL153L2ksIC9edGgvaSwgL15mL2ksIC9ec2EvaV1cbn07XG52YXIgbWF0Y2hEYXlQZXJpb2RQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXihhfHB8bWl8bnwoaW4gdGhlfGF0KSAobW9ybmluZ3xhZnRlcm5vb258ZXZlbmluZ3xuaWdodCkpL2ksXG4gIGFueTogL14oW2FwXVxcLj9cXHM/bVxcLj98bWlkbmlnaHR8bm9vbnwoaW4gdGhlfGF0KSAobW9ybmluZ3xhZnRlcm5vb258ZXZlbmluZ3xuaWdodCkpL2lcbn07XG52YXIgcGFyc2VEYXlQZXJpb2RQYXR0ZXJucyA9IHtcbiAgYW55OiB7XG4gICAgYW06IC9eYS9pLFxuICAgIHBtOiAvXnAvaSxcbiAgICBtaWRuaWdodDogL15taS9pLFxuICAgIG5vb246IC9ebm8vaSxcbiAgICBtb3JuaW5nOiAvbW9ybmluZy9pLFxuICAgIGFmdGVybm9vbjogL2FmdGVybm9vbi9pLFxuICAgIGV2ZW5pbmc6IC9ldmVuaW5nL2ksXG4gICAgbmlnaHQ6IC9uaWdodC9pXG4gIH1cbn07XG52YXIgbWF0Y2ggPSB7XG4gIG9yZGluYWxOdW1iZXI6IGJ1aWxkTWF0Y2hQYXR0ZXJuRm4oe1xuICAgIG1hdGNoUGF0dGVybjogbWF0Y2hPcmRpbmFsTnVtYmVyUGF0dGVybixcbiAgICBwYXJzZVBhdHRlcm46IHBhcnNlT3JkaW5hbE51bWJlclBhdHRlcm4sXG4gICAgdmFsdWVDYWxsYmFjazogZnVuY3Rpb24gdmFsdWVDYWxsYmFjayh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gICAgfVxuICB9KSxcbiAgZXJhOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRXJhUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZUVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgcXVhcnRlcjogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaFF1YXJ0ZXJQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlUXVhcnRlclBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55JyxcbiAgICB2YWx1ZUNhbGxiYWNrOiBmdW5jdGlvbiB2YWx1ZUNhbGxiYWNrKGluZGV4KSB7XG4gICAgICByZXR1cm4gaW5kZXggKyAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VEYXlQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheVBlcmlvZDogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnYW55JyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IG1hdGNoOyIsImltcG9ydCBpc1ZhbGlkIGZyb20gXCIuLi9pc1ZhbGlkL2luZGV4LmpzXCI7XG5pbXBvcnQgc3ViTWlsbGlzZWNvbmRzIGZyb20gXCIuLi9zdWJNaWxsaXNlY29uZHMvaW5kZXguanNcIjtcbmltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IGZvcm1hdHRlcnMgZnJvbSBcIi4uL19saWIvZm9ybWF0L2Zvcm1hdHRlcnMvaW5kZXguanNcIjtcbmltcG9ydCBsb25nRm9ybWF0dGVycyBmcm9tIFwiLi4vX2xpYi9mb3JtYXQvbG9uZ0Zvcm1hdHRlcnMvaW5kZXguanNcIjtcbmltcG9ydCBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzIGZyb20gXCIuLi9fbGliL2dldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMvaW5kZXguanNcIjtcbmltcG9ydCB7IGlzUHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW4sIGlzUHJvdGVjdGVkV2Vla1llYXJUb2tlbiwgdGhyb3dQcm90ZWN0ZWRFcnJvciB9IGZyb20gXCIuLi9fbGliL3Byb3RlY3RlZFRva2Vucy9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBnZXREZWZhdWx0T3B0aW9ucyB9IGZyb20gXCIuLi9fbGliL2RlZmF1bHRPcHRpb25zL2luZGV4LmpzXCI7XG5pbXBvcnQgZGVmYXVsdExvY2FsZSBmcm9tIFwiLi4vX2xpYi9kZWZhdWx0TG9jYWxlL2luZGV4LmpzXCI7IC8vIFRoaXMgUmVnRXhwIGNvbnNpc3RzIG9mIHRocmVlIHBhcnRzIHNlcGFyYXRlZCBieSBgfGA6XG4vLyAtIFt5WVFxTUx3SWREZWNpaEhLa21zXW8gbWF0Y2hlcyBhbnkgYXZhaWxhYmxlIG9yZGluYWwgbnVtYmVyIHRva2VuXG4vLyAgIChvbmUgb2YgdGhlIGNlcnRhaW4gbGV0dGVycyBmb2xsb3dlZCBieSBgb2ApXG4vLyAtIChcXHcpXFwxKiBtYXRjaGVzIGFueSBzZXF1ZW5jZXMgb2YgdGhlIHNhbWUgbGV0dGVyXG4vLyAtICcnIG1hdGNoZXMgdHdvIHF1b3RlIGNoYXJhY3RlcnMgaW4gYSByb3dcbi8vIC0gJygnJ3xbXiddKSsoJ3wkKSBtYXRjaGVzIGFueXRoaW5nIHN1cnJvdW5kZWQgYnkgdHdvIHF1b3RlIGNoYXJhY3RlcnMgKCcpLFxuLy8gICBleGNlcHQgYSBzaW5nbGUgcXVvdGUgc3ltYm9sLCB3aGljaCBlbmRzIHRoZSBzZXF1ZW5jZS5cbi8vICAgVHdvIHF1b3RlIGNoYXJhY3RlcnMgZG8gbm90IGVuZCB0aGUgc2VxdWVuY2UuXG4vLyAgIElmIHRoZXJlIGlzIG5vIG1hdGNoaW5nIHNpbmdsZSBxdW90ZVxuLy8gICB0aGVuIHRoZSBzZXF1ZW5jZSB3aWxsIGNvbnRpbnVlIHVudGlsIHRoZSBlbmQgb2YgdGhlIHN0cmluZy5cbi8vIC0gLiBtYXRjaGVzIGFueSBzaW5nbGUgY2hhcmFjdGVyIHVubWF0Y2hlZCBieSBwcmV2aW91cyBwYXJ0cyBvZiB0aGUgUmVnRXhwc1xuXG52YXIgZm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCA9IC9beVlRcU1Md0lkRGVjaWhIS2ttc11vfChcXHcpXFwxKnwnJ3wnKCcnfFteJ10pKygnfCQpfC4vZzsgLy8gVGhpcyBSZWdFeHAgY2F0Y2hlcyBzeW1ib2xzIGVzY2FwZWQgYnkgcXVvdGVzLCBhbmQgYWxzb1xuLy8gc2VxdWVuY2VzIG9mIHN5bWJvbHMgUCwgcCwgYW5kIHRoZSBjb21iaW5hdGlvbnMgbGlrZSBgUFBQUFBQUHBwcHBwYFxuXG52YXIgbG9uZ0Zvcm1hdHRpbmdUb2tlbnNSZWdFeHAgPSAvUCtwK3xQK3xwK3wnJ3wnKCcnfFteJ10pKygnfCQpfC4vZztcbnZhciBlc2NhcGVkU3RyaW5nUmVnRXhwID0gL14nKFteXSo/KSc/JC87XG52YXIgZG91YmxlUXVvdGVSZWdFeHAgPSAvJycvZztcbnZhciB1bmVzY2FwZWRMYXRpbkNoYXJhY3RlclJlZ0V4cCA9IC9bYS16QS1aXS87XG4vKipcbiAqIEBuYW1lIGZvcm1hdFxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBGb3JtYXQgdGhlIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gdGhlIGZvcm1hdHRlZCBkYXRlIHN0cmluZyBpbiB0aGUgZ2l2ZW4gZm9ybWF0LiBUaGUgcmVzdWx0IG1heSB2YXJ5IGJ5IGxvY2FsZS5cbiAqXG4gKiA+IOKaoO+4jyBQbGVhc2Ugbm90ZSB0aGF0IHRoZSBgZm9ybWF0YCB0b2tlbnMgZGlmZmVyIGZyb20gTW9tZW50LmpzIGFuZCBvdGhlciBsaWJyYXJpZXMuXG4gKiA+IFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICpcbiAqIFRoZSBjaGFyYWN0ZXJzIHdyYXBwZWQgYmV0d2VlbiB0d28gc2luZ2xlIHF1b3RlcyBjaGFyYWN0ZXJzICgnKSBhcmUgZXNjYXBlZC5cbiAqIFR3byBzaW5nbGUgcXVvdGVzIGluIGEgcm93LCB3aGV0aGVyIGluc2lkZSBvciBvdXRzaWRlIGEgcXVvdGVkIHNlcXVlbmNlLCByZXByZXNlbnQgYSAncmVhbCcgc2luZ2xlIHF1b3RlLlxuICogKHNlZSB0aGUgbGFzdCBleGFtcGxlKVxuICpcbiAqIEZvcm1hdCBvZiB0aGUgc3RyaW5nIGlzIGJhc2VkIG9uIFVuaWNvZGUgVGVjaG5pY2FsIFN0YW5kYXJkICMzNTpcbiAqIGh0dHBzOi8vd3d3LnVuaWNvZGUub3JnL3JlcG9ydHMvdHIzNS90cjM1LWRhdGVzLmh0bWwjRGF0ZV9GaWVsZF9TeW1ib2xfVGFibGVcbiAqIHdpdGggYSBmZXcgYWRkaXRpb25zIChzZWUgbm90ZSA3IGJlbG93IHRoZSB0YWJsZSkuXG4gKlxuICogQWNjZXB0ZWQgcGF0dGVybnM6XG4gKiB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQYXR0ZXJuIHwgUmVzdWx0IGV4YW1wbGVzICAgICAgICAgICAgICAgICAgIHwgTm90ZXMgfFxuICogfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLXxcbiAqIHwgRXJhICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEcuLkdHRyAgfCBBRCwgQkMgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBHR0dHICAgIHwgQW5ubyBEb21pbmksIEJlZm9yZSBDaHJpc3QgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgR0dHR0cgICB8IEEsIEIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgQ2FsZW5kYXIgeWVhciAgICAgICAgICAgICAgICAgICB8IHkgICAgICAgfCA0NCwgMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5byAgICAgIHwgNDR0aCwgMXN0LCAwdGgsIDE3dGggICAgICAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXkgICAgICB8IDQ0LCAwMSwgMDAsIDE3ICAgICAgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5eSAgICAgfCAwNDQsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5eXl5ICAgIHwgMDA0NCwgMDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXl5eXkgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSAgIHxcbiAqIHwgTG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhciAgICAgICB8IFkgICAgICAgfCA0NCwgMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZbyAgICAgIHwgNDR0aCwgMXN0LCAxOTAwdGgsIDIwMTd0aCAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVkgICAgICB8IDQ0LCAwMSwgMDAsIDE3ICAgICAgICAgICAgICAgICAgICB8IDUsOCAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZWSAgICAgfCAwNDQsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZWVlZICAgIHwgMDA0NCwgMDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgIHwgNSw4ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVlZWVkgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSAgIHxcbiAqIHwgSVNPIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICAgICB8IFIgICAgICAgfCAtNDMsIDAsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUiAgICAgIHwgLTQzLCAwMCwgMDEsIDE5MDAsIDIwMTcgICAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlJSICAgICB8IC0wNDMsIDAwMCwgMDAxLCAxOTAwLCAyMDE3ICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFJSUlIgICAgfCAtMDA0MywgMDAwMCwgMDAwMSwgMTkwMCwgMjAxNyAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUlJSUiAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw1LDcgfFxuICogfCBFeHRlbmRlZCB5ZWFyICAgICAgICAgICAgICAgICAgIHwgdSAgICAgICB8IC00MywgMCwgMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1ICAgICAgfCAtNDMsIDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dXUgICAgIHwgLTA0MywgMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdXV1dSAgICB8IC0wMDQzLCAwMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1dXV1ICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUgICB8XG4gKiB8IFF1YXJ0ZXIgKGZvcm1hdHRpbmcpICAgICAgICAgICAgfCBRICAgICAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUW8gICAgICB8IDFzdCwgMm5kLCAzcmQsIDR0aCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRICAgICAgfCAwMSwgMDIsIDAzLCAwNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUVEgICAgIHwgUTEsIFEyLCBRMywgUTQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUVFRUSAgICB8IDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRUVFRICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCA0ICAgICB8XG4gKiB8IFF1YXJ0ZXIgKHN0YW5kLWFsb25lKSAgICAgICAgICAgfCBxICAgICAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcW8gICAgICB8IDFzdCwgMm5kLCAzcmQsIDR0aCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxICAgICAgfCAwMSwgMDIsIDAzLCAwNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcXEgICAgIHwgUTEsIFEyLCBRMywgUTQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcXFxcSAgICB8IDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxcXFxICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCA0ICAgICB8XG4gKiB8IE1vbnRoIChmb3JtYXR0aW5nKSAgICAgICAgICAgICAgfCBNICAgICAgIHwgMSwgMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTW8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDEydGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NICAgICAgfCAwMSwgMDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTU0gICAgIHwgSmFuLCBGZWIsIC4uLiwgRGVjICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU1NTSAgICB8IEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NTU1NICAgfCBKLCBGLCAuLi4sIEQgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IE1vbnRoIChzdGFuZC1hbG9uZSkgICAgICAgICAgICAgfCBMICAgICAgIHwgMSwgMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDEydGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMICAgICAgfCAwMSwgMDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTEwgICAgIHwgSmFuLCBGZWIsIC4uLiwgRGVjICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTExMTCAgICB8IEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMTExMICAgfCBKLCBGLCAuLi4sIEQgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IExvY2FsIHdlZWsgb2YgeWVhciAgICAgICAgICAgICAgfCB3ICAgICAgIHwgMSwgMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgd28gICAgICB8IDFzdCwgMm5kLCAuLi4sIDUzdGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHd3ICAgICAgfCAwMSwgMDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IElTTyB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgICAgfCBJICAgICAgIHwgMSwgMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSW8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDUzdGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IElJICAgICAgfCAwMSwgMDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8IERheSBvZiBtb250aCAgICAgICAgICAgICAgICAgICAgfCBkICAgICAgIHwgMSwgMiwgLi4uLCAzMSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDMxc3QgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGRkICAgICAgfCAwMSwgMDIsIC4uLiwgMzEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IERheSBvZiB5ZWFyICAgICAgICAgICAgICAgICAgICAgfCBEICAgICAgIHwgMSwgMiwgLi4uLCAzNjUsIDM2NiAgICAgICAgICAgICAgIHwgOSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDM2NXRoLCAzNjZ0aCAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEREICAgICAgfCAwMSwgMDIsIC4uLiwgMzY1LCAzNjYgICAgICAgICAgICAgfCA5ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBEREQgICAgIHwgMDAxLCAwMDIsIC4uLiwgMzY1LCAzNjYgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRERERCAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMgICAgIHxcbiAqIHwgRGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICAgICAgICB8IEUuLkVFRSAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBFRUVFICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRUVFRUUgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEVFRUVFRSAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFNhLCBTdSAgICAgICAgfCAgICAgICB8XG4gKiB8IElTTyBkYXkgb2Ygd2VlayAoZm9ybWF0dGluZykgICAgfCBpICAgICAgIHwgMSwgMiwgMywgLi4uLCA3ICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaW8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDd0aCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpICAgICAgfCAwMSwgMDIsIC4uLiwgMDcgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWkgICAgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpaSAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpaWlpICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWlpaWkgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTYSwgU3UgICAgICAgIHwgNyAgICAgfFxuICogfCBMb2NhbCBkYXkgb2Ygd2VlayAoZm9ybWF0dGluZykgIHwgZSAgICAgICB8IDIsIDMsIDQsIC4uLiwgMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVvICAgICAgfCAybmQsIDNyZCwgLi4uLCAxc3QgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZSAgICAgIHwgMDIsIDAzLCAuLi4sIDAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlICAgICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZWUgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZWVlZSAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlZWVlICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU2EsIFN1ICAgICAgICB8ICAgICAgIHxcbiAqIHwgTG9jYWwgZGF5IG9mIHdlZWsgKHN0YW5kLWFsb25lKSB8IGMgICAgICAgfCAyLCAzLCA0LCAuLi4sIDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjbyAgICAgIHwgMm5kLCAzcmQsIC4uLiwgMXN0ICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2MgICAgICB8IDAyLCAwMywgLi4uLCAwMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjYyAgICAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2NjICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2NjY2MgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjY2NjYyAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFNhLCBTdSAgICAgICAgfCAgICAgICB8XG4gKiB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhLi5hYSAgIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWFhICAgICB8IGFtLCBwbSAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGFhYWEgICAgfCBhLm0uLCBwLm0uICAgICAgICAgICAgICAgICAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhYWFhYSAgIHwgYSwgcCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBBTSwgUE0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgIHwgYi4uYmIgICB8IEFNLCBQTSwgbm9vbiwgbWlkbmlnaHQgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGJiYiAgICAgfCBhbSwgcG0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBiYmJiICAgIHwgYS5tLiwgcC5tLiwgbm9vbiwgbWlkbmlnaHQgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYmJiYmIgICB8IGEsIHAsIG4sIG1pICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgRmxleGlibGUgZGF5IHBlcmlvZCAgICAgICAgICAgICB8IEIuLkJCQiAgfCBhdCBuaWdodCwgaW4gdGhlIG1vcm5pbmcsIC4uLiAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBCQkJCICAgIHwgYXQgbmlnaHQsIGluIHRoZSBtb3JuaW5nLCAuLi4gICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgQkJCQkIgICB8IGF0IG5pZ2h0LCBpbiB0aGUgbW9ybmluZywgLi4uICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMS0xMl0gICAgICAgICAgICAgICAgICAgICB8IGggICAgICAgfCAxLCAyLCAuLi4sIDExLCAxMiAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBobyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMTF0aCwgMTJ0aCAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaGggICAgICB8IDAxLCAwMiwgLi4uLCAxMSwgMTIgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMC0yM10gICAgICAgICAgICAgICAgICAgICB8IEggICAgICAgfCAwLCAxLCAyLCAuLi4sIDIzICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBIbyAgICAgIHwgMHRoLCAxc3QsIDJuZCwgLi4uLCAyM3JkICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSEggICAgICB8IDAwLCAwMSwgMDIsIC4uLiwgMjMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMC0xMV0gICAgICAgICAgICAgICAgICAgICB8IEsgICAgICAgfCAxLCAyLCAuLi4sIDExLCAwICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBLbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMTF0aCwgMHRoICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgS0sgICAgICB8IDAxLCAwMiwgLi4uLCAxMSwgMDAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMS0yNF0gICAgICAgICAgICAgICAgICAgICB8IGsgICAgICAgfCAyNCwgMSwgMiwgLi4uLCAyMyAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBrbyAgICAgIHwgMjR0aCwgMXN0LCAybmQsIC4uLiwgMjNyZCAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwga2sgICAgICB8IDI0LCAwMSwgMDIsIC4uLiwgMjMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgTWludXRlICAgICAgICAgICAgICAgICAgICAgICAgICB8IG0gICAgICAgfCAwLCAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBtbyAgICAgIHwgMHRoLCAxc3QsIC4uLiwgNTl0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgbW0gICAgICB8IDAwLCAwMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgU2Vjb25kICAgICAgICAgICAgICAgICAgICAgICAgICB8IHMgICAgICAgfCAwLCAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBzbyAgICAgIHwgMHRoLCAxc3QsIC4uLiwgNTl0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgc3MgICAgICB8IDAwLCAwMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgRnJhY3Rpb24gb2Ygc2Vjb25kICAgICAgICAgICAgICB8IFMgICAgICAgfCAwLCAxLCAuLi4sIDkgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTUyAgICAgIHwgMDAsIDAxLCAuLi4sIDk5ICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU1NTICAgICB8IDAwMCwgMDAxLCAuLi4sIDk5OSAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFNTU1MgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzICAgICB8XG4gKiB8IFRpbWV6b25lIChJU08tODYwMSB3LyBaKSAgICAgICAgfCBYICAgICAgIHwgLTA4LCArMDUzMCwgWiAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFggICAgICB8IC0wODAwLCArMDUzMCwgWiAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYWCAgICAgfCAtMDg6MDAsICswNTozMCwgWiAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBYWFhYICAgIHwgLTA4MDAsICswNTMwLCBaLCArMTIzNDU2ICAgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFhYWFggICB8IC0wODowMCwgKzA1OjMwLCBaLCArMTI6MzQ6NTYgICAgICB8ICAgICAgIHxcbiAqIHwgVGltZXpvbmUgKElTTy04NjAxIHcvbyBaKSAgICAgICB8IHggICAgICAgfCAtMDgsICswNTMwLCArMDAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eCAgICAgIHwgLTA4MDAsICswNTMwLCArMDAwMCAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHh4ICAgICB8IC0wODowMCwgKzA1OjMwLCArMDA6MDAgICAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHh4eHggICAgfCAtMDgwMCwgKzA1MzAsICswMDAwLCArMTIzNDU2ICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eHh4eCAgIHwgLTA4OjAwLCArMDU6MzAsICswMDowMCwgKzEyOjM0OjU2IHwgICAgICAgfFxuICogfCBUaW1lem9uZSAoR01UKSAgICAgICAgICAgICAgICAgIHwgTy4uLk9PTyB8IEdNVC04LCBHTVQrNTozMCwgR01UKzAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE9PT08gICAgfCBHTVQtMDg6MDAsIEdNVCswNTozMCwgR01UKzAwOjAwICAgfCAyICAgICB8XG4gKiB8IFRpbWV6b25lIChzcGVjaWZpYyBub24tbG9jYXQuKSAgfCB6Li4uenp6IHwgR01ULTgsIEdNVCs1OjMwLCBHTVQrMCAgICAgICAgICAgIHwgNiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgenp6eiAgICB8IEdNVC0wODowMCwgR01UKzA1OjMwLCBHTVQrMDA6MDAgICB8IDIsNiAgIHxcbiAqIHwgU2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICAgICAgICB8IHQgICAgICAgfCA1MTI5Njk1MjAgICAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB0dCAgICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw3ICAgfFxuICogfCBNaWxsaXNlY29uZHMgdGltZXN0YW1wICAgICAgICAgIHwgVCAgICAgICB8IDUxMjk2OTUyMDkwMCAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFRUICAgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDcgICB8XG4gKiB8IExvbmcgbG9jYWxpemVkIGRhdGUgICAgICAgICAgICAgfCBQICAgICAgIHwgMDQvMjkvMTQ1MyAgICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFAgICAgICB8IEFwciAyOSwgMTQ1MyAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUCAgICAgfCBBcHJpbCAyOXRoLCAxNDUzICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFBQICAgIHwgRnJpZGF5LCBBcHJpbCAyOXRoLCAxNDUzICAgICAgICAgIHwgMiw3ICAgfFxuICogfCBMb25nIGxvY2FsaXplZCB0aW1lICAgICAgICAgICAgIHwgcCAgICAgICB8IDEyOjAwIEFNICAgICAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHBwICAgICAgfCAxMjowMDowMCBBTSAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBwcHAgICAgIHwgMTI6MDA6MDAgQU0gR01UKzIgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcHBwcCAgICB8IDEyOjAwOjAwIEFNIEdNVCswMjowMCAgICAgICAgICAgICB8IDIsNyAgIHxcbiAqIHwgQ29tYmluYXRpb24gb2YgZGF0ZSBhbmQgdGltZSAgICB8IFBwICAgICAgfCAwNC8yOS8xNDUzLCAxMjowMCBBTSAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUHBwICAgIHwgQXByIDI5LCAxNDUzLCAxMjowMDowMCBBTSAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBQcHBwICB8IEFwcmlsIDI5dGgsIDE0NTMgYXQgLi4uICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUFBwcHBwfCBGcmlkYXksIEFwcmlsIDI5dGgsIDE0NTMgYXQgLi4uICAgfCAyLDcgICB8XG4gKiBOb3RlczpcbiAqIDEuIFwiRm9ybWF0dGluZ1wiIHVuaXRzIChlLmcuIGZvcm1hdHRpbmcgcXVhcnRlcikgaW4gdGhlIGRlZmF1bHQgZW4tVVMgbG9jYWxlXG4gKiAgICBhcmUgdGhlIHNhbWUgYXMgXCJzdGFuZC1hbG9uZVwiIHVuaXRzLCBidXQgYXJlIGRpZmZlcmVudCBpbiBzb21lIGxhbmd1YWdlcy5cbiAqICAgIFwiRm9ybWF0dGluZ1wiIHVuaXRzIGFyZSBkZWNsaW5lZCBhY2NvcmRpbmcgdG8gdGhlIHJ1bGVzIG9mIHRoZSBsYW5ndWFnZVxuICogICAgaW4gdGhlIGNvbnRleHQgb2YgYSBkYXRlLiBcIlN0YW5kLWFsb25lXCIgdW5pdHMgYXJlIGFsd2F5cyBub21pbmF0aXZlIHNpbmd1bGFyOlxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnZG8gTExMTCcsIHtsb2NhbGU6IGNzfSkgLy89PiAnNi4gbGlzdG9wYWQnYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnZG8gTU1NTScsIHtsb2NhbGU6IGNzfSkgLy89PiAnNi4gbGlzdG9wYWR1J2BcbiAqXG4gKiAyLiBBbnkgc2VxdWVuY2Ugb2YgdGhlIGlkZW50aWNhbCBsZXR0ZXJzIGlzIGEgcGF0dGVybiwgdW5sZXNzIGl0IGlzIGVzY2FwZWQgYnlcbiAqICAgIHRoZSBzaW5nbGUgcXVvdGUgY2hhcmFjdGVycyAoc2VlIGJlbG93KS5cbiAqICAgIElmIHRoZSBzZXF1ZW5jZSBpcyBsb25nZXIgdGhhbiBsaXN0ZWQgaW4gdGFibGUgKGUuZy4gYEVFRUVFRUVFRUVFYClcbiAqICAgIHRoZSBvdXRwdXQgd2lsbCBiZSB0aGUgc2FtZSBhcyBkZWZhdWx0IHBhdHRlcm4gZm9yIHRoaXMgdW5pdCwgdXN1YWxseVxuICogICAgdGhlIGxvbmdlc3Qgb25lIChpbiBjYXNlIG9mIElTTyB3ZWVrZGF5cywgYEVFRUVgKS4gRGVmYXVsdCBwYXR0ZXJucyBmb3IgdW5pdHNcbiAqICAgIGFyZSBtYXJrZWQgd2l0aCBcIjJcIiBpbiB0aGUgbGFzdCBjb2x1bW4gb2YgdGhlIHRhYmxlLlxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NJykgLy89PiAnTm92J2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU0nKSAvLz0+ICdOb3ZlbWJlcidgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU1NTScpIC8vPT4gJ04nYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTU1NJykgLy89PiAnTm92ZW1iZXInYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTU1NTScpIC8vPT4gJ05vdmVtYmVyJ2BcbiAqXG4gKiAzLiBTb21lIHBhdHRlcm5zIGNvdWxkIGJlIHVubGltaXRlZCBsZW5ndGggKHN1Y2ggYXMgYHl5eXl5eXl5YCkuXG4gKiAgICBUaGUgb3V0cHV0IHdpbGwgYmUgcGFkZGVkIHdpdGggemVyb3MgdG8gbWF0Y2ggdGhlIGxlbmd0aCBvZiB0aGUgcGF0dGVybi5cbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ3l5eXl5eXl5JykgLy89PiAnMDAwMDIwMTcnYFxuICpcbiAqIDQuIGBRUVFRUWAgYW5kIGBxcXFxcWAgY291bGQgYmUgbm90IHN0cmljdGx5IG51bWVyaWNhbCBpbiBzb21lIGxvY2FsZXMuXG4gKiAgICBUaGVzZSB0b2tlbnMgcmVwcmVzZW50IHRoZSBzaG9ydGVzdCBmb3JtIG9mIHRoZSBxdWFydGVyLlxuICpcbiAqIDUuIFRoZSBtYWluIGRpZmZlcmVuY2UgYmV0d2VlbiBgeWAgYW5kIGB1YCBwYXR0ZXJucyBhcmUgQi5DLiB5ZWFyczpcbiAqXG4gKiAgICB8IFllYXIgfCBgeWAgfCBgdWAgfFxuICogICAgfC0tLS0tLXwtLS0tLXwtLS0tLXxcbiAqICAgIHwgQUMgMSB8ICAgMSB8ICAgMSB8XG4gKiAgICB8IEJDIDEgfCAgIDEgfCAgIDAgfFxuICogICAgfCBCQyAyIHwgICAyIHwgIC0xIHxcbiAqXG4gKiAgICBBbHNvIGB5eWAgYWx3YXlzIHJldHVybnMgdGhlIGxhc3QgdHdvIGRpZ2l0cyBvZiBhIHllYXIsXG4gKiAgICB3aGlsZSBgdXVgIHBhZHMgc2luZ2xlIGRpZ2l0IHllYXJzIHRvIDIgY2hhcmFjdGVycyBhbmQgcmV0dXJucyBvdGhlciB5ZWFycyB1bmNoYW5nZWQ6XG4gKlxuICogICAgfCBZZWFyIHwgYHl5YCB8IGB1dWAgfFxuICogICAgfC0tLS0tLXwtLS0tLS18LS0tLS0tfFxuICogICAgfCAxICAgIHwgICAwMSB8ICAgMDEgfFxuICogICAgfCAxNCAgIHwgICAxNCB8ICAgMTQgfFxuICogICAgfCAzNzYgIHwgICA3NiB8ICAzNzYgfFxuICogICAgfCAxNDUzIHwgICA1MyB8IDE0NTMgfFxuICpcbiAqICAgIFRoZSBzYW1lIGRpZmZlcmVuY2UgaXMgdHJ1ZSBmb3IgbG9jYWwgYW5kIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFycyAoYFlgIGFuZCBgUmApLFxuICogICAgZXhjZXB0IGxvY2FsIHdlZWstbnVtYmVyaW5nIHllYXJzIGFyZSBkZXBlbmRlbnQgb24gYG9wdGlvbnMud2Vla1N0YXJ0c09uYFxuICogICAgYW5kIGBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZWAgKGNvbXBhcmUgW2dldElTT1dlZWtZZWFyXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL2dldElTT1dlZWtZZWFyfVxuICogICAgYW5kIFtnZXRXZWVrWWVhcl17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9nZXRXZWVrWWVhcn0pLlxuICpcbiAqIDYuIFNwZWNpZmljIG5vbi1sb2NhdGlvbiB0aW1lem9uZXMgYXJlIGN1cnJlbnRseSB1bmF2YWlsYWJsZSBpbiBgZGF0ZS1mbnNgLFxuICogICAgc28gcmlnaHQgbm93IHRoZXNlIHRva2VucyBmYWxsIGJhY2sgdG8gR01UIHRpbWV6b25lcy5cbiAqXG4gKiA3LiBUaGVzZSBwYXR0ZXJucyBhcmUgbm90IGluIHRoZSBVbmljb2RlIFRlY2huaWNhbCBTdGFuZGFyZCAjMzU6XG4gKiAgICAtIGBpYDogSVNPIGRheSBvZiB3ZWVrXG4gKiAgICAtIGBJYDogSVNPIHdlZWsgb2YgeWVhclxuICogICAgLSBgUmA6IElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gKiAgICAtIGB0YDogc2Vjb25kcyB0aW1lc3RhbXBcbiAqICAgIC0gYFRgOiBtaWxsaXNlY29uZHMgdGltZXN0YW1wXG4gKiAgICAtIGBvYDogb3JkaW5hbCBudW1iZXIgbW9kaWZpZXJcbiAqICAgIC0gYFBgOiBsb25nIGxvY2FsaXplZCBkYXRlXG4gKiAgICAtIGBwYDogbG9uZyBsb2NhbGl6ZWQgdGltZVxuICpcbiAqIDguIGBZWWAgYW5kIGBZWVlZYCB0b2tlbnMgcmVwcmVzZW50IHdlZWstbnVtYmVyaW5nIHllYXJzIGJ1dCB0aGV5IGFyZSBvZnRlbiBjb25mdXNlZCB3aXRoIHllYXJzLlxuICogICAgWW91IHNob3VsZCBlbmFibGUgYG9wdGlvbnMudXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zYCB0byB1c2UgdGhlbS4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKlxuICogOS4gYERgIGFuZCBgRERgIHRva2VucyByZXByZXNlbnQgZGF5cyBvZiB0aGUgeWVhciBidXQgdGhleSBhcmUgb2Z0ZW4gY29uZnVzZWQgd2l0aCBkYXlzIG9mIHRoZSBtb250aC5cbiAqICAgIFlvdSBzaG91bGQgZW5hYmxlIGBvcHRpb25zLnVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnNgIHRvIHVzZSB0aGVtLiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIG9yaWdpbmFsIGRhdGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBmb3JtYXQgLSB0aGUgc3RyaW5nIG9mIHRva2Vuc1xuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAtIGFuIG9iamVjdCB3aXRoIG9wdGlvbnMuXG4gKiBAcGFyYW0ge0xvY2FsZX0gW29wdGlvbnMubG9jYWxlPWRlZmF1bHRMb2NhbGVdIC0gdGhlIGxvY2FsZSBvYmplY3QuIFNlZSBbTG9jYWxlXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL0xvY2FsZX1cbiAqIEBwYXJhbSB7MHwxfDJ8M3w0fDV8Nn0gW29wdGlvbnMud2Vla1N0YXJ0c09uPTBdIC0gdGhlIGluZGV4IG9mIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsgKDAgLSBTdW5kYXkpXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlPTFdIC0gdGhlIGRheSBvZiBKYW51YXJ5LCB3aGljaCBpc1xuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy51c2VBZGRpdGlvbmFsV2Vla1llYXJUb2tlbnM9ZmFsc2VdIC0gaWYgdHJ1ZSwgYWxsb3dzIHVzYWdlIG9mIHRoZSB3ZWVrLW51bWJlcmluZyB5ZWFyIHRva2VucyBgWVlgIGFuZCBgWVlZWWA7XG4gKiAgIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy51c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zPWZhbHNlXSAtIGlmIHRydWUsIGFsbG93cyB1c2FnZSBvZiB0aGUgZGF5IG9mIHllYXIgdG9rZW5zIGBEYCBhbmQgYEREYDtcbiAqICAgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKiBAcmV0dXJucyB7U3RyaW5nfSB0aGUgZm9ybWF0dGVkIGRhdGUgc3RyaW5nXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgZGF0ZWAgbXVzdCBub3QgYmUgSW52YWxpZCBEYXRlXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy5sb2NhbGVgIG11c3QgY29udGFpbiBgbG9jYWxpemVgIHByb3BlcnR5XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy5sb2NhbGVgIG11c3QgY29udGFpbiBgZm9ybWF0TG9uZ2AgcHJvcGVydHlcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLndlZWtTdGFydHNPbmAgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDZcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZWAgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDdcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgeXl5eWAgaW5zdGVhZCBvZiBgWVlZWWAgZm9yIGZvcm1hdHRpbmcgeWVhcnMgdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gdXNlIGB5eWAgaW5zdGVhZCBvZiBgWVlgIGZvciBmb3JtYXR0aW5nIHllYXJzIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgZGAgaW5zdGVhZCBvZiBgRGAgZm9yIGZvcm1hdHRpbmcgZGF5cyBvZiB0aGUgbW9udGggdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gdXNlIGBkZGAgaW5zdGVhZCBvZiBgRERgIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGZvcm1hdCBzdHJpbmcgY29udGFpbnMgYW4gdW5lc2NhcGVkIGxhdGluIGFscGhhYmV0IGNoYXJhY3RlclxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBSZXByZXNlbnQgMTEgRmVicnVhcnkgMjAxNCBpbiBtaWRkbGUtZW5kaWFuIGZvcm1hdDpcbiAqIGNvbnN0IHJlc3VsdCA9IGZvcm1hdChuZXcgRGF0ZSgyMDE0LCAxLCAxMSksICdNTS9kZC95eXl5JylcbiAqIC8vPT4gJzAyLzExLzIwMTQnXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFJlcHJlc2VudCAyIEp1bHkgMjAxNCBpbiBFc3BlcmFudG86XG4gKiBpbXBvcnQgeyBlb0xvY2FsZSB9IGZyb20gJ2RhdGUtZm5zL2xvY2FsZS9lbydcbiAqIGNvbnN0IHJlc3VsdCA9IGZvcm1hdChuZXcgRGF0ZSgyMDE0LCA2LCAyKSwgXCJkbyAnZGUnIE1NTU0geXl5eVwiLCB7XG4gKiAgIGxvY2FsZTogZW9Mb2NhbGVcbiAqIH0pXG4gKiAvLz0+ICcyLWEgZGUganVsaW8gMjAxNCdcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRXNjYXBlIHN0cmluZyBieSBzaW5nbGUgcXVvdGUgY2hhcmFjdGVyczpcbiAqIGNvbnN0IHJlc3VsdCA9IGZvcm1hdChuZXcgRGF0ZSgyMDE0LCA2LCAyLCAxNSksIFwiaCAnbycnY2xvY2snXCIpXG4gKiAvLz0+IFwiMyBvJ2Nsb2NrXCJcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXQoZGlydHlEYXRlLCBkaXJ0eUZvcm1hdFN0ciwgb3B0aW9ucykge1xuICB2YXIgX3JlZiwgX29wdGlvbnMkbG9jYWxlLCBfcmVmMiwgX3JlZjMsIF9yZWY0LCBfb3B0aW9ucyRmaXJzdFdlZWtDb24sIF9vcHRpb25zJGxvY2FsZTIsIF9vcHRpb25zJGxvY2FsZTIkb3B0aSwgX2RlZmF1bHRPcHRpb25zJGxvY2FsLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyLCBfcmVmNSwgX3JlZjYsIF9yZWY3LCBfb3B0aW9ucyR3ZWVrU3RhcnRzT24sIF9vcHRpb25zJGxvY2FsZTMsIF9vcHRpb25zJGxvY2FsZTMkb3B0aSwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMywgX2RlZmF1bHRPcHRpb25zJGxvY2FsNDtcblxuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGZvcm1hdFN0ciA9IFN0cmluZyhkaXJ0eUZvcm1hdFN0cik7XG4gIHZhciBkZWZhdWx0T3B0aW9ucyA9IGdldERlZmF1bHRPcHRpb25zKCk7XG4gIHZhciBsb2NhbGUgPSAoX3JlZiA9IChfb3B0aW9ucyRsb2NhbGUgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMubG9jYWxlKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyRsb2NhbGUgIT09IHZvaWQgMCA/IF9vcHRpb25zJGxvY2FsZSA6IGRlZmF1bHRPcHRpb25zLmxvY2FsZSkgIT09IG51bGwgJiYgX3JlZiAhPT0gdm9pZCAwID8gX3JlZiA6IGRlZmF1bHRMb2NhbGU7XG4gIHZhciBmaXJzdFdlZWtDb250YWluc0RhdGUgPSB0b0ludGVnZXIoKF9yZWYyID0gKF9yZWYzID0gKF9yZWY0ID0gKF9vcHRpb25zJGZpcnN0V2Vla0NvbiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9vcHRpb25zJGZpcnN0V2Vla0NvbiAhPT0gdm9pZCAwID8gX29wdGlvbnMkZmlyc3RXZWVrQ29uIDogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlMiA9IG9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUyID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlMiRvcHRpID0gX29wdGlvbnMkbG9jYWxlMi5vcHRpb25zKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUyJG9wdGkgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRpb25zJGxvY2FsZTIkb3B0aS5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWY0ICE9PSB2b2lkIDAgPyBfcmVmNCA6IGRlZmF1bHRPcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZjMgIT09IHZvaWQgMCA/IF9yZWYzIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9IGRlZmF1bHRPcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9IF9kZWZhdWx0T3B0aW9ucyRsb2NhbC5vcHRpb25zKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZjIgIT09IHZvaWQgMCA/IF9yZWYyIDogMSk7IC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMSBhbmQgNyBfYW5kXyBpcyBub3QgTmFOXG5cbiAgaWYgKCEoZmlyc3RXZWVrQ29udGFpbnNEYXRlID49IDEgJiYgZmlyc3RXZWVrQ29udGFpbnNEYXRlIDw9IDcpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2ZpcnN0V2Vla0NvbnRhaW5zRGF0ZSBtdXN0IGJlIGJldHdlZW4gMSBhbmQgNyBpbmNsdXNpdmVseScpO1xuICB9XG5cbiAgdmFyIHdlZWtTdGFydHNPbiA9IHRvSW50ZWdlcigoX3JlZjUgPSAoX3JlZjYgPSAoX3JlZjcgPSAoX29wdGlvbnMkd2Vla1N0YXJ0c09uID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLndlZWtTdGFydHNPbikgIT09IG51bGwgJiYgX29wdGlvbnMkd2Vla1N0YXJ0c09uICE9PSB2b2lkIDAgPyBfb3B0aW9ucyR3ZWVrU3RhcnRzT24gOiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfb3B0aW9ucyRsb2NhbGUzID0gb3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9vcHRpb25zJGxvY2FsZTMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfb3B0aW9ucyRsb2NhbGUzJG9wdGkgPSBfb3B0aW9ucyRsb2NhbGUzLm9wdGlvbnMpID09PSBudWxsIHx8IF9vcHRpb25zJGxvY2FsZTMkb3B0aSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX29wdGlvbnMkbG9jYWxlMyRvcHRpLndlZWtTdGFydHNPbikgIT09IG51bGwgJiYgX3JlZjcgIT09IHZvaWQgMCA/IF9yZWY3IDogZGVmYXVsdE9wdGlvbnMud2Vla1N0YXJ0c09uKSAhPT0gbnVsbCAmJiBfcmVmNiAhPT0gdm9pZCAwID8gX3JlZjYgOiAoX2RlZmF1bHRPcHRpb25zJGxvY2FsMyA9IGRlZmF1bHRPcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbDQgPSBfZGVmYXVsdE9wdGlvbnMkbG9jYWwzLm9wdGlvbnMpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbDQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kZWZhdWx0T3B0aW9ucyRsb2NhbDQud2Vla1N0YXJ0c09uKSAhPT0gbnVsbCAmJiBfcmVmNSAhPT0gdm9pZCAwID8gX3JlZjUgOiAwKTsgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAwIGFuZCA2IF9hbmRfIGlzIG5vdCBOYU5cblxuICBpZiAoISh3ZWVrU3RhcnRzT24gPj0gMCAmJiB3ZWVrU3RhcnRzT24gPD0gNikpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignd2Vla1N0YXJ0c09uIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA2IGluY2x1c2l2ZWx5Jyk7XG4gIH1cblxuICBpZiAoIWxvY2FsZS5sb2NhbGl6ZSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdsb2NhbGUgbXVzdCBjb250YWluIGxvY2FsaXplIHByb3BlcnR5Jyk7XG4gIH1cblxuICBpZiAoIWxvY2FsZS5mb3JtYXRMb25nKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2xvY2FsZSBtdXN0IGNvbnRhaW4gZm9ybWF0TG9uZyBwcm9wZXJ0eScpO1xuICB9XG5cbiAgdmFyIG9yaWdpbmFsRGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuXG4gIGlmICghaXNWYWxpZChvcmlnaW5hbERhdGUpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgdGltZSB2YWx1ZScpO1xuICB9IC8vIENvbnZlcnQgdGhlIGRhdGUgaW4gc3lzdGVtIHRpbWV6b25lIHRvIHRoZSBzYW1lIGRhdGUgaW4gVVRDKzAwOjAwIHRpbWV6b25lLlxuICAvLyBUaGlzIGVuc3VyZXMgdGhhdCB3aGVuIFVUQyBmdW5jdGlvbnMgd2lsbCBiZSBpbXBsZW1lbnRlZCwgbG9jYWxlcyB3aWxsIGJlIGNvbXBhdGlibGUgd2l0aCB0aGVtLlxuICAvLyBTZWUgYW4gaXNzdWUgYWJvdXQgVVRDIGZ1bmN0aW9uczogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuXG4gIHZhciB0aW1lem9uZU9mZnNldCA9IGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMob3JpZ2luYWxEYXRlKTtcbiAgdmFyIHV0Y0RhdGUgPSBzdWJNaWxsaXNlY29uZHMob3JpZ2luYWxEYXRlLCB0aW1lem9uZU9mZnNldCk7XG4gIHZhciBmb3JtYXR0ZXJPcHRpb25zID0ge1xuICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogZmlyc3RXZWVrQ29udGFpbnNEYXRlLFxuICAgIHdlZWtTdGFydHNPbjogd2Vla1N0YXJ0c09uLFxuICAgIGxvY2FsZTogbG9jYWxlLFxuICAgIF9vcmlnaW5hbERhdGU6IG9yaWdpbmFsRGF0ZVxuICB9O1xuICB2YXIgcmVzdWx0ID0gZm9ybWF0U3RyLm1hdGNoKGxvbmdGb3JtYXR0aW5nVG9rZW5zUmVnRXhwKS5tYXAoZnVuY3Rpb24gKHN1YnN0cmluZykge1xuICAgIHZhciBmaXJzdENoYXJhY3RlciA9IHN1YnN0cmluZ1swXTtcblxuICAgIGlmIChmaXJzdENoYXJhY3RlciA9PT0gJ3AnIHx8IGZpcnN0Q2hhcmFjdGVyID09PSAnUCcpIHtcbiAgICAgIHZhciBsb25nRm9ybWF0dGVyID0gbG9uZ0Zvcm1hdHRlcnNbZmlyc3RDaGFyYWN0ZXJdO1xuICAgICAgcmV0dXJuIGxvbmdGb3JtYXR0ZXIoc3Vic3RyaW5nLCBsb2NhbGUuZm9ybWF0TG9uZyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN1YnN0cmluZztcbiAgfSkuam9pbignJykubWF0Y2goZm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCkubWFwKGZ1bmN0aW9uIChzdWJzdHJpbmcpIHtcbiAgICAvLyBSZXBsYWNlIHR3byBzaW5nbGUgcXVvdGUgY2hhcmFjdGVycyB3aXRoIG9uZSBzaW5nbGUgcXVvdGUgY2hhcmFjdGVyXG4gICAgaWYgKHN1YnN0cmluZyA9PT0gXCInJ1wiKSB7XG4gICAgICByZXR1cm4gXCInXCI7XG4gICAgfVxuXG4gICAgdmFyIGZpcnN0Q2hhcmFjdGVyID0gc3Vic3RyaW5nWzBdO1xuXG4gICAgaWYgKGZpcnN0Q2hhcmFjdGVyID09PSBcIidcIikge1xuICAgICAgcmV0dXJuIGNsZWFuRXNjYXBlZFN0cmluZyhzdWJzdHJpbmcpO1xuICAgIH1cblxuICAgIHZhciBmb3JtYXR0ZXIgPSBmb3JtYXR0ZXJzW2ZpcnN0Q2hhcmFjdGVyXTtcblxuICAgIGlmIChmb3JtYXR0ZXIpIHtcbiAgICAgIGlmICghKG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMudXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zKSAmJiBpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4oc3Vic3RyaW5nKSkge1xuICAgICAgICB0aHJvd1Byb3RlY3RlZEVycm9yKHN1YnN0cmluZywgZGlydHlGb3JtYXRTdHIsIFN0cmluZyhkaXJ0eURhdGUpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCEob3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zICE9PSB2b2lkIDAgJiYgb3B0aW9ucy51c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zKSAmJiBpc1Byb3RlY3RlZERheU9mWWVhclRva2VuKHN1YnN0cmluZykpIHtcbiAgICAgICAgdGhyb3dQcm90ZWN0ZWRFcnJvcihzdWJzdHJpbmcsIGRpcnR5Rm9ybWF0U3RyLCBTdHJpbmcoZGlydHlEYXRlKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmb3JtYXR0ZXIodXRjRGF0ZSwgc3Vic3RyaW5nLCBsb2NhbGUubG9jYWxpemUsIGZvcm1hdHRlck9wdGlvbnMpO1xuICAgIH1cblxuICAgIGlmIChmaXJzdENoYXJhY3Rlci5tYXRjaCh1bmVzY2FwZWRMYXRpbkNoYXJhY3RlclJlZ0V4cCkpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdGb3JtYXQgc3RyaW5nIGNvbnRhaW5zIGFuIHVuZXNjYXBlZCBsYXRpbiBhbHBoYWJldCBjaGFyYWN0ZXIgYCcgKyBmaXJzdENoYXJhY3RlciArICdgJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN1YnN0cmluZztcbiAgfSkuam9pbignJyk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGNsZWFuRXNjYXBlZFN0cmluZyhpbnB1dCkge1xuICB2YXIgbWF0Y2hlZCA9IGlucHV0Lm1hdGNoKGVzY2FwZWRTdHJpbmdSZWdFeHApO1xuXG4gIGlmICghbWF0Y2hlZCkge1xuICAgIHJldHVybiBpbnB1dDtcbiAgfVxuXG4gIHJldHVybiBtYXRjaGVkWzFdLnJlcGxhY2UoZG91YmxlUXVvdGVSZWdFeHAsIFwiJ1wiKTtcbn0iLCJpbXBvcnQgeyBmb3JtYXQsIGNvbXBhcmVBc2MsIHRvRGF0ZSwgcGFyc2VJU08gfSBmcm9tICdkYXRlLWZucyc7XG5cbmNvbnN0IHV0aWxpdHlGdW5jdGlvbnMgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGZvcm1hdERhdGUoZGF0ZSwgdHlwZSkge1xuICAgICAgICByZXR1cm4gZm9ybWF0KG5ldyBEYXRlKGRhdGUpLCB0eXBlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVFbGVtZW50V2l0aENsYXNzKGVsLCBwcm9wZXJ0aWVzKSB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGVsKTtcbiAgICAgICAgLy8gU2V0cyB0aGUgcHJvcGVydGllcyBvZiBlbGVtZW50IGluIHByb3BlcnRpZXMgb2JqZWN0XG4gICAgICAgIGZvciAobGV0IFtrZXksIHZhbF0gb2YgT2JqZWN0LmVudHJpZXMocHJvcGVydGllcykpIHtcbiAgICAgICAgICAgIGlmIChrZXkgPT09ICdldmVudCcpXG4gICAgICAgICAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzLmV2ZW50LnR5cGUsXG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXMuZXZlbnQuZnVuY3Rpb25OYW1lXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGVsc2UgZWxlbWVudFtrZXldID0gdmFsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgfVxuXG4gICAgLy8gRGlzcGxheXMgaW5wdXQgdmFsaWRhdGlvbiBlcnJvclxuICAgIGZ1bmN0aW9uIHNob3dJbnB1dFZhbGlkYXRpb25FcnJvcihlbCkge1xuICAgICAgICBpZiAoIWlzSW5wdXRWYWxpZGF0aW9uQ29ycmVjdChlbCkpIHtcbiAgICAgICAgICAgIGVsLnNldEN1c3RvbVZhbGlkaXR5KFxuICAgICAgICAgICAgICAgIGBUaGlzIGlucHV0IG11c3QgYmUgYXQgbGVhc3QgJHtlbC5taW5MZW5ndGh9IGNoYXJhY3RlcnMhYFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGVsLnJlcG9ydFZhbGlkaXR5KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbC5zZXRDdXN0b21WYWxpZGl0eSgnJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDaGVja3MgdGhlIGlucHV0J3MgdmFsaWRhdGlvblxuICAgIGZ1bmN0aW9uIGlzSW5wdXRWYWxpZGF0aW9uQ29ycmVjdChlbCkge1xuICAgICAgICBpZiAoZWwudmFsaWRpdHkudG9vU2hvcnQgfHwgZWwudmFsdWUgPT09ICcnKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gZWxzZSByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZm9ybWF0RGF0ZSxcbiAgICAgICAgY3JlYXRlRWxlbWVudFdpdGhDbGFzcyxcbiAgICAgICAgaXNJbnB1dFZhbGlkYXRpb25Db3JyZWN0LFxuICAgICAgICBzaG93SW5wdXRWYWxpZGF0aW9uRXJyb3IsXG4gICAgfTtcbn0pKCk7XG5cbmV4cG9ydCBkZWZhdWx0IHV0aWxpdHlGdW5jdGlvbnM7XG4iLCJjb25zdCBsb2NhbFN0b3JhZ2VNb2R1bGUgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIHNhdmVBY2NvdW50KGFjY291bnQpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IHtcbiAgICAgICAgICAgIHVzZXJuYW1lOiBhY2NvdW50LnVzZXJuYW1lLFxuICAgICAgICAgICAgdG9kb3M6IGFjY291bnQudG9kb3MsXG4gICAgICAgICAgICBpZDogYWNjb3VudC5pZCxcbiAgICAgICAgICAgIGRhcmtNb2RlOiBhY2NvdW50LmRhcmtNb2RlLFxuICAgICAgICB9O1xuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnYWNjb3VudCcsIEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbml0aWFsaXplQWNjb3VudFByb3BlcnRpZXMoYWNjb3VudCkge1xuICAgICAgICBjb25zdCBkYXRhID0gZ2V0QWNjb3VudCgpO1xuICAgICAgICBhY2NvdW50LnVzZXJuYW1lID0gZGF0YS51c2VybmFtZTtcbiAgICAgICAgYWNjb3VudC50b2RvcyA9IGRhdGEudG9kb3M7XG4gICAgICAgIGFjY291bnQuaWQgPSBkYXRhLmlkO1xuICAgICAgICBhY2NvdW50LmRhcmtNb2RlID0gZGF0YS5kYXJrTW9kZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRBY2NvdW50KCkge1xuICAgICAgICBjb25zdCBkYXRhID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2FjY291bnQnKTtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoZGF0YSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgc2F2ZUFjY291bnQsIGluaXRpYWxpemVBY2NvdW50UHJvcGVydGllcywgZ2V0QWNjb3VudCB9O1xufSkoKTtcblxuZXhwb3J0IGRlZmF1bHQgbG9jYWxTdG9yYWdlTW9kdWxlO1xuIiwiaW1wb3J0IGFjY291bnQgZnJvbSAnLi9hY2NvdW50LmpzJztcbmltcG9ydCBVSSBmcm9tICcuL1VJLmpzJztcbmltcG9ydCB1dGlsaXR5RnVuY3Rpb25zIGZyb20gJy4vdXRpbGl0eS5qcyc7XG5pbXBvcnQgbG9jYWxTdG9yYWdlTW9kdWxlIGZyb20gJy4vbG9jYWxTdG9yYWdlLmpzJztcblxuY29uc3QgdG9kb3MgPSAoZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IG15QWNjb3VudCA9IGFjY291bnQ7XG4gICAgY29uc3QgbXlVdGlsaXR5RnVuY3Rpb25zID0gdXRpbGl0eUZ1bmN0aW9ucztcbiAgICBjb25zdCB0b2Rvc1NlY3Rpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudG9kb3Mtc2VjdGlvbicpO1xuICAgIGNvbnN0IG15TG9jYWxTdG9yYWdlID0gbG9jYWxTdG9yYWdlTW9kdWxlO1xuXG4gICAgLy8gaW5pdGlhbGl6ZXMgbXlBY2NvdW50IG1vZHVsZSBpZiBhY2NvdW50IGlzIHNhdmVkIHRvIGxvY2Fsc3RvcmFnZVxuICAgIGlmIChteUxvY2FsU3RvcmFnZS5nZXRBY2NvdW50KCkpXG4gICAgICAgIG15TG9jYWxTdG9yYWdlLmluaXRpYWxpemVBY2NvdW50UHJvcGVydGllcyhteUFjY291bnQpO1xuXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLyBDUkVBVElORyBUT0RPIEVMRU1FTlRTXG4gICAgLy8gQ3JlYXRlcyBlbGVtZW50cyB0byBkaXNwbGF5IGVhY2ggdG9kb1xuICAgIGZ1bmN0aW9uIF9jcmVhdGVUb2RvQ29udGFpbmVyKHRvZG8pIHtcbiAgICAgICAgY29uc3QgZGl2ID0gbXlVdGlsaXR5RnVuY3Rpb25zLmNyZWF0ZUVsZW1lbnRXaXRoQ2xhc3MoJ2RpdicsIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogJ3RvZG8tY29udGFpbmVyJyxcbiAgICAgICAgICAgIGV2ZW50OiB7IHR5cGU6ICdjbGljaycsIGZ1bmN0aW9uTmFtZTogc3dpdGNoQ29tcGxldGVUb2RvIH0sXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBkaXZMZWZ0ID0gbXlVdGlsaXR5RnVuY3Rpb25zLmNyZWF0ZUVsZW1lbnRXaXRoQ2xhc3MoJ2RpdicsIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogJ3RvZG8tY29udGFpbmVyLWxlZnQnLFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgZGl2UmlnaHQgPSBteVV0aWxpdHlGdW5jdGlvbnMuY3JlYXRlRWxlbWVudFdpdGhDbGFzcygnZGl2Jywge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiAndG9kby1jb250YWluZXItcmlnaHQnLFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgY29tcGxldGVCdG4gPSBteVV0aWxpdHlGdW5jdGlvbnMuY3JlYXRlRWxlbWVudFdpdGhDbGFzcyhcbiAgICAgICAgICAgICdidXR0b24nLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ3RvZG8taXNDb21wbGV0ZWQnLFxuICAgICAgICAgICAgICAgIGV2ZW50OiB7IHR5cGU6ICdjbGljaycsIGZ1bmN0aW9uTmFtZTogZGVsZXRlVG9kbyB9LFxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICBjb25zdCBwID0gbXlVdGlsaXR5RnVuY3Rpb25zLmNyZWF0ZUVsZW1lbnRXaXRoQ2xhc3MoJ3AnLCB7XG4gICAgICAgICAgICBjbGFzc05hbWU6ICd0b2RvLWNvbnRlbnQnLFxuICAgICAgICAgICAgdGV4dENvbnRlbnQ6IHRvZG8uY29udGVudCxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHNwYW4gPSBteVV0aWxpdHlGdW5jdGlvbnMuY3JlYXRlRWxlbWVudFdpdGhDbGFzcygnc3BhbicsIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogJ3RvZG8tZGF0ZScsXG4gICAgICAgICAgICB0ZXh0Q29udGVudDogbXlVdGlsaXR5RnVuY3Rpb25zLmZvcm1hdERhdGUoXG4gICAgICAgICAgICAgICAgbmV3IERhdGUodG9kby5kYXRlKSxcbiAgICAgICAgICAgICAgICAnRUVFIGRvIE1NTSB5eXl5J1xuICAgICAgICAgICAgKSxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGVkaXRCdG4gPSBteVV0aWxpdHlGdW5jdGlvbnMuY3JlYXRlRWxlbWVudFdpdGhDbGFzcygnYnV0dG9uJywge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiAndG9kby1lZGl0JyxcbiAgICAgICAgICAgIHRleHRDb250ZW50OiAnRWRpdCcsXG4gICAgICAgICAgICBldmVudDogeyB0eXBlOiAnY2xpY2snLCBmdW5jdGlvbk5hbWU6IGRpc3BsYXlFZGl0VG9kb0Zvcm0gfSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHRvZG8uaXNDb21wbGV0ZWQpIHtcbiAgICAgICAgICAgIHAuc3R5bGUudGV4dERlY29yYXRpb24gPSAnbGluZS10aHJvdWdoJztcbiAgICAgICAgICAgIHNwYW4uc3R5bGUudGV4dERlY29yYXRpb24gPSAnbGluZS10aHJvdWdoJztcbiAgICAgICAgfVxuXG4gICAgICAgIGRpdkxlZnQuYXBwZW5kKGNvbXBsZXRlQnRuLCBwLCBlZGl0QnRuKTtcbiAgICAgICAgZGl2UmlnaHQuYXBwZW5kKHNwYW4pO1xuICAgICAgICBkaXYuYXBwZW5kKGRpdkxlZnQsIGRpdlJpZ2h0KTtcblxuICAgICAgICByZXR1cm4gZGl2O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIF9jcmVhdGVFZGl0VG9kb0Zvcm0oZWwpIHtcbiAgICAgICAgY29uc3QgY3VyVG9kb0NvbnRhaW5lciA9IGVsLmNsb3Nlc3QoJy50b2RvLWNvbnRhaW5lcicpO1xuICAgICAgICBjb25zdCBjdXJUb2RvQ29udGVudCA9XG4gICAgICAgICAgICBjdXJUb2RvQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy50b2RvLWNvbnRlbnQnKS50ZXh0Q29udGVudDtcblxuICAgICAgICBjb25zdCBjdXJUb2RvRGF0ZSA9IG15QWNjb3VudC5nZXRUb2RvRGF0ZShcbiAgICAgICAgICAgIGN1clRvZG9Db250ZW50LFxuICAgICAgICAgICAgbXlBY2NvdW50LnRvZG9zXG4gICAgICAgICk7XG4gICAgICAgIC8vIGdpdmVzIHRoZSB0b2RvIGNvbnRlbnQgYXMgZWRpdCBmb3JtIGNsYXNzbmFtZVxuICAgICAgICBjb25zdCBjb250YWluZXIgPSBteVV0aWxpdHlGdW5jdGlvbnMuY3JlYXRlRWxlbWVudFdpdGhDbGFzcygnZGl2Jywge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiBgZWRpdC10b2RvLWNvbnRhaW5lciBlZGl0LXRvZG8tY29udGFpbmVyLSR7Y3VyVG9kb0NvbnRlbnQucmVwbGFjZShcbiAgICAgICAgICAgICAgICAvIC9nLFxuICAgICAgICAgICAgICAgICctJ1xuICAgICAgICAgICAgKX1gLFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgY29udGVudElucHV0ID0gbXlVdGlsaXR5RnVuY3Rpb25zLmNyZWF0ZUVsZW1lbnRXaXRoQ2xhc3MoXG4gICAgICAgICAgICAnaW5wdXQnLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ2VkaXQtdG9kby1jb250ZW50LWlucHV0JyxcbiAgICAgICAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGN1clRvZG9Db250ZW50LFxuICAgICAgICAgICAgICAgIG1pbkxlbmd0aDogMyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgZGF0ZUlucHV0ID0gbXlVdGlsaXR5RnVuY3Rpb25zLmNyZWF0ZUVsZW1lbnRXaXRoQ2xhc3MoJ2lucHV0Jywge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiAnZWRpdC10b2RvLWRhdGUtaW5wdXQnLFxuICAgICAgICAgICAgdHlwZTogJ2RhdGUnLFxuICAgICAgICAgICAgdmFsdWU6IG15VXRpbGl0eUZ1bmN0aW9ucy5mb3JtYXREYXRlKFxuICAgICAgICAgICAgICAgIG5ldyBEYXRlKGN1clRvZG9EYXRlKSxcbiAgICAgICAgICAgICAgICAneXl5eS1NTS1kZCdcbiAgICAgICAgICAgICksXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBidG5Db250YWluZXIgPSBteVV0aWxpdHlGdW5jdGlvbnMuY3JlYXRlRWxlbWVudFdpdGhDbGFzcygnZGl2Jywge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiAndG9kby1mb3JtLWJ0bi1jb250YWluZXIgZWRpdC10b2RvLWJ0bi1jb250YWluZXInLFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgZWRpdEJ0biA9IG15VXRpbGl0eUZ1bmN0aW9ucy5jcmVhdGVFbGVtZW50V2l0aENsYXNzKCdidXR0b24nLCB7XG4gICAgICAgICAgICBjbGFzc05hbWU6ICdmb3JtLWJ0bi1hZGQtZWRpdCBlZGl0LXRvZG8tZm9ybS1idG4nLFxuICAgICAgICAgICAgdGV4dENvbnRlbnQ6ICdFZGl0JyxcbiAgICAgICAgICAgIHR5cGU6ICdidXR0b24nLFxuICAgICAgICAgICAgZXZlbnQ6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnY2xpY2snLFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uTmFtZTogZWRpdFRvZG8sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgY2FuY2VsQnRuID0gbXlVdGlsaXR5RnVuY3Rpb25zLmNyZWF0ZUVsZW1lbnRXaXRoQ2xhc3MoJ2J1dHRvbicsIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogJ2NhbmNlbC10b2RvLWZvcm0tYnRuIGZvcm0tYnRuLWNhbmNlbCcsXG4gICAgICAgICAgICB0ZXh0Q29udGVudDogJ0NhbmNlbCcsXG4gICAgICAgICAgICB0eXBlOiAnYnV0dG9uJyxcbiAgICAgICAgICAgIGV2ZW50OiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2NsaWNrJyxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbk5hbWU6IHJlbW92ZUVkaXRUb2RvRm9ybSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnRlbnRJbnB1dC5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICAgICAgJ2lucHV0JyxcbiAgICAgICAgICAgIG15VXRpbGl0eUZ1bmN0aW9ucy5zaG93SW5wdXRWYWxpZGF0aW9uRXJyb3IuYmluZChcbiAgICAgICAgICAgICAgICBjb250ZW50SW5wdXQsXG4gICAgICAgICAgICAgICAgY29udGVudElucHV0XG4gICAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICAgIGJ0bkNvbnRhaW5lci5hcHBlbmQoZWRpdEJ0biwgY2FuY2VsQnRuKTtcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZChjb250ZW50SW5wdXQsIGRhdGVJbnB1dCwgYnRuQ29udGFpbmVyKTtcbiAgICAgICAgcmV0dXJuIGNvbnRhaW5lcjtcbiAgICB9XG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBBRERJTkcgVE9ET1NcbiAgICBmdW5jdGlvbiBhZGRUb2RvKGUpIHtcbiAgICAgICAgLy8gSWYgdG9kbyBuYW1lIGlzIGxlc3MgdGhhbiAzIGNoYXJhY3RlcnMgcmV0dXJuc1xuICAgICAgICBjb25zdCBuYW1lSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYWRkLXRvZG8tZm9ybS1uYW1lLWlucHV0Jyk7XG4gICAgICAgIGlmICghbXlVdGlsaXR5RnVuY3Rpb25zLmlzSW5wdXRWYWxpZGF0aW9uQ29ycmVjdChuYW1lSW5wdXQpKSB7XG4gICAgICAgICAgICBteVV0aWxpdHlGdW5jdGlvbnMuc2hvd0lucHV0VmFsaWRhdGlvbkVycm9yKG5hbWVJbnB1dCk7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdG9kb05hbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgICAgJy5hZGQtdG9kby1mb3JtLW5hbWUtaW5wdXQnXG4gICAgICAgICkudmFsdWU7XG4gICAgICAgIGNvbnN0IGZvcm1hdHRlZE5hbWUgPSB0b2RvTmFtZVswXS50b1VwcGVyQ2FzZSgpICsgdG9kb05hbWUuc2xpY2UoMSk7XG4gICAgICAgIGNvbnN0IHRvZG9EYXRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICAgICcuYWRkLXRvZG8tZm9ybS1kYXRlLWlucHV0J1xuICAgICAgICApLnZhbHVlO1xuICAgICAgICBjb25zdCBmb3JtYXR0ZWREYXRlID0gbXlVdGlsaXR5RnVuY3Rpb25zLmZvcm1hdERhdGUoXG4gICAgICAgICAgICBuZXcgRGF0ZSh0b2RvRGF0ZSksXG4gICAgICAgICAgICAnTU0vZGQveXl5eSdcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgbmV3VG9kbyA9IG15QWNjb3VudC5Ub2RvKGZvcm1hdHRlZE5hbWUsIGZvcm1hdHRlZERhdGUpO1xuXG4gICAgICAgIC8vIGFkZHMgdG9kbyB0byBhcnJheSB0aGFuIHB1c2hlcyBpdCB0byBtb2NrIEFQSVxuICAgICAgICBteUFjY291bnQudG9kb3MucHVzaChuZXdUb2RvKTtcbiAgICAgICAgZGlzcGxheVVzZXJUb2RvcyhteUFjY291bnQudG9kb3MpO1xuICAgICAgICBkaXNwbGF5QWRkVG9kb0J1dHRvbih0b2Rvc1NlY3Rpb24pO1xuICAgICAgICBteUFjY291bnQudXBkYXRlVXNlclRvZG9zKFxuICAgICAgICAgICAgbXlBY2NvdW50LnVzZXJuYW1lLFxuICAgICAgICAgICAgbXlBY2NvdW50LnRvZG9zLFxuICAgICAgICAgICAgbXlBY2NvdW50LmlkXG4gICAgICAgICk7XG4gICAgICAgIC8vIHNhdmVzIHRvIGxvY2Fsc3RvcmFnZVxuICAgICAgICBteUxvY2FsU3RvcmFnZS5zYXZlQWNjb3VudChteUFjY291bnQpO1xuICAgIH1cbiAgICAvLyBDcmVhdGVzIGlucHV0IGZvcm0gZm9yIGFkZGluZyB0b2RvIGFuZCBkaXNwbGF5cyBpdFxuICAgIGZ1bmN0aW9uIGRpc3BsYXlBZGRUb2RvRm9ybSgpIHtcbiAgICAgICAgcmVtb3ZlQWRkVG9kb0J0bigpO1xuICAgICAgICBjb25zdCBhZGRUb2RvQ29udGFpbmVyID0gbXlVdGlsaXR5RnVuY3Rpb25zLmNyZWF0ZUVsZW1lbnRXaXRoQ2xhc3MoXG4gICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnYWRkLXRvZG8tZm9ybS1jb250YWluZXInIH1cbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgaW5wdXRDb250YWluZXIgPSBteVV0aWxpdHlGdW5jdGlvbnMuY3JlYXRlRWxlbWVudFdpdGhDbGFzcyhcbiAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgeyBjbGFzc05hbWU6ICd0b2RvLWZvcm0taW5wdXQtY29udGFpbmVyJyB9XG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IG5hbWVJbnB1dCA9IG15VXRpbGl0eUZ1bmN0aW9ucy5jcmVhdGVFbGVtZW50V2l0aENsYXNzKCdpbnB1dCcsIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogJ2FkZC10b2RvLWZvcm0tbmFtZS1pbnB1dCcsXG4gICAgICAgICAgICBwbGFjZWhvbGRlcjogJ1RvZG8gTmFtZScsXG4gICAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgICBzcGVsbGNoZWNrOiBmYWxzZSxcbiAgICAgICAgICAgIG1pbkxlbmd0aDogMyxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGRhdGVJbnB1dCA9IG15VXRpbGl0eUZ1bmN0aW9ucy5jcmVhdGVFbGVtZW50V2l0aENsYXNzKCdpbnB1dCcsIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogJ2FkZC10b2RvLWZvcm0tZGF0ZS1pbnB1dCcsXG4gICAgICAgICAgICB0eXBlOiAnZGF0ZScsXG4gICAgICAgICAgICB2YWx1ZTogbXlVdGlsaXR5RnVuY3Rpb25zLmZvcm1hdERhdGUobmV3IERhdGUoKSwgJ3l5eXktTU0tZGQnKSxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGJ0bkNvbnRhaW5lciA9IG15VXRpbGl0eUZ1bmN0aW9ucy5jcmVhdGVFbGVtZW50V2l0aENsYXNzKCdkaXYnLCB7XG4gICAgICAgICAgICBjbGFzc05hbWU6ICd0b2RvLWZvcm0tYnRuLWNvbnRhaW5lcicsXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBhZGRCdG4gPSBteVV0aWxpdHlGdW5jdGlvbnMuY3JlYXRlRWxlbWVudFdpdGhDbGFzcygnYnV0dG9uJywge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiAnYWRkLXRvZG8tZm9ybS1idG4gZm9ybS1idG4tYWRkLWVkaXQnLFxuICAgICAgICAgICAgdGV4dENvbnRlbnQ6ICdBZGQnLFxuICAgICAgICAgICAgZXZlbnQ6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnY2xpY2snLFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uTmFtZTogYWRkVG9kbyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBjYW5jZWxCdG4gPSBteVV0aWxpdHlGdW5jdGlvbnMuY3JlYXRlRWxlbWVudFdpdGhDbGFzcygnYnV0dG9uJywge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiAnY2FuY2VsLXRvZG8tZm9ybS1idG4gZm9ybS1idG4tY2FuY2VsJyxcbiAgICAgICAgICAgIHRleHRDb250ZW50OiAnQ2FuY2VsJyxcbiAgICAgICAgICAgIGV2ZW50OiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2NsaWNrJyxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbk5hbWU6IHJlbW92ZUFkZFRvZG9Gb3JtLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIG5hbWVJbnB1dC5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICAgICAgJ2NsaWNrJyxcbiAgICAgICAgICAgIG15VXRpbGl0eUZ1bmN0aW9ucy5zaG93SW5wdXRWYWxpZGF0aW9uRXJyb3IuYmluZChcbiAgICAgICAgICAgICAgICBuYW1lSW5wdXQsXG4gICAgICAgICAgICAgICAgbmFtZUlucHV0XG4gICAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICAgIGlucHV0Q29udGFpbmVyLmFwcGVuZChuYW1lSW5wdXQsIGRhdGVJbnB1dCk7XG4gICAgICAgIGJ0bkNvbnRhaW5lci5hcHBlbmQoYWRkQnRuLCBjYW5jZWxCdG4pO1xuICAgICAgICBhZGRUb2RvQ29udGFpbmVyLmFwcGVuZChpbnB1dENvbnRhaW5lciwgYnRuQ29udGFpbmVyKTtcbiAgICAgICAgdG9kb3NTZWN0aW9uLmFwcGVuZENoaWxkKGFkZFRvZG9Db250YWluZXIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbW92ZUFkZFRvZG9Gb3JtKCkge1xuICAgICAgICBjb25zdCBmb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFkZC10b2RvLWZvcm0tY29udGFpbmVyJyk7XG4gICAgICAgIGZvcm0ucmVtb3ZlKCk7XG4gICAgICAgIGRpc3BsYXlBZGRUb2RvQnV0dG9uKHRvZG9zU2VjdGlvbik7XG4gICAgfVxuICAgIC8vIENyZWF0ZXMgYWRkIHRvZG8gYnV0dG9uXG4gICAgZnVuY3Rpb24gY3JlYXRlQWRkVG9kb0J0bigpIHtcbiAgICAgICAgY29uc3QgYnRuID0gdXRpbGl0eUZ1bmN0aW9ucy5jcmVhdGVFbGVtZW50V2l0aENsYXNzKCdidXR0b24nLCB7XG4gICAgICAgICAgICBjbGFzc05hbWU6ICdhZGQtdG9kby1idG4nLFxuICAgICAgICAgICAgaW5uZXJIVE1MOiBgPD94bWwgdmVyc2lvbj1cIjEuMFwiID8+PCFET0NUWVBFIHN2ZyAgUFVCTElDICctLy9XM0MvL0RURCBTVkcgMS4xLy9FTicgICdodHRwOi8vd3d3LnczLm9yZy9HcmFwaGljcy9TVkcvMS4xL0RURC9zdmcxMS5kdGQnPjxzdmcgXG4gICAgICAgICAgICAgICAgY2xhc3M9XCJhZGQtdG9kby1pY29uXCIgaGVpZ2h0PVwiMzJweFwiIGlkPVwiTGF5ZXJfMVwiIHN0eWxlPVwiZW5hYmxlLWJhY2tncm91bmQ6bmV3IDAgMCAzMiAzMjtcIiB2ZXJzaW9uPVwiMS4xXCIgdmlld0JveD1cIjAgMCAzMiAzMlwiIHdpZHRoPVwiMzJweFwiIHhtbDpzcGFjZT1cInByZXNlcnZlXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHhtbG5zOnhsaW5rPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiPjxwYXRoIGQ9XCJNMjgsMTRIMThWNGMwLTEuMTA0LTAuODk2LTItMi0ycy0yLDAuODk2LTIsMnYxMEg0Yy0xLjEwNCwwLTIsMC44OTYtMiwyczAuODk2LDIsMiwyaDEwdjEwYzAsMS4xMDQsMC44OTYsMiwyLDIgIHMyLTAuODk2LDItMlYxOGgxMGMxLjEwNCwwLDItMC44OTYsMi0yUzI5LjEwNCwxNCwyOCwxNHpcIi8+PC9zdmc+IEFkZCBUb2RvYCxcbiAgICAgICAgICAgIGV2ZW50OiB7IHR5cGU6ICdjbGljaycsIGZ1bmN0aW9uTmFtZTogZGlzcGxheUFkZFRvZG9Gb3JtIH0sXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBidG47XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVtb3ZlQWRkVG9kb0J0bigpIHtcbiAgICAgICAgY29uc3QgYnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFkZC10b2RvLWJ0bicpO1xuICAgICAgICBidG4ucmVtb3ZlKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGlzcGxheUFkZFRvZG9CdXR0b24oZWwpIHtcbiAgICAgICAgZWwuYXBwZW5kQ2hpbGQoY3JlYXRlQWRkVG9kb0J0bigpKTtcbiAgICB9XG5cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vIEVESVQgVE9ET1NcbiAgICBmdW5jdGlvbiBkaXNwbGF5RWRpdFRvZG9Gb3JtKGUpIHtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgY29uc3Qgb3ZlcmxheSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5vdmVybGF5LWdlbmVyYWwnKTtcbiAgICAgICAgY29uc3QgZWRpdFRvZG9Gb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmVkaXQtdG9kby1mb3JtJyk7XG4gICAgICAgIG92ZXJsYXkuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XG4gICAgICAgIGVkaXRUb2RvRm9ybS5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTtcbiAgICAgICAgZWRpdFRvZG9Gb3JtLmFwcGVuZENoaWxkKF9jcmVhdGVFZGl0VG9kb0Zvcm0odGhpcykpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbW92ZUVkaXRUb2RvRm9ybSgpIHtcbiAgICAgICAgY29uc3Qgb3ZlcmxheSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5vdmVybGF5LWdlbmVyYWwnKTtcbiAgICAgICAgY29uc3QgZWRpdFRvZG9Gb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmVkaXQtdG9kby1mb3JtJyk7XG4gICAgICAgIG92ZXJsYXkuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XG4gICAgICAgIGVkaXRUb2RvRm9ybS5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcbiAgICAgICAgX2NsZWFyQWxsQ2hpbGRzKGVkaXRUb2RvRm9ybSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3dpdGNoQ29tcGxldGVUb2RvKGUpIHtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgY29uc3QgdXNlcm5hbWUgPSBteUFjY291bnQudXNlcm5hbWU7XG4gICAgICAgIGNvbnN0IHRvZG9Db250YWluZXIgPSB0aGlzO1xuICAgICAgICBjb25zdCB0b2RvQ29udGVudEVsID0gdG9kb0NvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcudG9kby1jb250ZW50Jyk7XG4gICAgICAgIGNvbnN0IHRvZG9Db250ZW50ID0gdG9kb0NvbnRlbnRFbC50ZXh0Q29udGVudDtcbiAgICAgICAgY29uc3QgdG9kb0RhdGUgPSB0b2RvQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy50b2RvLWRhdGUnKTtcbiAgICAgICAgY29uc3QgdXNlclRvZG9zID0gbXlBY2NvdW50LnRvZG9zO1xuXG4gICAgICAgIC8vIFN0cmlrZXMgdGhyb3VnaCB0aGUgdG9kbyBpZiBpdHMgY29tcGxldGVkIG9yIGRlbGV0ZXMgdGhlIHN0cmlrZXRob3VnaCBvdGhlcndpc2VcbiAgICAgICAgdG9kb0NvbnRlbnRFbC5zdHlsZS50ZXh0RGVjb3JhdGlvbiA9XG4gICAgICAgICAgICB0b2RvQ29udGVudEVsLnN0eWxlLnRleHREZWNvcmF0aW9uID09PSAnbGluZS10aHJvdWdoJ1xuICAgICAgICAgICAgICAgID8gJ25vbmUnXG4gICAgICAgICAgICAgICAgOiAnbGluZS10aHJvdWdoJztcbiAgICAgICAgdG9kb0RhdGUuc3R5bGUudGV4dERlY29yYXRpb24gPVxuICAgICAgICAgICAgdG9kb0RhdGUuc3R5bGUudGV4dERlY29yYXRpb24gPT09ICdsaW5lLXRocm91Z2gnXG4gICAgICAgICAgICAgICAgPyAnbm9uZSdcbiAgICAgICAgICAgICAgICA6ICdsaW5lLXRocm91Z2gnO1xuXG4gICAgICAgIG15QWNjb3VudC5zd2l0Y2hDb21wbGV0ZVVzZXJUb2RvKHVzZXJUb2RvcywgdG9kb0NvbnRlbnQpO1xuICAgICAgICBteUFjY291bnQudXBkYXRlVXNlclRvZG9zKHVzZXJuYW1lLCB1c2VyVG9kb3MsIG15QWNjb3VudC5pZCk7XG4gICAgICAgIC8vIHNhdmVzIHRvIGxvY2Fsc3RvcmFnZVxuICAgICAgICBteUxvY2FsU3RvcmFnZS5zYXZlQWNjb3VudChteUFjY291bnQpO1xuICAgIH1cblxuICAgIC8vIGdldHMgdGhlIHRvZG8gY29udGVudCBmcm9tIHRoZSBjb250YWluZXIgZWxlbWVudCdzIGNsYXNzbmFtZVxuICAgIGZ1bmN0aW9uIF9nZXRUb2RvQ29udGVudCgpIHtcbiAgICAgICAgY29uc3QgZWRpdFRvZG9Db250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgICAgJy5lZGl0LXRvZG8tY29udGFpbmVyJ1xuICAgICAgICApO1xuICAgICAgICBsZXQgdG9kb0NvbnRlbnQgPSBlZGl0VG9kb0NvbnRhaW5lci5jbGFzc05hbWVcbiAgICAgICAgICAgIC5zcGxpdCgnICcpWzFdXG4gICAgICAgICAgICAuc3BsaXQoJ2VkaXQtdG9kby1jb250YWluZXItJylbMV07XG4gICAgICAgIHRvZG9Db250ZW50ID0gdG9kb0NvbnRlbnQucmVwbGFjZSgvLS9nLCAnICcpO1xuICAgICAgICByZXR1cm4gdG9kb0NvbnRlbnQ7XG4gICAgfVxuXG4gICAgYXN5bmMgZnVuY3Rpb24gZWRpdFRvZG8oZSkge1xuICAgICAgICBjb25zdCB0b2RvSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZWRpdC10b2RvLWNvbnRlbnQtaW5wdXQnKTtcblxuICAgICAgICAvLyBJZiBlZGl0ZWQgdG9kbyBjb250ZW50IGlzIGxlc3MgdGhhbiAzIGNoYXJhY3RlcnMgcHJldmVudFxuICAgICAgICBpZiAoIW15VXRpbGl0eUZ1bmN0aW9ucy5pc0lucHV0VmFsaWRhdGlvbkNvcnJlY3QodG9kb0lucHV0KSkge1xuICAgICAgICAgICAgbXlVdGlsaXR5RnVuY3Rpb25zLnNob3dJbnB1dFZhbGlkYXRpb25FcnJvcih0b2RvSW5wdXQpO1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIGdldHMgb2xkIGNvbnRlbnQsbmV3IGNvbnRlbnQgYW5kIG5ldyBkYXRlXG4gICAgICAgIGNvbnN0IHRvZG9Db250ZW50ID0gX2dldFRvZG9Db250ZW50KCk7XG4gICAgICAgIGNvbnN0IHVwZGF0ZWRDb250ZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICAgICcuZWRpdC10b2RvLWNvbnRlbnQtaW5wdXQnXG4gICAgICAgICkudmFsdWU7XG4gICAgICAgIGNvbnN0IHVwZGF0ZWREYXRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICAgICcuZWRpdC10b2RvLWRhdGUtaW5wdXQnXG4gICAgICAgICkudmFsdWU7XG5cbiAgICAgICAgLy8gZWRpdHMgdXNlcnRvZG9zXG4gICAgICAgIG15QWNjb3VudC5lZGl0VXNlclRvZG8oXG4gICAgICAgICAgICBteUFjY291bnQudG9kb3MsXG4gICAgICAgICAgICB0b2RvQ29udGVudCxcbiAgICAgICAgICAgIHVwZGF0ZWRDb250ZW50LFxuICAgICAgICAgICAgdXBkYXRlZERhdGVcbiAgICAgICAgKTtcbiAgICAgICAgZGlzcGxheVVzZXJUb2RvcyhteUFjY291bnQudG9kb3MpO1xuICAgICAgICByZW1vdmVFZGl0VG9kb0Zvcm0oKTtcbiAgICAgICAgZGlzcGxheUFkZFRvZG9CdXR0b24odG9kb3NTZWN0aW9uKTtcblxuICAgICAgICAvLyBwdXNoZXMgdG9kb3MgdG8gbW9jayBBUElcbiAgICAgICAgbXlBY2NvdW50LnVwZGF0ZVVzZXJUb2RvcyhcbiAgICAgICAgICAgIG15QWNjb3VudC51c2VybmFtZSxcbiAgICAgICAgICAgIG15QWNjb3VudC50b2RvcyxcbiAgICAgICAgICAgIG15QWNjb3VudC5pZFxuICAgICAgICApO1xuICAgICAgICAvLyBzYXZlcyB0byBsb2NhbHN0b3JhZ2VcbiAgICAgICAgbXlMb2NhbFN0b3JhZ2Uuc2F2ZUFjY291bnQobXlBY2NvdW50KTtcbiAgICB9XG5cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vIERFTEVURSBUT0RPU1xuICAgIGZ1bmN0aW9uIGRlbGV0ZVRvZG8oKSB7XG4gICAgICAgIGNvbnN0IHVzZXJuYW1lID0gbXlBY2NvdW50LnVzZXJuYW1lO1xuICAgICAgICBjb25zdCB1c2VyVG9kb3MgPSBteUFjY291bnQudG9kb3M7XG4gICAgICAgIGNvbnN0IHRvZG9Db250YWluZXIgPSB0aGlzLmNsb3Nlc3QoJy50b2RvLWNvbnRhaW5lcicpO1xuICAgICAgICBjb25zdCB0b2RvQ29udGVudCA9XG4gICAgICAgICAgICB0b2RvQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy50b2RvLWNvbnRlbnQnKS50ZXh0Q29udGVudDtcblxuICAgICAgICB0b2RvQ29udGFpbmVyLnJlbW92ZSgpO1xuICAgICAgICBteUFjY291bnQuZGVsZXRlVXNlclRvZG8odXNlclRvZG9zLCB0b2RvQ29udGVudCk7XG4gICAgICAgIG15QWNjb3VudC51cGRhdGVVc2VyVG9kb3ModXNlcm5hbWUsIHVzZXJUb2RvcywgbXlBY2NvdW50LmlkKTtcbiAgICAgICAgbXlMb2NhbFN0b3JhZ2Uuc2F2ZUFjY291bnQobXlBY2NvdW50KTtcbiAgICB9XG5cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vIERJU1BMQVkgVE9ET1NcbiAgICBhc3luYyBmdW5jdGlvbiBkaXNwbGF5VXNlclRvZG9zKHRvZG9zKSB7XG4gICAgICAgIGNsZWFyVG9kb3MoKTtcbiAgICAgICAgdG9kb3MuZm9yRWFjaCgodG9kbykgPT4ge1xuICAgICAgICAgICAgdG9kb3NTZWN0aW9uLmFwcGVuZENoaWxkKF9jcmVhdGVUb2RvQ29udGFpbmVyKHRvZG8pKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYXJUb2RvcygpIHtcbiAgICAgICAgX2NsZWFyQWxsQ2hpbGRzKHRvZG9zU2VjdGlvbik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX2NsZWFyQWxsQ2hpbGRzKGVsKSB7XG4gICAgICAgIHdoaWxlIChlbC5maXJzdENoaWxkKSB7XG4gICAgICAgICAgICBlbC5yZW1vdmVDaGlsZChlbC5sYXN0Q2hpbGQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGlzcGxheVVzZXJUb2RvcyxcbiAgICAgICAgY2xlYXJUb2RvcyxcbiAgICAgICAgZGVsZXRlVG9kbyxcbiAgICAgICAgc3dpdGNoQ29tcGxldGVUb2RvLFxuICAgICAgICBkaXNwbGF5QWRkVG9kb0J1dHRvbixcbiAgICAgICAgYWRkVG9kbyxcbiAgICB9O1xufSkoKTtcblxuZXhwb3J0IGRlZmF1bHQgdG9kb3M7XG4iLCJpbXBvcnQgdG9kb3MgZnJvbSAnLi90b2Rvcy5qcyc7XG5pbXBvcnQgYWNjb3VudCBmcm9tICcuL2FjY291bnQuanMnO1xuaW1wb3J0IHV0aWxpdHlGdW5jdGlvbnMgZnJvbSAnLi91dGlsaXR5LmpzJztcbmltcG9ydCBsb2NhbFN0b3JhZ2VNb2R1bGUgZnJvbSAnLi9sb2NhbFN0b3JhZ2UuanMnO1xuXG5jb25zdCBVSSA9IChmdW5jdGlvbiAoKSB7XG4gICAgLy8gTW9kdWxlc1xuICAgIGNvbnN0IG15QWNjb3VudCA9IGFjY291bnQ7XG4gICAgY29uc3QgbXlMb2NhbFN0b3JhZ2UgPSBsb2NhbFN0b3JhZ2VNb2R1bGU7XG4gICAgY29uc3QgbXlUb2RvcyA9IHRvZG9zO1xuICAgIGNvbnN0IG15VXRpbGl0eUZ1bmN0aW9ucyA9IHV0aWxpdHlGdW5jdGlvbnM7XG4gICAgY29uc3QgdGhlbWVNb2RlU3dpdGNoQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRoZW1lLW1vZGUtc3dpdGNoLWJ0bicpO1xuICAgIGNvbnN0IHJvb3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCc6cm9vdCcpO1xuICAgIGNvbnN0IGxvZ2luQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmxvZ2luLWJ0bicpO1xuICAgIGNvbnN0IGxvZ091dEJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5sb2dvdXQtYnRuJyk7XG4gICAgY29uc3Qgb3ZlcmxheSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5vdmVybGF5LWdlbmVyYWwnKTtcbiAgICBjb25zdCBmb3JtTG9naW5CdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZm9ybS1sb2dpbi1idG4nKTtcbiAgICBjb25zdCB1c2VybmFtZUlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnVzZXJuYW1lLWlucHV0Jyk7XG4gICAgY29uc3QgdXNlcm5hbWVFcnJvciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy51c2VybmFtZS1lcnJvcicpO1xuICAgIGNvbnN0IGZvcm1DbG9zZUJ0biA9IFsuLi5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZm9ybS1jbG9zZS1idG4nKV07XG4gICAgY29uc3QgdGhlbWVOYW1lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRoZW1lLW5hbWUnKTtcbiAgICBjb25zdCB0b2Rvc1NlY3Rpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudG9kb3Mtc2VjdGlvbicpO1xuICAgIGNvbnN0IGxvZ2luRm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5sb2dpbi1mb3JtJyk7XG4gICAgY29uc3Qgc2lnbnVwQnRuTG9naW5Gb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNpZ24tdXAtYnRuJyk7XG4gICAgY29uc3Qgc2lnbnVwQnRuU2lnbnVwRm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mb3JtLXNpZ251cC1idG4nKTtcbiAgICBjb25zdCBzaWdudXBGb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNpZ251cC1mb3JtJyk7XG4gICAgY29uc3Qgc2lnbnVwVXNlcm5hbWVJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICcuc2lnbnVwLXVzZXJuYW1lLWlucHV0J1xuICAgICk7XG4gICAgY29uc3Qgc2lnbnVwRm9ybU92ZXJsYXkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2lnbnVwLW92ZXJsYXktZm9ybScpO1xuICAgIGNvbnN0IHNpZ251cEZvcm1FcnJvciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zaWdudXAtdXNlcm5hbWUtZXJyb3InKTtcbiAgICBsZXQgaXNMb2dpblByZXNzZWQgPSBmYWxzZTtcblxuICAgIHRoZW1lTW9kZVN3aXRjaEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHN3aXRjaFRoZW1lTW9kZSk7XG4gICAgbG9naW5CdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBkaXNwbGF5TG9naW5Gb3JtKTtcbiAgICBsb2dPdXRCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBsb2dvdXQpO1xuICAgIGZvcm1Mb2dpbkJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGxvZ2luKTtcbiAgICB1c2VybmFtZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgICdpbnB1dCcsXG4gICAgICAgIG15VXRpbGl0eUZ1bmN0aW9ucy5zaG93SW5wdXRWYWxpZGF0aW9uRXJyb3IuYmluZChcbiAgICAgICAgICAgIHVzZXJuYW1lSW5wdXQsXG4gICAgICAgICAgICB1c2VybmFtZUlucHV0XG4gICAgICAgIClcbiAgICApO1xuICAgIGZvcm1DbG9zZUJ0bi5mb3JFYWNoKChidG4pID0+IGJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGNsb3NlRm9ybSkpO1xuICAgIHNpZ251cEJ0bkxvZ2luRm9ybS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGRpc3BsYXlTaWdudXBGb3JtKTtcbiAgICBzaWdudXBVc2VybmFtZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgICdpbnB1dCcsXG4gICAgICAgIG15VXRpbGl0eUZ1bmN0aW9ucy5zaG93SW5wdXRWYWxpZGF0aW9uRXJyb3IuYmluZChcbiAgICAgICAgICAgIHNpZ251cFVzZXJuYW1lSW5wdXQsXG4gICAgICAgICAgICBzaWdudXBVc2VybmFtZUlucHV0XG4gICAgICAgIClcbiAgICApO1xuICAgIHNpZ251cEJ0blNpZ251cEZvcm0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBzaWdudXApO1xuXG4gICAgLy8gaW5pdGlhbGl6ZSBhY2NvdW50IGlmIGFjY291bnQgaXMgc2F2ZWQgdG8gbG9jYWxzdG9yYWdlXG4gICAgaW5pdGlhbGl6ZUFjY291bnQoKTtcblxuICAgIC8vIENoYW5nZXMgdGhlbWUgY29sb3IgYW5kIHRoZW1lIGljb25cbiAgICBmdW5jdGlvbiBzd2l0Y2hUaGVtZU1vZGUoZGFya01vZGUpIHtcbiAgICAgICAgY29uc3QgaWNvbiA9IHRoZW1lTW9kZVN3aXRjaEJ0bi5xdWVyeVNlbGVjdG9yKCdpbWcnKTtcbiAgICAgICAgLy8gZm9yIGluaXRpYWxpemluZyBwcmVmZXJlbmNlXG4gICAgICAgIGlmIChkYXJrTW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcm9vdC5jbGFzc0xpc3QuYWRkKCdkYXJrLXRoZW1lJyk7XG4gICAgICAgICAgICBpY29uLnNyYyA9ICdpY29ucy9kYXJrVGhlbWUuc3ZnJztcbiAgICAgICAgICAgIHRoZW1lTW9kZVN3aXRjaEJ0bi5jbGFzc0xpc3QuYWRkKCdkYXJrLXRoZW1lJyk7XG4gICAgICAgICAgICB0aGVtZU5hbWUudGV4dENvbnRlbnQgPSAnTGlnaHQgTW9kZSc7XG4gICAgICAgIH0gZWxzZSBpZiAoZGFya01vZGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByb290LmNsYXNzTGlzdC5yZW1vdmUoJ2RhcmstdGhlbWUnKTtcbiAgICAgICAgICAgIGljb24uc3JjID0gJ2ljb25zL2xpZ2h0VGhlbWUuc3ZnJztcbiAgICAgICAgICAgIHRoZW1lTW9kZVN3aXRjaEJ0bi5jbGFzc0xpc3QucmVtb3ZlKCdkYXJrLXRoZW1lJyk7XG4gICAgICAgICAgICB0aGVtZU5hbWUudGV4dENvbnRlbnQgPSAnRGFyayBNb2RlJztcbiAgICAgICAgICAgIC8vIFN3aXRjaFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcm9vdC5jbGFzc0xpc3QudG9nZ2xlKCdkYXJrLXRoZW1lJyk7XG4gICAgICAgICAgICBpZiAodGhlbWVNb2RlU3dpdGNoQnRuLmNsYXNzTGlzdC5jb250YWlucygnZGFyay10aGVtZScpKSB7XG4gICAgICAgICAgICAgICAgaWNvbi5zcmMgPSAnaWNvbnMvbGlnaHRUaGVtZS5zdmcnO1xuICAgICAgICAgICAgICAgIHRoZW1lTW9kZVN3aXRjaEJ0bi5jbGFzc0xpc3QucmVtb3ZlKCdkYXJrLXRoZW1lJyk7XG4gICAgICAgICAgICAgICAgdGhlbWVOYW1lLnRleHRDb250ZW50ID0gJ0RhcmsgTW9kZSc7XG4gICAgICAgICAgICAgICAgbXlBY2NvdW50LmRhcmtNb2RlID0gZmFsc2U7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGljb24uc3JjID0gJ2ljb25zL2RhcmtUaGVtZS5zdmcnO1xuICAgICAgICAgICAgICAgIHRoZW1lTW9kZVN3aXRjaEJ0bi5jbGFzc0xpc3QuYWRkKCdkYXJrLXRoZW1lJyk7XG4gICAgICAgICAgICAgICAgdGhlbWVOYW1lLnRleHRDb250ZW50ID0gJ0xpZ2h0IE1vZGUnO1xuICAgICAgICAgICAgICAgIG15QWNjb3VudC5kYXJrTW9kZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbXlMb2NhbFN0b3JhZ2Uuc2F2ZUFjY291bnQobXlBY2NvdW50KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkaXNwbGF5TG9naW5Gb3JtKCkge1xuICAgICAgICAvLyBJZiBhbHJlYWR5IGxvZ2dlZCBpbiBmb3JtIGRvZXMgbm90IHBvcCB1cFxuICAgICAgICBpZiAoIXRoaXMuY2xhc3NMaXN0LmNvbnRhaW5zKCdsb2dpbi1idG4nKSkgcmV0dXJuO1xuICAgICAgICBvdmVybGF5LmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xuICAgICAgICBsb2dpbkZvcm0uY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XG4gICAgICAgIHVzZXJuYW1lSW5wdXQudmFsdWUgPSAnJztcbiAgICAgICAgdXNlcm5hbWVFcnJvci5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkaXNwbGF5U2lnbnVwRm9ybSgpIHtcbiAgICAgICAgb3ZlcmxheS5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTtcbiAgICAgICAgbG9naW5Gb3JtLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpO1xuICAgICAgICBzaWdudXBGb3JtLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xuXG4gICAgICAgIHNpZ251cFVzZXJuYW1lSW5wdXQudmFsdWUgPSAnJztcbiAgICAgICAgc2lnbnVwRm9ybUVycm9yLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvZ291dCgpIHtcbiAgICAgICAgY29uc3QgYWNjb3VudEJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hY2NvdW50LWJ0bicpO1xuICAgICAgICBhY2NvdW50QnRuLmNsYXNzTGlzdC5yZW1vdmUoJ2FjY291bnQtYnRuJyk7XG4gICAgICAgIGFjY291bnRCdG4uY2xhc3NMaXN0LmFkZCgnbG9naW4tYnRuJyk7XG4gICAgICAgIGFjY291bnRCdG4udGV4dENvbnRlbnQgPSAnTG9naW4nO1xuICAgICAgICBteVRvZG9zLmNsZWFyVG9kb3MoKTtcbiAgICAgICAgbG9jYWxTdG9yYWdlLmNsZWFyKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xvc2VGb3JtKCkge1xuICAgICAgICBvdmVybGF5LmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpO1xuICAgICAgICBsb2dpbkZvcm0uY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XG4gICAgICAgIHNpZ251cEZvcm0uY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3dpdGNoVG9BY2NvdW50KHVzZXJuYW1lKSB7XG4gICAgICAgIC8vIENoYW5nZXMgbG9naW4gYnV0dG9uIG9uIHRvcCByaWdodCB0byBhY2NvdW50IGJ1dHRvblxuICAgICAgICBsb2dpbkJ0bi50ZXh0Q29udGVudCA9IHVzZXJuYW1lICsgJyc7XG4gICAgICAgIC8vIEFkZHMgZG93biBhcnJvdyBpY29uXG4gICAgICAgIGxvZ2luQnRuLmlubmVySFRNTCA9IGAke3VzZXJuYW1lfTw/eG1sIHZlcnNpb249XCIxLjBcIiA/PjxzdmcgY2xhc3M9IFwiZHJvcGRvd24tYXJyb3ctaWNvblwiIGhlaWdodD1cIjQ4XCIgdmlld0JveD1cIjAgMCA0OCA0OFwiIHdpZHRoPVwiNDhcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+PHBhdGggZD1cIk0xNC44MyAxNi40Mmw5LjE3IDkuMTcgOS4xNy05LjE3IDIuODMgMi44My0xMiAxMi0xMi0xMnpcIi8+PHBhdGggZD1cIk0wLS43NWg0OHY0OGgtNDh6XCIgZmlsbD1cIm5vbmVcIi8+PC9zdmc+YDtcbiAgICAgICAgbG9naW5CdG4uY2xhc3NMaXN0LnJlbW92ZSgnbG9naW4tYnRuJyk7XG4gICAgICAgIGxvZ2luQnRuLmNsYXNzTGlzdC5hZGQoJ2FjY291bnQtYnRuJyk7XG4gICAgfVxuXG4gICAgLy8gTG9ncyB1c2VyIGluXG4gICAgYXN5bmMgZnVuY3Rpb24gbG9naW4oZSkge1xuICAgICAgICBjb25zdCBmb3JtT3ZlcmxheSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5vdmVybGF5LWZvcm0nKTtcblxuICAgICAgICAvLyBEaXNhYmxlcyBwcmVzc2luZyBsb2dpbiBidXR0b24gbXVsdGlwbGUgdGltZXNcbiAgICAgICAgaWYgKGlzTG9naW5QcmVzc2VkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaXNMb2dpblByZXNzZWQgPSB0cnVlO1xuXG4gICAgICAgIC8vIElmIHVzZXJuYW1lIGlzIG5vdCBpbiByaWdodCBmb3JtXG4gICAgICAgIGlmICghbXlVdGlsaXR5RnVuY3Rpb25zLmlzSW5wdXRWYWxpZGF0aW9uQ29ycmVjdCh1c2VybmFtZUlucHV0KSkge1xuICAgICAgICAgICAgbXlVdGlsaXR5RnVuY3Rpb25zLnNob3dJbnB1dFZhbGlkYXRpb25FcnJvcih1c2VybmFtZUlucHV0KTtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGlzTG9naW5QcmVzc2VkID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZm9ybU92ZXJsYXkuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XG4gICAgICAgIGNvbnN0IHVzZXJuYW1lID0gdXNlcm5hbWVJbnB1dC52YWx1ZTtcbiAgICAgICAgY29uc3QgdXNlckRhdGEgPSBhd2FpdCBteUFjY291bnQuZ2V0VXNlckRhdGEodXNlcm5hbWUpO1xuXG4gICAgICAgIC8vIElmIGVudGVyZWQgdXNlcm5hbWUgZXhpc3RzLCBsb2dzIGluXG4gICAgICAgIGlmICh1c2VyRGF0YSkge1xuICAgICAgICAgICAgY29uc3QgdXNlclRvZG9zID0gdXNlckRhdGEudG9kb3M7XG4gICAgICAgICAgICBteUFjY291bnQuc2V0QWNjb3VudFByb3BlcnRpZXModXNlckRhdGEpO1xuICAgICAgICAgICAgLy8gRGlzcGxheXMgdG9kb3MgYW5kIGFkZCB0YXNrIGJ1dHRvblxuICAgICAgICAgICAgYXdhaXQgbXlUb2Rvcy5kaXNwbGF5VXNlclRvZG9zKHVzZXJUb2Rvcyk7XG5cbiAgICAgICAgICAgIHN3aXRjaFRvQWNjb3VudCh1c2VybmFtZSk7XG4gICAgICAgICAgICBteVRvZG9zLmRpc3BsYXlBZGRUb2RvQnV0dG9uKHRvZG9zU2VjdGlvbik7XG4gICAgICAgICAgICBjbG9zZUZvcm0oKTtcbiAgICAgICAgICAgIGZvcm1PdmVybGF5LmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpO1xuICAgICAgICAgICAgaXNMb2dpblByZXNzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIG15TG9jYWxTdG9yYWdlLnNhdmVBY2NvdW50KG15QWNjb3VudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3JtT3ZlcmxheS5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcbiAgICAgICAgICAgIC8vIEVsc2UgZGlzcGxheXMgZXJyb3IgbWVzc2FnZVxuICAgICAgICAgICAgdXNlcm5hbWVFcnJvci5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTtcbiAgICAgICAgICAgIGlzTG9naW5QcmVzc2VkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyBmdW5jdGlvbiBzaWdudXAoZSkge1xuICAgICAgICBjb25zdCB1c2VybmFtZSA9IHNpZ251cFVzZXJuYW1lSW5wdXQudmFsdWU7XG5cbiAgICAgICAgaWYgKCFteVV0aWxpdHlGdW5jdGlvbnMuaXNJbnB1dFZhbGlkYXRpb25Db3JyZWN0KHNpZ251cFVzZXJuYW1lSW5wdXQpKSB7XG4gICAgICAgICAgICBteVV0aWxpdHlGdW5jdGlvbnMuc2hvd0lucHV0VmFsaWRhdGlvbkVycm9yKHNpZ251cFVzZXJuYW1lSW5wdXQpO1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHNpZ251cEZvcm1PdmVybGF5LmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xuICAgICAgICBsZXQgdXNlckRhdGEgPSBhd2FpdCBteUFjY291bnQuZ2V0VXNlckRhdGEodXNlcm5hbWUpO1xuXG4gICAgICAgIGlmICh1c2VyRGF0YSkge1xuICAgICAgICAgICAgc2lnbnVwRm9ybUVycm9yLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xuICAgICAgICAgICAgc2lnbnVwRm9ybU92ZXJsYXkuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjcmVhdGVzIG5ldyBhY2NvdW50XG4gICAgICAgIGF3YWl0IG15QWNjb3VudC5hZGROZXdBY2NvdW50KHVzZXJuYW1lKTtcbiAgICAgICAgdXNlckRhdGEgPSBhd2FpdCBteUFjY291bnQuZ2V0VXNlckRhdGEodXNlcm5hbWUpO1xuICAgICAgICAvLyBzZXRzIGFjY291bnQgcHJvcGVydGllcyB0byBuZXcgYWNjb3VudCdzXG4gICAgICAgIG15QWNjb3VudC5zZXRBY2NvdW50UHJvcGVydGllcyh1c2VyRGF0YSk7XG4gICAgICAgIHNpZ251cEZvcm1PdmVybGF5LmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpO1xuICAgICAgICBjbG9zZUZvcm0oKTtcbiAgICAgICAgc3dpdGNoVG9BY2NvdW50KHVzZXJuYW1lKTtcbiAgICAgICAgbXlUb2Rvcy5kaXNwbGF5VXNlclRvZG9zKG15QWNjb3VudC50b2Rvcyk7XG4gICAgICAgIG15VG9kb3MuZGlzcGxheUFkZFRvZG9CdXR0b24odG9kb3NTZWN0aW9uKTtcbiAgICAgICAgbXlBY2NvdW50LnVzZXJuYW1lID0gdXNlcm5hbWU7XG4gICAgICAgIG15TG9jYWxTdG9yYWdlLnNhdmVBY2NvdW50KG15QWNjb3VudCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5pdGlhbGl6ZUFjY291bnQoKSB7XG4gICAgICAgIGlmIChteUxvY2FsU3RvcmFnZS5nZXRBY2NvdW50KCkpIHtcbiAgICAgICAgICAgIG15TG9jYWxTdG9yYWdlLmluaXRpYWxpemVBY2NvdW50UHJvcGVydGllcyhteUFjY291bnQpO1xuICAgICAgICAgICAgbXlUb2Rvcy5kaXNwbGF5VXNlclRvZG9zKG15QWNjb3VudC50b2Rvcyk7XG4gICAgICAgICAgICBzd2l0Y2hUb0FjY291bnQobXlBY2NvdW50LnVzZXJuYW1lKTtcbiAgICAgICAgICAgIG15VG9kb3MuZGlzcGxheUFkZFRvZG9CdXR0b24odG9kb3NTZWN0aW9uKTtcbiAgICAgICAgICAgIHN3aXRjaFRoZW1lTW9kZShhY2NvdW50LmRhcmtNb2RlKTtcbiAgICAgICAgfVxuICAgIH1cbn0pKCk7XG5cbmV4cG9ydCBkZWZhdWx0IFVJO1xuIl0sIm5hbWVzIjpbInNldEFjY291bnRQcm9wZXJ0aWVzIiwiYXN5bmMiLCJkYXRhIiwidGhpcyIsInRvZG9zIiwidXNlcm5hbWUiLCJpZCIsImdldFVzZXJEYXRhIiwicmVzcG9uc2UiLCJmZXRjaCIsIm1ldGhvZCIsImhlYWRlcnMiLCJtb2RlIiwianNvbiIsImVycm9yIiwiY29uc29sZSIsImxvZyIsImRlbGV0ZVVzZXJUb2RvIiwidXNlclRvZG9zIiwidG9kb0NvbnRlbnQiLCJpIiwibGVuZ3RoIiwiY29udGVudCIsInNwbGljZSIsInVwZGF0ZVVzZXJUb2RvcyIsInVzZXJJRCIsInVzZXJEYXRhIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJzd2l0Y2hDb21wbGV0ZVVzZXJUb2RvIiwiaXNDb21wbGV0ZWQiLCJlZGl0VXNlclRvZG8iLCJ1cGRhdGVkQ29udGVudCIsInVwZGF0ZWREYXRlIiwiZGF0ZSIsImdldFRvZG9EYXRlIiwiYWRkTmV3QWNjb3VudCIsIlRvZG8iLCJkYXJrTW9kZSIsInJlcXVpcmVkQXJncyIsInJlcXVpcmVkIiwiYXJncyIsIlR5cGVFcnJvciIsIl90eXBlb2YiLCJvYmoiLCJTeW1ib2wiLCJpdGVyYXRvciIsImNvbnN0cnVjdG9yIiwicHJvdG90eXBlIiwiaXNEYXRlIiwidmFsdWUiLCJhcmd1bWVudHMiLCJEYXRlIiwiT2JqZWN0IiwidG9TdHJpbmciLCJjYWxsIiwidG9EYXRlIiwiYXJndW1lbnQiLCJhcmdTdHIiLCJnZXRUaW1lIiwid2FybiIsIkVycm9yIiwic3RhY2siLCJOYU4iLCJpc1ZhbGlkIiwiZGlydHlEYXRlIiwiaXNOYU4iLCJOdW1iZXIiLCJ0b0ludGVnZXIiLCJkaXJ0eU51bWJlciIsIm51bWJlciIsIk1hdGgiLCJjZWlsIiwiZmxvb3IiLCJhZGRNaWxsaXNlY29uZHMiLCJkaXJ0eUFtb3VudCIsInRpbWVzdGFtcCIsImFtb3VudCIsInN1Yk1pbGxpc2Vjb25kcyIsIk1JTExJU0VDT05EU19JTl9EQVkiLCJzdGFydE9mVVRDSVNPV2VlayIsIndlZWtTdGFydHNPbiIsImRheSIsImdldFVUQ0RheSIsImRpZmYiLCJzZXRVVENEYXRlIiwiZ2V0VVRDRGF0ZSIsInNldFVUQ0hvdXJzIiwiZ2V0VVRDSVNPV2Vla1llYXIiLCJ5ZWFyIiwiZ2V0VVRDRnVsbFllYXIiLCJmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyIiwic2V0VVRDRnVsbFllYXIiLCJzdGFydE9mTmV4dFllYXIiLCJmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyIiwic3RhcnRPZlRoaXNZZWFyIiwic3RhcnRPZlVUQ0lTT1dlZWtZZWFyIiwiZm91cnRoT2ZKYW51YXJ5IiwiTUlMTElTRUNPTkRTX0lOX1dFRUsiLCJkZWZhdWx0T3B0aW9ucyIsImdldERlZmF1bHRPcHRpb25zIiwic3RhcnRPZlVUQ1dlZWsiLCJvcHRpb25zIiwiX3JlZiIsIl9yZWYyIiwiX3JlZjMiLCJfb3B0aW9ucyR3ZWVrU3RhcnRzT24iLCJfb3B0aW9ucyRsb2NhbGUiLCJfb3B0aW9ucyRsb2NhbGUkb3B0aW8iLCJfZGVmYXVsdE9wdGlvbnMkbG9jYWwiLCJfZGVmYXVsdE9wdGlvbnMkbG9jYWwyIiwibG9jYWxlIiwiUmFuZ2VFcnJvciIsImdldFVUQ1dlZWtZZWFyIiwiX29wdGlvbnMkZmlyc3RXZWVrQ29uIiwiZmlyc3RXZWVrQ29udGFpbnNEYXRlIiwiZmlyc3RXZWVrT2ZOZXh0WWVhciIsImZpcnN0V2Vla09mVGhpc1llYXIiLCJzdGFydE9mVVRDV2Vla1llYXIiLCJmaXJzdFdlZWsiLCJhZGRMZWFkaW5nWmVyb3MiLCJ0YXJnZXRMZW5ndGgiLCJzaWduIiwib3V0cHV0IiwiYWJzIiwidG9rZW4iLCJzaWduZWRZZWFyIiwibW9udGgiLCJnZXRVVENNb250aCIsIlN0cmluZyIsImdldFVUQ0hvdXJzIiwiZ2V0VVRDTWludXRlcyIsImdldFVUQ1NlY29uZHMiLCJudW1iZXJPZkRpZ2l0cyIsIm1pbGxpc2Vjb25kcyIsImdldFVUQ01pbGxpc2Vjb25kcyIsInBvdyIsImZvcm1hdFRpbWV6b25lU2hvcnQiLCJvZmZzZXQiLCJkaXJ0eURlbGltaXRlciIsImFic09mZnNldCIsImhvdXJzIiwibWludXRlcyIsImRlbGltaXRlciIsImZvcm1hdFRpbWV6b25lV2l0aE9wdGlvbmFsTWludXRlcyIsImZvcm1hdFRpbWV6b25lIiwiRyIsImxvY2FsaXplIiwiZXJhIiwid2lkdGgiLCJ5Iiwib3JkaW5hbE51bWJlciIsInVuaXQiLCJsaWdodEZvcm1hdHRlcnMiLCJZIiwic2lnbmVkV2Vla1llYXIiLCJ3ZWVrWWVhciIsIlIiLCJ1IiwiUSIsInF1YXJ0ZXIiLCJjb250ZXh0IiwicSIsIk0iLCJMIiwidyIsIndlZWsiLCJyb3VuZCIsImdldFVUQ1dlZWsiLCJJIiwiaXNvV2VlayIsImdldFVUQ0lTT1dlZWsiLCJkIiwiRCIsImRheU9mWWVhciIsInNldFVUQ01vbnRoIiwic3RhcnRPZlllYXJUaW1lc3RhbXAiLCJkaWZmZXJlbmNlIiwiZ2V0VVRDRGF5T2ZZZWFyIiwiRSIsImRheU9mV2VlayIsImUiLCJsb2NhbERheU9mV2VlayIsImMiLCJpc29EYXlPZldlZWsiLCJhIiwiZGF5UGVyaW9kRW51bVZhbHVlIiwiZGF5UGVyaW9kIiwidG9Mb3dlckNhc2UiLCJiIiwiQiIsImgiLCJIIiwiSyIsImsiLCJtIiwicyIsIlMiLCJYIiwiX2xvY2FsaXplIiwidGltZXpvbmVPZmZzZXQiLCJfb3JpZ2luYWxEYXRlIiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJ4IiwiTyIsInoiLCJ0Iiwib3JpZ2luYWxEYXRlIiwiVCIsImRhdGVMb25nRm9ybWF0dGVyIiwicGF0dGVybiIsImZvcm1hdExvbmciLCJ0aW1lTG9uZ0Zvcm1hdHRlciIsInRpbWUiLCJsb25nRm9ybWF0dGVycyIsInAiLCJQIiwiZGF0ZVRpbWVGb3JtYXQiLCJtYXRjaFJlc3VsdCIsIm1hdGNoIiwiZGF0ZVBhdHRlcm4iLCJ0aW1lUGF0dGVybiIsImRhdGVUaW1lIiwicmVwbGFjZSIsImdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMiLCJ1dGNEYXRlIiwiVVRDIiwiZ2V0RnVsbFllYXIiLCJnZXRNb250aCIsImdldERhdGUiLCJnZXRIb3VycyIsImdldE1pbnV0ZXMiLCJnZXRTZWNvbmRzIiwiZ2V0TWlsbGlzZWNvbmRzIiwicHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW5zIiwicHJvdGVjdGVkV2Vla1llYXJUb2tlbnMiLCJpc1Byb3RlY3RlZERheU9mWWVhclRva2VuIiwiaW5kZXhPZiIsImlzUHJvdGVjdGVkV2Vla1llYXJUb2tlbiIsInRocm93UHJvdGVjdGVkRXJyb3IiLCJmb3JtYXQiLCJpbnB1dCIsImNvbmNhdCIsImZvcm1hdERpc3RhbmNlTG9jYWxlIiwibGVzc1RoYW5YU2Vjb25kcyIsIm9uZSIsIm90aGVyIiwieFNlY29uZHMiLCJoYWxmQU1pbnV0ZSIsImxlc3NUaGFuWE1pbnV0ZXMiLCJ4TWludXRlcyIsImFib3V0WEhvdXJzIiwieEhvdXJzIiwieERheXMiLCJhYm91dFhXZWVrcyIsInhXZWVrcyIsImFib3V0WE1vbnRocyIsInhNb250aHMiLCJhYm91dFhZZWFycyIsInhZZWFycyIsIm92ZXJYWWVhcnMiLCJhbG1vc3RYWWVhcnMiLCJidWlsZEZvcm1hdExvbmdGbiIsInVuZGVmaW5lZCIsImRlZmF1bHRXaWR0aCIsImZvcm1hdHMiLCJmdWxsIiwibG9uZyIsIm1lZGl1bSIsInNob3J0IiwiZm9ybWF0UmVsYXRpdmVMb2NhbGUiLCJsYXN0V2VlayIsInllc3RlcmRheSIsInRvZGF5IiwidG9tb3Jyb3ciLCJuZXh0V2VlayIsImJ1aWxkTG9jYWxpemVGbiIsImRpcnR5SW5kZXgiLCJ2YWx1ZXNBcnJheSIsImZvcm1hdHRpbmdWYWx1ZXMiLCJkZWZhdWx0Rm9ybWF0dGluZ1dpZHRoIiwiX2RlZmF1bHRXaWR0aCIsIl93aWR0aCIsInZhbHVlcyIsImFyZ3VtZW50Q2FsbGJhY2siLCJidWlsZE1hdGNoRm4iLCJzdHJpbmciLCJtYXRjaFBhdHRlcm4iLCJtYXRjaFBhdHRlcm5zIiwiZGVmYXVsdE1hdGNoV2lkdGgiLCJtYXRjaGVkU3RyaW5nIiwicGFyc2VQYXR0ZXJucyIsImRlZmF1bHRQYXJzZVdpZHRoIiwia2V5IiwiQXJyYXkiLCJpc0FycmF5IiwiZmluZEluZGV4IiwidGVzdCIsImZpbmRLZXkiLCJ2YWx1ZUNhbGxiYWNrIiwicmVzdCIsInNsaWNlIiwib2JqZWN0IiwicHJlZGljYXRlIiwiaGFzT3duUHJvcGVydHkiLCJhcnJheSIsImNvZGUiLCJmb3JtYXREaXN0YW5jZSIsImNvdW50IiwicmVzdWx0IiwidG9rZW5WYWx1ZSIsImFkZFN1ZmZpeCIsImNvbXBhcmlzb24iLCJmb3JtYXRSZWxhdGl2ZSIsIl9kYXRlIiwiX2Jhc2VEYXRlIiwiX29wdGlvbnMiLCJyZW0xMDAiLCJuYXJyb3ciLCJhYmJyZXZpYXRlZCIsIndpZGUiLCJhbSIsInBtIiwibWlkbmlnaHQiLCJub29uIiwibW9ybmluZyIsImFmdGVybm9vbiIsImV2ZW5pbmciLCJuaWdodCIsInBhcnNlUGF0dGVybiIsInBhcnNlSW50IiwicGFyc2VSZXN1bHQiLCJhbnkiLCJpbmRleCIsImZvcm1hdHRpbmdUb2tlbnNSZWdFeHAiLCJsb25nRm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCIsImVzY2FwZWRTdHJpbmdSZWdFeHAiLCJkb3VibGVRdW90ZVJlZ0V4cCIsInVuZXNjYXBlZExhdGluQ2hhcmFjdGVyUmVnRXhwIiwiY2xlYW5Fc2NhcGVkU3RyaW5nIiwibWF0Y2hlZCIsInV0aWxpdHlGdW5jdGlvbnMiLCJpc0lucHV0VmFsaWRhdGlvbkNvcnJlY3QiLCJlbCIsInZhbGlkaXR5IiwidG9vU2hvcnQiLCJmb3JtYXREYXRlIiwidHlwZSIsImRpcnR5Rm9ybWF0U3RyIiwiX3JlZjQiLCJfb3B0aW9ucyRsb2NhbGUyIiwiX29wdGlvbnMkbG9jYWxlMiRvcHRpIiwiX3JlZjUiLCJfcmVmNiIsIl9yZWY3IiwiX29wdGlvbnMkbG9jYWxlMyIsIl9vcHRpb25zJGxvY2FsZTMkb3B0aSIsIl9kZWZhdWx0T3B0aW9ucyRsb2NhbDMiLCJfZGVmYXVsdE9wdGlvbnMkbG9jYWw0IiwiZm9ybWF0U3RyIiwiZGVmYXVsdExvY2FsZSIsImZvcm1hdHRlck9wdGlvbnMiLCJtYXAiLCJzdWJzdHJpbmciLCJmaXJzdENoYXJhY3RlciIsImxvbmdGb3JtYXR0ZXIiLCJqb2luIiwiZm9ybWF0dGVyIiwidXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zIiwidXNlQWRkaXRpb25hbERheU9mWWVhclRva2VucyIsImNyZWF0ZUVsZW1lbnRXaXRoQ2xhc3MiLCJwcm9wZXJ0aWVzIiwiZWxlbWVudCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsInZhbCIsImVudHJpZXMiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJmdW5jdGlvbk5hbWUiLCJzaG93SW5wdXRWYWxpZGF0aW9uRXJyb3IiLCJzZXRDdXN0b21WYWxpZGl0eSIsIm1pbkxlbmd0aCIsInJlcG9ydFZhbGlkaXR5IiwiZ2V0QWNjb3VudCIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJwYXJzZSIsInNhdmVBY2NvdW50IiwiYWNjb3VudCIsInNldEl0ZW0iLCJpbml0aWFsaXplQWNjb3VudFByb3BlcnRpZXMiLCJteUFjY291bnQiLCJteVV0aWxpdHlGdW5jdGlvbnMiLCJ1dGlsaXR5IiwidG9kb3NTZWN0aW9uIiwicXVlcnlTZWxlY3RvciIsIm15TG9jYWxTdG9yYWdlIiwiYWRkVG9kbyIsIm5hbWVJbnB1dCIsInByZXZlbnREZWZhdWx0IiwidG9kb05hbWUiLCJmb3JtYXR0ZWROYW1lIiwidG9VcHBlckNhc2UiLCJ0b2RvRGF0ZSIsImZvcm1hdHRlZERhdGUiLCJuZXdUb2RvIiwicHVzaCIsImRpc3BsYXlVc2VyVG9kb3MiLCJkaXNwbGF5QWRkVG9kb0J1dHRvbiIsImRpc3BsYXlBZGRUb2RvRm9ybSIsInJlbW92ZSIsImFkZFRvZG9Db250YWluZXIiLCJjbGFzc05hbWUiLCJpbnB1dENvbnRhaW5lciIsInBsYWNlaG9sZGVyIiwic3BlbGxjaGVjayIsImRhdGVJbnB1dCIsImJ0bkNvbnRhaW5lciIsImFkZEJ0biIsInRleHRDb250ZW50IiwiY2FuY2VsQnRuIiwicmVtb3ZlQWRkVG9kb0Zvcm0iLCJiaW5kIiwiYXBwZW5kIiwiYXBwZW5kQ2hpbGQiLCJpbm5lckhUTUwiLCJkaXNwbGF5RWRpdFRvZG9Gb3JtIiwic3RvcFByb3BhZ2F0aW9uIiwib3ZlcmxheSIsImVkaXRUb2RvRm9ybSIsImNsYXNzTGlzdCIsImN1clRvZG9Db250ZW50IiwiY2xvc2VzdCIsImN1clRvZG9EYXRlIiwiY29udGFpbmVyIiwiY29udGVudElucHV0IiwiZWRpdEJ0biIsImVkaXRUb2RvIiwicmVtb3ZlRWRpdFRvZG9Gb3JtIiwiX2NyZWF0ZUVkaXRUb2RvRm9ybSIsImFkZCIsIl9jbGVhckFsbENoaWxkcyIsInN3aXRjaENvbXBsZXRlVG9kbyIsInRvZG9Db250ZW50RWwiLCJzdHlsZSIsInRleHREZWNvcmF0aW9uIiwidG9kb0lucHV0Iiwic3BsaXQiLCJfZ2V0VG9kb0NvbnRlbnQiLCJkZWxldGVUb2RvIiwidG9kb0NvbnRhaW5lciIsImNsZWFyVG9kb3MiLCJmb3JFYWNoIiwidG9kbyIsImRpdiIsImRpdkxlZnQiLCJkaXZSaWdodCIsImNvbXBsZXRlQnRuIiwic3BhbiIsIl9jcmVhdGVUb2RvQ29udGFpbmVyIiwiZmlyc3RDaGlsZCIsInJlbW92ZUNoaWxkIiwibGFzdENoaWxkIiwibXlUb2RvcyIsInRoZW1lTW9kZVN3aXRjaEJ0biIsInJvb3QiLCJsb2dpbkJ0biIsImxvZ091dEJ0biIsImZvcm1Mb2dpbkJ0biIsInVzZXJuYW1lSW5wdXQiLCJ1c2VybmFtZUVycm9yIiwiZm9ybUNsb3NlQnRuIiwicXVlcnlTZWxlY3RvckFsbCIsInRoZW1lTmFtZSIsImxvZ2luRm9ybSIsInNpZ251cEJ0bkxvZ2luRm9ybSIsInNpZ251cEJ0blNpZ251cEZvcm0iLCJzaWdudXBGb3JtIiwic2lnbnVwVXNlcm5hbWVJbnB1dCIsInNpZ251cEZvcm1PdmVybGF5Iiwic2lnbnVwRm9ybUVycm9yIiwiaXNMb2dpblByZXNzZWQiLCJzd2l0Y2hUaGVtZU1vZGUiLCJpY29uIiwic3JjIiwidG9nZ2xlIiwiY29udGFpbnMiLCJjbG9zZUZvcm0iLCJzd2l0Y2hUb0FjY291bnQiLCJhY2NvdW50QnRuIiwiY2xlYXIiLCJmb3JtT3ZlcmxheSIsImJ0biJdLCJzb3VyY2VSb290IjoiIn0=