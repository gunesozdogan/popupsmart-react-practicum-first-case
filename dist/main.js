(()=>{"use strict";const t={setAccountProperties:async function(t){if(t)return this.todos=t.todos,this.username=t.username,this.id=t.id,t.todos;this.todos=[]},getUserData:async function(t){try{const e=await fetch(`https://6346b5959eb7f8c0f8835425.mockapi.io/todos?username=${t}`,{method:"GET",headers:{"Content-type":"application/json; charset=UTF-8"},mode:"cors"});return(await e.json())[0]}catch(t){console.log(t)}},deleteUserTodo:function(t,e){for(let n=0;n<t.length;n++)if(t[n].content===e){t.splice(n,1);break}return t},updateUserTodos:function(t,e,n){const o={username:t,todos:e};fetch(`https://6346b5959eb7f8c0f8835425.mockapi.io/todos/${n}`,{method:"PUT",headers:{"Content-type":"application/json; charset=UTF-8"},mode:"cors",body:JSON.stringify(o)})},switchCompleteUserTodo:function(t,e){for(let n=0;n<t.length;n++)if(t[n].content===e){t[n].isCompleted=!t[n].isCompleted;break}return t},editUserTodo:function(t,e,n,o){for(let r=0;r<t.length;r++)if(t[r].content===e){t[r].content=n,t[r].date=o;break}},getTodoDate:function(t,e){for(let n=0;n<e.length;n++)if(e[n].content===t)return e[n].date},addNewAccount:async function(t){const e={username:t,todos:[]};await fetch("https://6346b5959eb7f8c0f8835425.mockapi.io/todos",{method:"POST",headers:{"Content-type":"application/json; charset=UTF-8"},mode:"cors",body:JSON.stringify(e)})},Todo:function(t,e){return{content:t,isCompleted:!1,date:e}},todos:[],username:void 0,id:void 0,darkMode:!1};function e(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}function o(t){return e(1,arguments),t instanceof Date||"object"===n(t)&&"[object Date]"===Object.prototype.toString.call(t)}function r(t){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},r(t)}function a(t){e(1,arguments);var n=Object.prototype.toString.call(t);return t instanceof Date||"object"===r(t)&&"[object Date]"===n?new Date(t.getTime()):"number"==typeof t||"[object Number]"===n?new Date(t):("string"!=typeof t&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function i(t){if(e(1,arguments),!o(t)&&"number"!=typeof t)return!1;var n=a(t);return!isNaN(Number(n))}function s(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function d(t,n){e(2,arguments);var o=a(t).getTime(),r=s(n);return new Date(o+r)}function u(t,n){e(2,arguments);var o=s(n);return d(t,-o)}var c=864e5;function l(t){e(1,arguments);var n=1,o=a(t),r=o.getUTCDay(),i=(r<n?7:0)+r-n;return o.setUTCDate(o.getUTCDate()-i),o.setUTCHours(0,0,0,0),o}function m(t){e(1,arguments);var n=a(t),o=n.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(o+1,0,4),r.setUTCHours(0,0,0,0);var i=l(r),s=new Date(0);s.setUTCFullYear(o,0,4),s.setUTCHours(0,0,0,0);var d=l(s);return n.getTime()>=i.getTime()?o+1:n.getTime()>=d.getTime()?o:o-1}function h(t){e(1,arguments);var n=m(t),o=new Date(0);o.setUTCFullYear(n,0,4),o.setUTCHours(0,0,0,0);var r=l(o);return r}var f=6048e5,g={};function v(){return g}function y(t,n){var o,r,i,d,u,c,l,m;e(1,arguments);var h=v(),f=s(null!==(o=null!==(r=null!==(i=null!==(d=null==n?void 0:n.weekStartsOn)&&void 0!==d?d:null==n||null===(u=n.locale)||void 0===u||null===(c=u.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==i?i:h.weekStartsOn)&&void 0!==r?r:null===(l=h.locale)||void 0===l||null===(m=l.options)||void 0===m?void 0:m.weekStartsOn)&&void 0!==o?o:0);if(!(f>=0&&f<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var g=a(t),y=g.getUTCDay(),w=(y<f?7:0)+y-f;return g.setUTCDate(g.getUTCDate()-w),g.setUTCHours(0,0,0,0),g}function w(t,n){var o,r,i,d,u,c,l,m;e(1,arguments);var h=a(t),f=h.getUTCFullYear(),g=v(),w=s(null!==(o=null!==(r=null!==(i=null!==(d=null==n?void 0:n.firstWeekContainsDate)&&void 0!==d?d:null==n||null===(u=n.locale)||void 0===u||null===(c=u.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==i?i:g.firstWeekContainsDate)&&void 0!==r?r:null===(l=g.locale)||void 0===l||null===(m=l.options)||void 0===m?void 0:m.firstWeekContainsDate)&&void 0!==o?o:1);if(!(w>=1&&w<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var p=new Date(0);p.setUTCFullYear(f+1,0,w),p.setUTCHours(0,0,0,0);var b=y(p,n),C=new Date(0);C.setUTCFullYear(f,0,w),C.setUTCHours(0,0,0,0);var T=y(C,n);return h.getTime()>=b.getTime()?f+1:h.getTime()>=T.getTime()?f:f-1}function p(t,n){var o,r,a,i,d,u,c,l;e(1,arguments);var m=v(),h=s(null!==(o=null!==(r=null!==(a=null!==(i=null==n?void 0:n.firstWeekContainsDate)&&void 0!==i?i:null==n||null===(d=n.locale)||void 0===d||null===(u=d.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==a?a:m.firstWeekContainsDate)&&void 0!==r?r:null===(c=m.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==o?o:1),f=w(t,n),g=new Date(0);g.setUTCFullYear(f,0,h),g.setUTCHours(0,0,0,0);var p=y(g,n);return p}var b=6048e5;function C(t,e){for(var n=t<0?"-":"",o=Math.abs(t).toString();o.length<e;)o="0"+o;return n+o}const T=function(t,e){var n=t.getUTCFullYear(),o=n>0?n:1-n;return C("yy"===e?o%100:o,e.length)},S=function(t,e){var n=t.getUTCMonth();return"M"===e?String(n+1):C(n+1,2)},k=function(t,e){return C(t.getUTCDate(),e.length)},M=function(t,e){return C(t.getUTCHours()%12||12,e.length)},D=function(t,e){return C(t.getUTCHours(),e.length)},x=function(t,e){return C(t.getUTCMinutes(),e.length)},E=function(t,e){return C(t.getUTCSeconds(),e.length)},U=function(t,e){var n=e.length,o=t.getUTCMilliseconds();return C(Math.floor(o*Math.pow(10,n-3)),e.length)};function L(t,e){var n=t>0?"-":"+",o=Math.abs(t),r=Math.floor(o/60),a=o%60;if(0===a)return n+String(r);var i=e||"";return n+String(r)+i+C(a,2)}function N(t,e){return t%60==0?(t>0?"-":"+")+C(Math.abs(t)/60,2):W(t,e)}function W(t,e){var n=e||"",o=t>0?"-":"+",r=Math.abs(t);return o+C(Math.floor(r/60),2)+n+C(r%60,2)}const q={G:function(t,e,n){var o=t.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(o,{width:"abbreviated"});case"GGGGG":return n.era(o,{width:"narrow"});default:return n.era(o,{width:"wide"})}},y:function(t,e,n){if("yo"===e){var o=t.getUTCFullYear(),r=o>0?o:1-o;return n.ordinalNumber(r,{unit:"year"})}return T(t,e)},Y:function(t,e,n,o){var r=w(t,o),a=r>0?r:1-r;return"YY"===e?C(a%100,2):"Yo"===e?n.ordinalNumber(a,{unit:"year"}):C(a,e.length)},R:function(t,e){return C(m(t),e.length)},u:function(t,e){return C(t.getUTCFullYear(),e.length)},Q:function(t,e,n){var o=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"Q":return String(o);case"QQ":return C(o,2);case"Qo":return n.ordinalNumber(o,{unit:"quarter"});case"QQQ":return n.quarter(o,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(o,{width:"narrow",context:"formatting"});default:return n.quarter(o,{width:"wide",context:"formatting"})}},q:function(t,e,n){var o=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"q":return String(o);case"qq":return C(o,2);case"qo":return n.ordinalNumber(o,{unit:"quarter"});case"qqq":return n.quarter(o,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(o,{width:"narrow",context:"standalone"});default:return n.quarter(o,{width:"wide",context:"standalone"})}},M:function(t,e,n){var o=t.getUTCMonth();switch(e){case"M":case"MM":return S(t,e);case"Mo":return n.ordinalNumber(o+1,{unit:"month"});case"MMM":return n.month(o,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(o,{width:"narrow",context:"formatting"});default:return n.month(o,{width:"wide",context:"formatting"})}},L:function(t,e,n){var o=t.getUTCMonth();switch(e){case"L":return String(o+1);case"LL":return C(o+1,2);case"Lo":return n.ordinalNumber(o+1,{unit:"month"});case"LLL":return n.month(o,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(o,{width:"narrow",context:"standalone"});default:return n.month(o,{width:"wide",context:"standalone"})}},w:function(t,n,o,r){var i=function(t,n){e(1,arguments);var o=a(t),r=y(o,n).getTime()-p(o,n).getTime();return Math.round(r/b)+1}(t,r);return"wo"===n?o.ordinalNumber(i,{unit:"week"}):C(i,n.length)},I:function(t,n,o){var r=function(t){e(1,arguments);var n=a(t),o=l(n).getTime()-h(n).getTime();return Math.round(o/f)+1}(t);return"Io"===n?o.ordinalNumber(r,{unit:"week"}):C(r,n.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getUTCDate(),{unit:"date"}):k(t,e)},D:function(t,n,o){var r=function(t){e(1,arguments);var n=a(t),o=n.getTime();n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0);var r=n.getTime(),i=o-r;return Math.floor(i/c)+1}(t);return"Do"===n?o.ordinalNumber(r,{unit:"dayOfYear"}):C(r,n.length)},E:function(t,e,n){var o=t.getUTCDay();switch(e){case"E":case"EE":case"EEE":return n.day(o,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(o,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},e:function(t,e,n,o){var r=t.getUTCDay(),a=(r-o.weekStartsOn+8)%7||7;switch(e){case"e":return String(a);case"ee":return C(a,2);case"eo":return n.ordinalNumber(a,{unit:"day"});case"eee":return n.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},c:function(t,e,n,o){var r=t.getUTCDay(),a=(r-o.weekStartsOn+8)%7||7;switch(e){case"c":return String(a);case"cc":return C(a,e.length);case"co":return n.ordinalNumber(a,{unit:"day"});case"ccc":return n.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(r,{width:"narrow",context:"standalone"});case"cccccc":return n.day(r,{width:"short",context:"standalone"});default:return n.day(r,{width:"wide",context:"standalone"})}},i:function(t,e,n){var o=t.getUTCDay(),r=0===o?7:o;switch(e){case"i":return String(r);case"ii":return C(r,e.length);case"io":return n.ordinalNumber(r,{unit:"day"});case"iii":return n.day(o,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(o,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},a:function(t,e,n){var o=t.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},b:function(t,e,n){var o,r=t.getUTCHours();switch(o=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},B:function(t,e,n){var o,r=t.getUTCHours();switch(o=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){var o=t.getUTCHours()%12;return 0===o&&(o=12),n.ordinalNumber(o,{unit:"hour"})}return M(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getUTCHours(),{unit:"hour"}):D(t,e)},K:function(t,e,n){var o=t.getUTCHours()%12;return"Ko"===e?n.ordinalNumber(o,{unit:"hour"}):C(o,e.length)},k:function(t,e,n){var o=t.getUTCHours();return 0===o&&(o=24),"ko"===e?n.ordinalNumber(o,{unit:"hour"}):C(o,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getUTCMinutes(),{unit:"minute"}):x(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getUTCSeconds(),{unit:"second"}):E(t,e)},S:function(t,e){return U(t,e)},X:function(t,e,n,o){var r=(o._originalDate||t).getTimezoneOffset();if(0===r)return"Z";switch(e){case"X":return N(r);case"XXXX":case"XX":return W(r);default:return W(r,":")}},x:function(t,e,n,o){var r=(o._originalDate||t).getTimezoneOffset();switch(e){case"x":return N(r);case"xxxx":case"xx":return W(r);default:return W(r,":")}},O:function(t,e,n,o){var r=(o._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+L(r,":");default:return"GMT"+W(r,":")}},z:function(t,e,n,o){var r=(o._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+L(r,":");default:return"GMT"+W(r,":")}},t:function(t,e,n,o){var r=o._originalDate||t;return C(Math.floor(r.getTime()/1e3),e.length)},T:function(t,e,n,o){return C((o._originalDate||t).getTime(),e.length)}};var P=function(t,e){switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},Y=function(t,e){switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}},A={p:Y,P:function(t,e){var n,o=t.match(/(P+)(p+)?/)||[],r=o[1],a=o[2];if(!a)return P(t,e);switch(r){case"P":n=e.dateTime({width:"short"});break;case"PP":n=e.dateTime({width:"medium"});break;case"PPP":n=e.dateTime({width:"long"});break;default:n=e.dateTime({width:"full"})}return n.replace("{{date}}",P(r,e)).replace("{{time}}",Y(a,e))}};const O=A;function j(t){var e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}var F=["D","DD"],H=["YY","YYYY"];function z(t){return-1!==F.indexOf(t)}function V(t){return-1!==H.indexOf(t)}function B(t,e,n){if("YYYY"===t)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===t)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===t)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===t)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var G={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function I(t){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.width?String(e.width):t.defaultWidth,o=t.formats[n]||t.formats[t.defaultWidth];return o}}var Q,X={date:I({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:I({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:I({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},R={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function J(t){return function(e,n){var o;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&t.formattingValues){var r=t.defaultFormattingWidth||t.defaultWidth,a=null!=n&&n.width?String(n.width):r;o=t.formattingValues[a]||t.formattingValues[r]}else{var i=t.defaultWidth,s=null!=n&&n.width?String(n.width):t.defaultWidth;o=t.values[s]||t.values[i]}return o[t.argumentCallback?t.argumentCallback(e):e]}}function $(t){return function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=n.width,r=o&&t.matchPatterns[o]||t.matchPatterns[t.defaultMatchWidth],a=e.match(r);if(!a)return null;var i,s=a[0],d=o&&t.parsePatterns[o]||t.parsePatterns[t.defaultParseWidth],u=Array.isArray(d)?K(d,(function(t){return t.test(s)})):_(d,(function(t){return t.test(s)}));i=t.valueCallback?t.valueCallback(u):u,i=n.valueCallback?n.valueCallback(i):i;var c=e.slice(s.length);return{value:i,rest:c}}}function _(t,e){for(var n in t)if(t.hasOwnProperty(n)&&e(t[n]))return n}function K(t,e){for(var n=0;n<t.length;n++)if(e(t[n]))return n}const Z={code:"en-US",formatDistance:function(t,e,n){var o,r=G[t];return o="string"==typeof r?r:1===e?r.one:r.other.replace("{{count}}",e.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+o:o+" ago":o},formatLong:X,formatRelative:function(t,e,n,o){return R[t]},localize:{ordinalNumber:function(t,e){var n=Number(t),o=n%100;if(o>20||o<10)switch(o%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:J({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:J({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return t-1}}),month:J({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:J({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:J({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(Q={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.match(Q.matchPattern);if(!n)return null;var o=n[0],r=t.match(Q.parsePattern);if(!r)return null;var a=Q.valueCallback?Q.valueCallback(r[0]):r[0];a=e.valueCallback?e.valueCallback(a):a;var i=t.slice(o.length);return{value:a,rest:i}}),era:$({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:$({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:$({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:$({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:$({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};var tt=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,et=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,nt=/^'([^]*?)'?$/,ot=/''/g,rt=/[a-zA-Z]/;function at(t,n,o){var r,d,c,l,m,h,f,g,y,w,p,b,C,T,S,k,M,D;e(2,arguments);var x=String(n),E=v(),U=null!==(r=null!==(d=null==o?void 0:o.locale)&&void 0!==d?d:E.locale)&&void 0!==r?r:Z,L=s(null!==(c=null!==(l=null!==(m=null!==(h=null==o?void 0:o.firstWeekContainsDate)&&void 0!==h?h:null==o||null===(f=o.locale)||void 0===f||null===(g=f.options)||void 0===g?void 0:g.firstWeekContainsDate)&&void 0!==m?m:E.firstWeekContainsDate)&&void 0!==l?l:null===(y=E.locale)||void 0===y||null===(w=y.options)||void 0===w?void 0:w.firstWeekContainsDate)&&void 0!==c?c:1);if(!(L>=1&&L<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var N=s(null!==(p=null!==(b=null!==(C=null!==(T=null==o?void 0:o.weekStartsOn)&&void 0!==T?T:null==o||null===(S=o.locale)||void 0===S||null===(k=S.options)||void 0===k?void 0:k.weekStartsOn)&&void 0!==C?C:E.weekStartsOn)&&void 0!==b?b:null===(M=E.locale)||void 0===M||null===(D=M.options)||void 0===D?void 0:D.weekStartsOn)&&void 0!==p?p:0);if(!(N>=0&&N<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!U.localize)throw new RangeError("locale must contain localize property");if(!U.formatLong)throw new RangeError("locale must contain formatLong property");var W=a(t);if(!i(W))throw new RangeError("Invalid time value");var P=j(W),Y=u(W,P),A={firstWeekContainsDate:L,weekStartsOn:N,locale:U,_originalDate:W},F=x.match(et).map((function(t){var e=t[0];return"p"===e||"P"===e?(0,O[e])(t,U.formatLong):t})).join("").match(tt).map((function(e){if("''"===e)return"'";var r=e[0];if("'"===r)return it(e);var a=q[r];if(a)return null!=o&&o.useAdditionalWeekYearTokens||!V(e)||B(e,n,String(t)),null!=o&&o.useAdditionalDayOfYearTokens||!z(e)||B(e,n,String(t)),a(Y,e,U.localize,A);if(r.match(rt))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return e})).join("");return F}function it(t){var e=t.match(nt);return e?e[1].replace(ot,"'"):t}const st=function(){function t(t){return!t.validity.tooShort&&""!==t.value&&!t.value.includes(" ")}return{formatDate:function(t,e){return at(new Date(t),e)},createElementWithClass:function(t,e){const n=document.createElement(t);for(let[t,o]of Object.entries(e))"event"===t?n.addEventListener(e.event.type,e.event.functionName):n[t]=o;return n},isValid:t,showInputValidationError:function(e){t(e)?e.setCustomValidity(""):(e.setCustomValidity(`This input must be at least ${e.minLength} characters and cannot include spaces!`),e.reportValidity())}}}(),dt=st,ut=function(){function t(){const t=localStorage.getItem("account");return JSON.parse(t)}return{saveAccount:function(t){const e={username:t.username,todos:t.todos,id:t.id,darkMode:t.darkMode};localStorage.setItem("account",JSON.stringify(e))},initializeAccountProperties:function(e){const n=t();e.username=n.username,e.todos=n.todos,e.id=n.id,e.darkMode=n.darkMode},getAccount:t}}(),ct=function(){const e=t,n=dt,o=document.querySelector(".todos-section"),r=ut;function a(t){const a=document.querySelector(".add-todo-form-name-input");if(!n.isValid(a))return n.showInputValidationError(a),void t.preventDefault();const i=document.querySelector(".add-todo-form-name-input").value,s=i[0].toUpperCase()+i.slice(1),u=document.querySelector(".add-todo-form-date-input").value,c=n.formatDate(new Date(u),"MM/dd/yyyy"),l=e.Todo(s,c);e.todos.push(l),f(e.todos),d(o),e.updateUserTodos(e.username,e.todos,e.id),r.saveAccount(e)}function i(){document.querySelector(".add-todo-btn").remove();const t=n.createElementWithClass("div",{className:"add-todo-form-container"}),e=n.createElementWithClass("div",{className:"todo-form-input-container"}),r=n.createElementWithClass("input",{className:"add-todo-form-name-input",placeholder:"Todo Name",type:"text",spellcheck:!1,minLength:3}),i=n.createElementWithClass("input",{className:"add-todo-form-date-input",type:"date",value:n.formatDate(new Date,"yyyy-MM-dd")}),d=n.createElementWithClass("div",{className:"todo-form-btn-container"}),u=n.createElementWithClass("button",{className:"add-todo-form-btn form-btn-add-edit",textContent:"Add",event:{type:"click",functionName:a}}),c=n.createElementWithClass("button",{className:"cancel-todo-form-btn form-btn-cancel",textContent:"Cancel",event:{type:"click",functionName:s}});r.addEventListener("click",n.showInputValidationError.bind(r,r)),e.append(r,i),d.append(u,c),t.append(e,d),o.appendChild(t)}function s(){document.querySelector(".add-todo-form-container").remove(),d(o)}function d(t){t.appendChild(dt.createElementWithClass("button",{className:"add-todo-btn",innerHTML:'<?xml version="1.0" ?><!DOCTYPE svg  PUBLIC \'-//W3C//DTD SVG 1.1//EN\'  \'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\'><svg \n                class="add-todo-icon" height="32px" id="Layer_1" style="enable-background:new 0 0 32 32;" version="1.1" viewBox="0 0 32 32" width="32px" xml:space="preserve" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><path d="M28,14H18V4c0-1.104-0.896-2-2-2s-2,0.896-2,2v10H4c-1.104,0-2,0.896-2,2s0.896,2,2,2h10v10c0,1.104,0.896,2,2,2  s2-0.896,2-2V18h10c1.104,0,2-0.896,2-2S29.104,14,28,14z"/></svg> Add Todo',event:{type:"click",functionName:i}}))}function u(t){t.stopPropagation();const o=document.querySelector(".overlay-general"),r=document.querySelector(".edit-todo-form");o.classList.remove("hidden"),r.classList.remove("hidden"),r.appendChild(function(t){const o=t.closest(".todo-container").querySelector(".todo-content").textContent,r=e.getTodoDate(o,e.todos),a=n.createElementWithClass("div",{className:`edit-todo-container edit-todo-container-${o.replace(/ /g,"-")}`}),i=n.createElementWithClass("input",{className:"edit-todo-content-input",type:"text",value:o,minLength:3}),s=n.createElementWithClass("input",{className:"edit-todo-date-input",type:"date",value:n.formatDate(new Date(r),"yyyy-MM-dd")}),d=n.createElementWithClass("div",{className:"todo-form-btn-container edit-todo-btn-container"}),u=n.createElementWithClass("button",{className:"form-btn-add-edit edit-todo-form-btn",textContent:"Edit",type:"button",event:{type:"click",functionName:m}}),l=n.createElementWithClass("button",{className:"cancel-todo-form-btn form-btn-cancel",textContent:"Cancel",type:"button",event:{type:"click",functionName:c}});return i.addEventListener("input",n.showInputValidationError.bind(i,i)),d.append(u,l),a.append(i,s,d),a}(this))}function c(){const t=document.querySelector(".overlay-general"),e=document.querySelector(".edit-todo-form");t.classList.add("hidden"),e.classList.add("hidden"),v(e)}function l(t){t.stopPropagation();const n=e.username,o=this.querySelector(".todo-content"),a=o.textContent,i=this.querySelector(".todo-date"),s=e.todos;o.style.textDecoration="line-through"===o.style.textDecoration?"none":"line-through",i.style.textDecoration="line-through"===i.style.textDecoration?"none":"line-through",e.switchCompleteUserTodo(s,a),e.updateUserTodos(n,s,e.id),r.saveAccount(e)}async function m(t){const a=document.querySelector(".edit-todo-content-input");if(!n.isValid(a))return n.showInputValidationError(a),void t.preventDefault();const i=function(){let t=document.querySelector(".edit-todo-container").className.split(" ")[1].split("edit-todo-container-")[1];return t=t.replace(/-/g," "),t}(),s=document.querySelector(".edit-todo-content-input").value,u=document.querySelector(".edit-todo-date-input").value;e.editUserTodo(e.todos,i,s,u),f(e.todos),c(),d(o),e.updateUserTodos(e.username,e.todos,e.id),r.saveAccount(e)}function h(){const t=e.username,n=e.todos,o=this.closest(".todo-container"),a=o.querySelector(".todo-content").textContent;o.remove(),e.deleteUserTodo(n,a),e.updateUserTodos(t,n,e.id),r.saveAccount(e)}async function f(t){g(),t.forEach((t=>{o.appendChild(function(t){const e=n.createElementWithClass("div",{className:"todo-container",event:{type:"click",functionName:l}}),o=n.createElementWithClass("div",{className:"todo-container-left"}),r=n.createElementWithClass("div",{className:"todo-container-right"}),a=n.createElementWithClass("button",{className:"todo-isCompleted",event:{type:"click",functionName:h}}),i=n.createElementWithClass("p",{className:"todo-content",textContent:t.content}),s=n.createElementWithClass("span",{className:"todo-date",textContent:n.formatDate(new Date(t.date),"EEE do MMM yyyy")}),d=n.createElementWithClass("button",{className:"todo-edit",textContent:"Edit",event:{type:"click",functionName:u}});return t.isCompleted&&(i.style.textDecoration="line-through",s.style.textDecoration="line-through"),o.append(a,i,d),r.append(s),e.append(o,r),e}(t))}))}function g(){v(o)}function v(t){for(;t.firstChild;)t.removeChild(t.lastChild)}return r.getAccount()&&r.initializeAccountProperties(e),{displayUserTodos:f,clearTodos:g,deleteTodo:h,switchCompleteTodo:l,displayAddTodoButton:d,addTodo:a}}();!function(){const e=t,n=ut,o=ct,r=dt,a=document.querySelector(".theme-mode-switch-btn"),i=document.querySelector(":root"),s=document.querySelector(".login-btn"),d=document.querySelector(".logout-btn"),u=document.querySelector(".overlay-general"),c=document.querySelector(".form-login-btn"),l=document.querySelector(".username-input"),m=document.querySelector(".username-error"),h=[...document.querySelectorAll(".form-close-btn")],f=document.querySelector(".theme-name"),g=document.querySelector(".todos-section"),v=document.querySelector(".login-form"),y=document.querySelector(".sign-up-btn"),w=document.querySelector(".form-signup-btn"),p=document.querySelector(".signup-form"),b=document.querySelector(".signup-username-input"),C=document.querySelector(".signup-overlay-form"),T=document.querySelector(".signup-username-error"),S=document.querySelector(".inbox-heading");let k=!1;function M(t){const o=a.querySelector("img");!0===t?(i.classList.add("dark-theme"),o.src="icons/darkTheme.svg",a.classList.add("dark-theme"),f.textContent="Light Mode"):!1===t?(i.classList.remove("dark-theme"),o.src="icons/lightTheme.svg",a.classList.remove("dark-theme"),f.textContent="Dark Mode"):(i.classList.toggle("dark-theme"),a.classList.contains("dark-theme")?(o.src="icons/lightTheme.svg",a.classList.remove("dark-theme"),f.textContent="Dark Mode",e.darkMode=!1):(o.src="icons/darkTheme.svg",a.classList.add("dark-theme"),f.textContent="Light Mode",e.darkMode=!0)),n.saveAccount(e)}function D(){s.classList.contains("login-btn")&&(u.classList.remove("hidden"),v.classList.remove("hidden"),l.value="",m.classList.add("hidden"))}function x(){u.classList.add("hidden"),v.classList.add("hidden"),p.classList.add("hidden")}function E(t){s.textContent=t+"",s.innerHTML=`${t}<?xml version="1.0" ?><svg class= "dropdown-arrow-icon" height="48" viewBox="0 0 48 48" width="48" xmlns="http://www.w3.org/2000/svg"><path d="M14.83 16.42l9.17 9.17 9.17-9.17 2.83 2.83-12 12-12-12z"/><path d="M0-.75h48v48h-48z" fill="none"/></svg>`,s.classList.remove("login-btn"),s.classList.add("account-btn")}a.addEventListener("click",M),s.addEventListener("click",D),d.addEventListener("click",(function(){const t=document.querySelector(".account-btn");t.classList.remove("account-btn"),t.classList.add("login-btn"),t.textContent="Login",o.clearTodos(),localStorage.clear(),S.classList.remove("clicked")})),c.addEventListener("click",(async function(t){const a=document.querySelector(".overlay-form");if(k)return;if(k=!0,!r.isValid(l))return r.showInputValidationError(l),t.preventDefault(),void(k=!1);a.classList.remove("hidden");const i=l.value,s=await e.getUserData(i);if(s){const t=s.todos;e.setAccountProperties(s),await o.displayUserTodos(t),S.classList.add("clicked"),E(i),o.displayAddTodoButton(g),x(),a.classList.add("hidden"),k=!1,n.saveAccount(e)}else a.classList.add("hidden"),m.classList.remove("hidden"),k=!1})),l.addEventListener("input",r.showInputValidationError.bind(l,l)),h.forEach((t=>t.addEventListener("click",x))),y.addEventListener("click",(function(){u.classList.remove("hidden"),v.classList.add("hidden"),p.classList.remove("hidden"),b.value="",T.classList.add("hidden")})),b.addEventListener("input",r.showInputValidationError.bind(b,b)),w.addEventListener("click",(async function(t){const a=b.value;if(!r.isValid(b))return r.showInputValidationError(b),void t.preventDefault();C.classList.remove("hidden");let i=await e.getUserData(a);if(i)return T.classList.remove("hidden"),void C.classList.add("hidden");await e.addNewAccount(a),i=await e.getUserData(a),e.setAccountProperties(i),C.classList.add("hidden"),x(),E(a),o.displayUserTodos(e.todos),o.displayAddTodoButton(g),e.username=a,n.saveAccount(e)})),n.getAccount()?(n.initializeAccountProperties(e),o.displayUserTodos(e.todos),E(e.username),o.displayAddTodoButton(g),M(t.darkMode),S.classList.add("clicked")):D()}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,